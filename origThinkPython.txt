
1 The way of the program 1 

1.1 ThePythonprogramminglanguage ...................... 1 


1.2 Whatisaprogram? ................................ 3 


1.3 Whatisdebugging?................................ 3 


1.4 Formalandnaturallanguages .......................... 5 


1.5 Thefirstprogram ................................. 6 


1.6 Debugging..................................... 7 


1.7 Glossary ...................................... 7 


1.8 Exercises ...................................... 9 


2 Variables, expressions and statements 11 

2.1 Valuesandtypes ................................. 11 


2.2 Variables ...................................... 12 


2.3 Variablenamesandkeywords.......................... 13 


2.4 Operatorsandoperands ............................. 13 


2.5 Expressionsandstatements ........................... 14 


2.6 Interactivemodeandscriptmode........................ 14 


2.7 Orderofoperations ................................ 15 


2.8 Stringoperations ................................. 16 


2.9 Comments ..................................... 16 


2.10 Debugging..................................... 17 


2.11 Glossary ...................................... 17 


2.12 Exercises ...................................... 18 



xiv Contents 

3 Functions 19 

3.1 Functioncalls ................................... 19 


3.2 Typeconversionfunctions ............................ 19 


3.3 Mathfunctions................................... 20 


3.4 Composition.................................... 21 


3.5 Addingnewfunctions .............................. 21 


3.6 Definitionsanduses ............................... 22 


3.7 Flowofexecution ................................. 23 


3.8 Parametersandarguments............................ 23 


3.9 Variablesandparametersarelocal ....................... 24 


3.10 Stackdiagrams .................................. 25 


3.11 Fruitfulfunctionsandvoidfunctions...................... 26 


3.12 Whyfunctions? .................................. 26 


3.13 Importing with fro. 
............................... 27 


3.14 Debugging..................................... 27 


3.15 Glossary ...................................... 28 


3.16 Exercises ...................................... 29 


4 Case study: interface design 31 

4.1 TurtleWorld .................................... 31 


4.2 Simplerepetition ................................. 32 


4.3 Exercises ...................................... 33 


4.4 Encapsulation ................................... 34 


4.5 Generalization................................... 34 


4.6 Interfacedesign .................................. 35 


4.7 Refactoring..................................... 36 


4.8 Adevelopmentplan ............................... 37 


4.9 docstring...................................... 37 


4.10 Debugging..................................... 38 


4.11 Glossary ...................................... 38 


4.12 Exercises ...................................... 39 



Contents xv 

5 Conditionals and recursion 41 

5.1 Modulusoperator ................................. 41 


5.2 Booleanexpressions................................ 41 


5.3 Logicaloperators ................................. 42 


5.4 Conditionalexecution .............................. 42 


5.5 Alternativeexecution ............................... 43 


5.6 Chainedconditionals ............................... 43 


5.7 Nestedconditionals ................................ 43 


5.8 Recursion...................................... 44 


5.9 Stackdiagramsforrecursivefunctions . . . . . . . . . . . . . . . . . . . . . 45 

5.10 Infiniterecursion ................................. 46 


5.11 Keyboardinput .................................. 46 


5.12 Debugging..................................... 47 


5.13 Glossary ...................................... 48 


5.14 Exercises ...................................... 49 


6 Fruitful functions 51 

6.1 Returnvalues ................................... 51 


6.2 Incrementaldevelopment ............................ 52 


6.3 Composition.................................... 54 


6.4 Booleanfunctions ................................. 54 


6.5 Morerecursion................................... 55 


6.6 Leapoffaith .................................... 57 


6.7 Onemoreexample ................................ 57 


6.8 Checkingtypes .................................. 58 


6.9 Debugging..................................... 59 


6.10 Glossary ...................................... 60 


6.11 Exercises ...................................... 60 



xvi Contents 

7 Iteration 63 

7.1 Multipleassignment ............................... 63 


7.2 Updatingvariables ................................ 64 


7.3 The whil. 
statement ............................... 64 


7.4 brea. 
........................................ 65 


7.5 Squareroots .................................... 66 


7.6 Algorithms..................................... 67 


7.7 Debugging..................................... 68 


7.8 Glossary ...................................... 68 


7.9 Exercises ...................................... 69 


8 Strings 71 

8.1 Astringisasequence............................... 71 


8.2 le. 
......................................... 71 


8.3 Traversal with a fo. 
loop............................. 72 


8.4 Stringslices .................................... 73 


8.5 Stringsareimmutable .............................. 74 


8.6 Searching...................................... 74 


8.7 Loopingandcounting .............................. 75 


8.8 Stringmethods .................................. 75 


8.9 The i. 
operator .................................. 76 


8.10 Stringcomparison................................. 76 


8.11 Debugging..................................... 77 


8.12 Glossary ...................................... 78 


8.13 Exercises ...................................... 79 


9 Case study: word play 81 

9.1 Readingwordlists ................................ 81 


9.2 Exercises ...................................... 82 


9.3 Search........................................ 82 


9.4 Loopingwithindices ............................... 83 


9.5 Debugging..................................... 85 


9.6 Glossary ...................................... 85 


9.7 Exercises ...................................... 86 



Contents xvii 

10 Lists 87 

10.1 Alistisasequence ................................ 87 


10.2 Listsaremutable ................................. 87 


10.3 Traversingalist .................................. 89 


10.4 Listoperations................................... 89 


10.5 Listslices ...................................... 89 


10.6 Listmethods .................................... 90 


10.7 Map,filterandreduce .............................. 91 


10.8 Deletingelements ................................. 92 


10.9 Listsandstrings .................................. 93 


10.10 Objectsandvalues ................................ 93 


10.11 Aliasing....................................... 94 


10.12 Listarguments................................... 95 


10.13 Debugging..................................... 96 


10.14 Glossary ...................................... 97 


10.15 Exercises ...................................... 98 


11 Dictionaries 101 

11.1 Dictionaryasasetofcounters .......................... 102 


11.2 Loopinganddictionaries............................. 103 


11.3 Reverselookup .................................. 104 


11.4 Dictionariesandlists ............................... 105 


11.5 Memos ....................................... 106 


11.6 Globalvariables .................................. 108 


11.7 Longintegers ................................... 109 


11.8 Debugging..................................... 109 


11.9 Glossary ...................................... 110 


11.10 Exercises ...................................... 111 



xviii Contents 

12 Tuples 113 

12.1 Tuplesareimmutable ............................... 113 


12.2 Tupleassignment ................................. 114 


12.3 Tuplesasreturnvalues .............................. 115 


12.4 Variable-lengthargumenttuples ........................ 115 


12.5 Listsandtuples .................................. 116 


12.6 Dictionariesandtuples .............................. 117 


12.7 Comparingtuples ................................. 118 


12.8 Sequencesofsequences.............................. 119 


12.9 Debugging..................................... 120 


12.10 Glossary ...................................... 121 


12.11 Exercises ...................................... 121 


13 Case study: data structure selection 123 

13.1 Wordfrequencyanalysis ............................. 123 


13.2 Randomnumbers ................................. 124 


13.3 Wordhistogram .................................. 125 


13.4 Mostcommonwords ............................... 126 


13.5 Optionalparameters ............................... 126 


13.6 Dictionarysubtraction .............................. 127 


13.7 Randomwords .................................. 127 


13.8 Markovanalysis .................................. 128 


13.9 Datastructures................................... 129 


13.10 Debugging..................................... 131 


13.11 Glossary ...................................... 132 


13.12 Exercises ...................................... 132 


14 Files 133 

14.1 Persistence..................................... 133 


14.2 Readingandwriting ............................... 133 


14.3 Formatoperator .................................. 134 


14.4 Filenamesandpaths ............................... 135 



Contents xix 

14.5 Catchingexceptions................................ 136 


14.6 Databases...................................... 137 


14.7 Pickling....................................... 137 


14.8 Pipes ........................................ 138 


14.9 Writingmodules.................................. 139 


14.10 Debugging..................................... 140 


14.11 Glossary ...................................... 141 


14.12 Exercises ...................................... 141 


15 Classes and objects 143 

15.1 User-definedtypes ................................ 143 


15.2 Attributes ..................................... 144 


15.3 Rectangles ..................................... 145 


15.4 Instancesasreturnvalues ............................ 146 


15.5 Objectsaremutable ................................ 146 


15.6 Copying ...................................... 147 


15.7 Debugging..................................... 148 


15.8 Glossary ...................................... 149 


15.9 Exercises ...................................... 149 


16 Classes and functions 151 

16.1 Time......................................... 151 


16.2 Purefunctions ................................... 151 


16.3 Modifiers...................................... 153 


16.4 Prototypingversusplanning........................... 154 


16.5 Debugging..................................... 155 


16.6 Glossary ...................................... 155 


16.7 Exercises ...................................... 156 



Contents 

17 Classes and methods 157 

17.1 Object-orientedfeatures ............................. 157 


17.2 Printingobjects .................................. 158 


17.3 Anotherexample ................................. 159 


17.4 Amorecomplicatedexample .......................... 160 


17.5 Theinitmethod .................................. 160 


17.6 The __str_. 
method ............................... 161 


17.7 Operatoroverloading............................... 161 


17.8 Type-baseddispatch ............................... 162 


17.9 Polymorphism................................... 163 


17.10 Debugging..................................... 164 


17.11 Interfaceandimplementation .......................... 164 


17.12 Glossary ...................................... 165 


17.13 Exercises ...................................... 165 


18 Inheritance 167 

18.1 Cardobjects .................................... 167 


18.2 Classattributes .................................. 168 


18.3 Comparingcards ................................. 169 


18.4 Decks........................................ 170 


18.5 Printingthedeck ................................. 171 


18.6 Add,remove,shuffleandsort .......................... 171 


18.7 Inheritance..................................... 172 


18.8 Classdiagrams .................................. 173 


18.9 Debugging..................................... 174 


18.10 Dataencapsulation ................................ 175 


18.11 Glossary ...................................... 176 


18.12 Exercises ...................................... 177 



Contents xxi 

19 Case study: Tkinter 

19.1 GUI......................................... 179 


19.2 Buttonsandcallbacks............................... 180 


19.3 Canvaswidgets .................................. 181 


19.4 Coordinatesequences............................... 182 


19.5 Morewidgets ................................... 182 


19.6 Packingwidgets .................................. 183 


19.7 MenusandCallables ............................... 185 


19.8 Binding....................................... 186 


19.9 Debugging..................................... 188 


19.10 Glossary ...................................... 189 


19.11 Exercises ...................................... 190 


A Debugging 193 

A.1 Syntaxerrors.................................... 193 


A.2 Runtimeerrors................................... 195 


A.3 Semanticerrors .................................. 198 


B Analysis of Algorithms 201 

B.1 Orderofgrowth .................................. 202 


B.2 AnalysisofbasicPythonoperations ...................... 204 


B.3 Analysisofsearchalgorithms .......................... 205 


B.4 Hashtables..................................... 206 


C Lumpy 211 

C.1 Statediagram ................................... 211 


C.2 Stackdiagram ................................... 212 


C.3 Objectdiagrams .................................. 213 


C.4 Functionandclassobjects ............................ 215 


C.5 ClassDiagrams .................................. 216 



xxii Contents 


Chapter 1 

The way of the program 

The goal of this book is to teach you to think like a computer scientist. This way of thinking
 combines some of the best features of mathematics, engineering, and natural science. 
Like mathematicians, computer scientists use formal languages to denote ideas (specifically
 computations). Like engineers, they design things, assembling components into systems
 and evaluating tradeoffs among alternatives. Like scientists, they observe the behavior
 of complex systems, form hypotheses, and test predictions. 

The single most important skill for a computer scientist is problem solving. Problem solving
 means the ability to formulate problems, think creatively about solutions, and express 
a solution clearly and accurately. As it turns out, the process of learning to program is an 
excellent opportunity to practice problem-solving skills. That�s why this chapter is called, 
�The way of the program.� 

On one level, you will be learning to program, a useful skill by itself. On another level, you 
will use programming as a means to an end. As we go along, that end will become clearer. 

1.1 The Python programming language 
The programming language you will learn is Python. Python is an example of a high-level 
language; other high-level languages you might have heard of are C, C++, Perl, and Java. 

There are also low-level languages, sometimes referred to as �machine languages� or �assembly
 languages.� Loosely speaking, computers can only run programs written in low-
level languages. So programs written in a high-level language have to be processed before 
they can run. This extra processing takes some time, which is a small disadvantage of 
high-level languages. 

The advantages are enormous. First, it is much easier to program in a high-level language. 
Programs written in a high-level language take less time to write, they are shorter and 
easier to read, and they are more likely to be correct. Second, high-level languages are 
portable, meaning that they can run on different kinds of computers with few or no modifications.
 Low-level programs can run on only one kind of computer and have to be rewritten
 to run on another. 


Chapter 1. The way of the program 

SOURCECODEINTERPRETEROUTPUT
Figure 1.1: An interpreter processes the program a little at a time, alternately reading lines 
and performing computations. 

CODEOBJECTEXECUTORCODESOURCECOMPILEROUTPUT
Figure 1.2: A compiler translates source code into object code, which is run by a hardware 
executor. 

Due to these advantages, almost all programs are written in high-level languages. Low-
level languages are used only for a few specialized applications. 

Two kinds of programs process high-level languages into low-level languages: interpreters 
and compilers. An interpreter reads a high-level program and executes it, meaning that it 
does what the program says. It processes the program a little at a time, alternately reading 
lines and performing computations. Figure 1.1 shows the structure of an interpreter. 

A compiler reads the program and translates it completely before the program starts running.
 In this context, the high-level program is called the source code, and the translated 
program is called the object code or the executable. Once a program is compiled, you 
can execute it repeatedly without further translation. Figure 1.2 shows the structure of a 
compiler. 

Python is considered an interpreted language because Python programs are executed by an 
interpreter. There are two ways to use the interpreter: interactive mode and script mode. 
In interactive mode, you type Python programs and the interpreter displays the result: 

>>>1. 
. 


. 


The chevron, >>>, is the prompt the interpreter uses to indicate that it is ready. If you type 1+1, the interpreter replies 2. 

Alternatively, you can store code in a file and use the interpreter to execute the contents of 
the file, which is called a script. By convention, Python scripts have names that end with .py. 

To execute the script, you have to tell the interpreter the name of the file. If you have a 
script named dinsdale.p. 
and you are working in a UNIX command window, you type pytho. 
dinsdale.py. In other development environments, the details of executing scripts 
are different. You can find instructions for your environment at the Python website http. 
//python.org. 

Working in interactive mode is convenient for testing small pieces of code because you can 
type and execute them immediately. But for anything more than a few lines, you should 
save your code as a script so you can modify and execute it in the future. 


1.2. What is a program? 
1.2 What is a program? 
A program is a sequence of instructions that specifies how to perform a computation. The 
computation might be something mathematical, such as solving a system of equations or 
finding the roots of a polynomial, but it can also be a symbolic computation, such as searching
 and replacing text in a document or (strangely enough) compiling a program. 

The details look different in different languages, but a few basic instructions appear in just 
about every language: 

input: Get data from the keyboard, a file, or some other device. 

output: Display data on the screen or send data to a file or other device. 

math: Perform basic mathematical operations like addition and multiplication. 

conditional execution: Check for certain conditions and execute the appropriate code. 

repetition: Perform some action repeatedly, usually with some variation. 

Believe it or not, that�s pretty much all there is to it. Every program you�ve ever used, 
no matter how complicated, is made up of instructions that look pretty much like these. 
So you can think of programming as the process of breaking a large, complex task into 
smaller and smaller subtasks until the subtasks are simple enough to be performed with 
one of these basic instructions. 

That may be a little vague, but we will come back to this topic when we talk about algorithms.
 

1.3 What is debugging? 
Programming is error-prone. For whimsical reasons, programming errors are called bugs 
and the process of tracking them down is called debugging. 

Three kinds of errors can occur in a program: syntax errors, runtime errors, and semantic 
errors. It is useful to distinguish between them in order to track them down more quickly. 

1.3.1 Syntax errors 
Python can only execute a program if the syntax is correct; otherwise, the interpreter displays
 an error message. Syntax refers to the structure of a program and the rules about that 
structure. For example, parentheses have to come in matching pairs, so (. 
. 
2. 
is legal, 
but 8. 
is a syntax error. 

In English, readers can tolerate most syntax errors, which is why we can read the poetry 
of e. e. cummings without spewing error messages. Python is not so forgiving. If there 
is a single syntax error anywhere in your program, Python will display an error message 
and quit, and you will not be able to run your program. During the first few weeks of your 
programming career, you will probably spend a lot of time tracking down syntax errors. 
As you gain experience, you will make fewer errors and find them faster. 


Chapter 1. The way of the program 

1.3.2 Runtime errors 
The second type of error is a runtime error, so called because the error does not appear until 
after the program has started running. These errors are also called exceptions because they 
usually indicate that something exceptional (and bad) has happened. 

Runtime errors are rare in the simple programs you will see in the first few chapters, so it 
might be a while before you encounter one. 

1.3.3 Semantic errors 
The third type of error is the semantic error. If there is a semantic error in your program, it 
will run successfully in the sense that the computer will not generate any error messages, 
but it will not do the right thing. It will do something else. Specifically, it will do what you 
told it to do. 

The problem is that the program you wrote is not the program you wanted to write. The 
meaning of the program (its semantics) is wrong. Identifying semantic errors can be tricky 
because it requires you to work backward by looking at the output of the program and 
trying to figure out what it is doing. 

1.3.4 Experimental debugging 
One of the most important skills you will acquire is debugging. Although it can be frustrating,
 debugging is one of the most intellectually rich, challenging, and interesting parts 
of programming. 

In some ways, debugging is like detective work. You are confronted with clues, and you 
have to infer the processes and events that led to the results you see. 

Debugging is also like an experimental science. Once you have an idea about what is going 
wrong, you modify your program and try again. If your hypothesis was correct, then you 
can predict the result of the modification, and you take a step closer to a working program. 
If your hypothesis was wrong, you have to come up with a new one. As Sherlock Holmes 
pointed out, �When you have eliminated the impossible, whatever remains, however improbable,
 must be the truth.� (A. Conan Doyle, The Sign of Four) 

For some people, programming and debugging are the same thing. That is, programming 
is the process of gradually debugging a program until it does what you want. The idea is 
that you should start with a program that does something and make small modifications, 
debugging them as you go, so that you always have a working program. 

For example, Linux is an operating system that contains thousands of lines of code, but 
it started out as a simple program Linus Torvalds used to explore the Intel 80386 chip. 
According to Larry Greenfield, �One of Linus�s earlier projects was a program that would 
switch between printing AAAA and BBBB. This later evolved to Linux.� (The Linux Users� 
Guide Beta Version 1). 

Later chapters will make more suggestions about debugging and other programming practices.
 


1.4. Formal and natural languages 
1.4 Formal and natural languages 
Natural languages are the languages people speak, such as English, Spanish, and French. 
They were not designed by people (although people try to impose some order on them); 
they evolved naturally. 

Formal languages are languages that are designed by people for specific applications. For 
example, the notation that mathematicians use is a formal language that is particularly 
good at denoting relationships among numbers and symbols. Chemists use a formal language
 to represent the chemical structure of molecules. And most importantly: 

Programming languages are formal languages that have been designed to 

express computations. 

Formal languages tend to have strict rules about syntax. For example, 3 + 
3 = 
6 is a 
syntactically correct mathematical statement, but 3+= 
3$6 is not. H2O is a syntactically 
correct chemical formula, but 2Zz is not. 

Syntax rules come in two flavors, pertaining to tokens and structure. Tokens are the basic 
elements of the language, such as words, numbers, and chemical elements. One of the 
problems with 3+= 
3$6 is that $ is not a legal token in mathematics (at least as far as I 
know). Similarly, 2Zz is not legal because there is no element with the abbreviation Zz. 

The second type of syntax rule pertains to the structure of a statement; that is, the way the 
tokens are arranged. The statement 3+= 
3 is illegal because even though + 
and = 
are 
legal tokens, you can�t have one right after the other. Similarly, in a chemical formula the 
subscript comes after the element name, not before. 

Exercise 1.1. Write a well-structured English sentence with invalid tokens in it. Then write another
 sentence with all valid tokens but with invalid structure. 

When you read a sentence in English or a statement in a formal language, you have to 
figure out what the structure of the sentence is (although in a natural language you do this 
subconsciously). This process is called parsing. 

For example, when you hear the sentence, �The penny dropped,� you understand that 
�the penny� is the subject and �dropped� is the predicate. Once you have parsed a sentence,
 you can figure out what it means, or the semantics of the sentence. Assuming that 
you know what a penny is and what it means to drop, you will understand the general 
implication of this sentence. 

Although formal and natural languages have many features in common�tokens, structure,
 syntax, and semantics�there are some differences: 

ambiguity: Natural languages are full of ambiguity, which people deal with by using contextual
 clues and other information. Formal languages are designed to be nearly or 
completely unambiguous, which means that any statement has exactly one meaning, 
regardless of context. 

redundancy: In order to make up for ambiguity and reduce misunderstandings, natural 

languages employ lots of redundancy. As a result, they are often verbose. Formal 

languages are less redundant and more concise. 


Chapter 1. The way of the program 

literalness: Natural languages are full of idiom and metaphor. If I say, �The penny 
dropped,� there is probably no penny and nothing dropping (this idiom means that 
someone realized something after a period of confusion). Formal languages mean 
exactly what they say. 

People who grow up speaking a natural language�everyone�often have a hard time adjusting
 to formal languages. In some ways, the difference between formal and natural 
language is like the difference between poetry and prose, but more so: 

Poetry: Words are used for their sounds as well as for their meaning, and the whole poem 

together creates an effect or emotional response. Ambiguity is not only common but 

often deliberate. 

Prose: The literal meaning of words is more important, and the structure contributes more 
meaning. Prose is more amenable to analysis than poetry but still often ambiguous. 

Programs: The meaning of a computer program is unambiguous and literal, and can be 
understood entirely by analysis of the tokens and structure. 

Here are some suggestions for reading programs (and other formal languages). First, remember
 that formal languages are much more dense than natural languages, so it takes 
longer to read them. Also, the structure is very important, so it is usually not a good idea 
to read from top to bottom, left to right. Instead, learn to parse the program in your head, 
identifying the tokens and interpreting the structure. Finally, the details matter. Small errors
 in spelling and punctuation, which you can get away with in natural languages, can 
make a big difference in a formal language. 

1.5 The first program 
Traditionally, the first program you write in a new language is called �Hello, World!� because
 all it does is display the words �Hello, World!�. In Python, it looks like this: 

prin. 
'Hello. 
World!. 


This is an example of a print statement, which doesn�t actually print anything on paper. It 
displays a value on the screen. In this case, the result is the words 

Hello. 
World. 


The quotation marks in the program mark the beginning and end of the text to be displayed;
 they don�t appear in the result. 

In Python 3, the syntax for printing is slightly different: 

print('Hello. 
World!'. 


The parentheses indicate that prin. 
is a function. We�ll get to functions in Chapter 3. 

For the rest of this book, I�ll use the print statement. If you are using Python 3, you will 
have to translate. But other than that, there are very few differences we have to worry 
about. 


1.6. Debugging 
1.6 Debugging 
It is a good idea to read this book in front of a computer so you can try out the examples as 
you go. You can run most of the examples in interactive mode, but if you put the code in a 
script, it is easier to try out variations. 

Whenever you are experimenting with a new feature, you should try to make mistakes. 
For example, in the �Hello, world!� program, what happens if you leave out one of the 
quotation marks? What if you leave out both? What if you spell prin. 
wrong? 

This kind of experiment helps you remember what you read; it also helps with debugging, 
because you get to know what the error messages mean. It is better to make mistakes now 
and on purpose than later and accidentally. 

Programming, and especially debugging, sometimes brings out strong emotions. If you 
are struggling with a difficult bug, you might feel angry, despondent or embarrassed. 

There is evidence that people naturally respond to computers as if they were people. When 
they work well, we think of them as teammates, and when they are obstinate or rude, we 
respond to them the same way we respond to rude, obstinate people (Reeves and Nass, 

The Media Equation: How People Treat Computers, Television, and New Media Like Real People 
and Places). 

Preparing for these reactions might help you deal with them. One approach is to think of 
the computer as an employee with certain strengths, like speed and precision, and particular
 weaknesses, like lack of empathy and inability to grasp the big picture. 

Your job is to be a good manager: find ways to take advantage of the strengths and mitigate 
the weaknesses. And find ways to use your emotions to engage with the problem, without 
letting your reactions interfere with your ability to work effectively. 

Learning to debug can be frustrating, but it is a valuable skill that is useful for many activities
 beyond programming. At the end of each chapter there is a debugging section, like 
this one, with my thoughts about debugging. I hope they help! 

1.7 Glossary 
problem solving: The process of formulating a problem, finding a solution, and expressing
 the solution. 

high-level language: A programming language like Python that is designed to be easy for 
humans to read and write. 

low-level language: A programming language that is designed to be easy for a computer 
to execute; also called �machine language� or �assembly language.� 

portability: A property of a program that can run on more than one kind of computer. 

interpret: To execute a program in a high-level language by translating it one line at a time. 

compile: To translate a program written in a high-level language into a low-level language 
all at once, in preparation for later execution. 


Chapter 1. The way of the program 

source code: A program in a high-level language before being compiled. 
object code: The output of the compiler after it translates the program. 
executable: Another name for object code that is ready to be executed. 
prompt: Characters displayed by the interpreter to indicate that it is ready to take input 


from the user. 

script: A program stored in a file (usually one that will be interpreted). 

interactive mode: A way of using the Python interpreter by typing commands and expres


sions at the prompt. 
script mode: A way of using the Python interpreter to read and execute statements in a 

script. 

program: A set of instructions that specifies a computation. 

algorithm: A general process for solving a category of problems. 

bug: An error in a program. 

debugging: The process of finding and removing any of the three kinds of programming 

errors. 

syntax: The structure of a program. 

syntax error: An error in a program that makes it impossible to parse (and therefore im


possible to interpret). 

exception: An error that is detected while the program is running. 

semantics: The meaning of a program. 

semantic error: An error in a program that makes it do something other than what the 

programmer intended. 

natural language: Any one of the languages that people speak that evolved naturally. 

formal language: Any one of the languages that people have designed for specific pur


poses, such as representing mathematical ideas or computer programs; all programming
 languages are formal languages. 

token: One of the basic elements of the syntactic structure of a program, analogous to a 
word in a natural language. 

parse: To examine a program and analyze the syntactic structure. 

print statement: An instruction that causes the Python interpreter to display a value on 
the screen. 


1.8. Exercises 
1.8 Exercises 
Exercise 1.2. Use a web browser to go to the Python website http. 
/. 
python. 
or. 
. This page 
contains information about Python and links to Python-related pages, and it gives you the ability to 
search the Python documentation. 

For example, if you enter prin. 
in the search window, the first link that appears is the documentation
 of the prin. 
statement. At this point, not all of it will make sense to you, but it is good to know 
where it is. 
Exercise 1.3. Start the Python interpreter and type help(. 
to start the online help utility. Or you 
can type help('print'. 
to get information about the prin. 
statement. 

If this example doesn�t work, you may need to install additional Python documentation or set an 
environment variable; the details depend on your operating system and version of Python. 
Exercise 1.4. Start the Python interpreter and use it as a calculator. Python�s syntax for math 
operations is almost the same as standard mathematical notation. For example, the symbols +, . 
and 

. 
denote addition, subtraction and division, as you would expect. The symbol for multiplication is *. 
If you run a 10 kilometer race in 43 minutes 30 seconds, what is your average time per mile? What 
is your average speed in miles per hour? (Hint: there are 1.61 kilometers in a mile). 


Chapter 1. The way of the program 


Chapter 2 

Variables, expressions and 
statements 

2.1 Values and types 
A value is one of the basic things a program works with, like a letter or a number. The 
values we have seen so far are 1, 2, and 'Hello. 
World!'. 

These values belong to different types: . 
is an integer, and 'Hello. 
World!. 
is a string, 
so-called because it contains a �string� of letters. You (and the interpreter) can identify 
strings because they are enclosed in quotation marks. 

If you are not sure what type a value has, the interpreter can tell you. 

>>. 
type('Hello. 
World!'. 
<typ. 
'str'. 
>>. 
type(17. 
<typ. 
'int'. 


Not surprisingly, strings belong to the type st. 
and integers belong to the type int. Less 
obviously, numbers with a decimal point belong to a type called float, because these numbers
 are represented in a format called floating-point. 

>>. 
type(3.2. 
<typ. 
'float'. 


What about values like '17. 
and '3.2'? They look like numbers, but they are in quotation 
marks like strings. 

>>. 
type('17'. 
<typ. 
'str'. 
>>. 
type('3.2'. 
<typ. 
'str'. 


They�re strings. 

When you type a large integer, you might be tempted to use commas between groups of 
three digits, as in 1,000,000. This is not a legal integer in Python, but it is legal: 


Chapter 2. Variables, expressions and statements 

messagenpi17
�And now for something completely different�
3.1415926535897932
Figure 2.1: State diagram. 

>>. 
1,000,00. 


(1. 
0. 
0. 
Well, that�s not what we expected at all! Python interprets 1,000,00. 
as a comma-
separated sequence of integers. This is the first example we have seen of a semantic error: 
the code runs without producing an error message, but it doesn�t do the �right� thing. 


2.2 Variables 
One of the most powerful features of a programming language is the ability to manipulate 
variables. A variable is a name that refers to a value. 

An assignment statement creates new variables and gives them values: 

>>. 
messag. 
. 
'An. 
no. 
fo. 
somethin. 
completel. 
different. 
>>>n. 
1. 
>>. 
p. 
. 
3.141592653589793. 


This example makes three assignments. The first assigns a string to a new variable named message; the second gives the integer 1. 
to n; the third assigns the (approximate) value of 
. 
to pi. 

A common way to represent variables on paper is to write the name with an arrow pointing 
to the variable�s value. This kind of figure is called a state diagram because it shows what 
state each of the variables is in (think of it as the variable�s state of mind). Figure 2.1 shows 
the result of the previous example. 

The type of a variable is the type of the value it refers to. 

>>. 
type(message. 
<typ. 
'str'. 
>>. 
type(n. 
<typ. 
'int'. 
>>. 
type(pi. 
<typ. 
'float'. 


Exercise 2.1. If you type an integer with a leading zero, you might get a confusing error: 

>>. 
zipcod. 
. 
0249. 
. 
SyntaxError. 
invali. 
toke. 


Other numbers seem to work, but the results are bizarre: 

>>. 
zipcod. 
. 
0213. 
>>. 
zipcod. 
111. 


Can you figure out what is going on? Hint: display the values 01, 010, 010. 
and 01000. 


2.3. Variable names and keywords 
2.3 Variable names and keywords 
Programmers generally choose names for their variables that are meaningful�they document
 what the variable is used for. 

Variable names can be arbitrarily long. They can contain both letters and numbers, but 
they have to begin with a letter. It is legal to use uppercase letters, but it is a good idea to 
begin variable names with a lowercase letter (you�ll see why later). 

The underscore character, _, can appear in a name. It is often used in names with multiple 
words, such as my_nam. 
or airspeed_of_unladen_swallow. 

If you give a variable an illegal name, you get a syntax error: 

>>. 
76trombone. 
. 
'bi. 
parade. 
SyntaxError. 
invali. 
synta. 
>>. 
more. 
. 
100000. 
SyntaxError. 
invali. 
synta. 
>>. 
clas. 
. 
'Advance. 
Theoretica. 
Zymurgy. 
SyntaxError. 
invali. 
synta. 


76trombone. 
is illegal because it does not begin with a letter. more. 
is illegal because it 
contains an illegal character, @. But what�s wrong with class? 

It turns out that clas. 
is one of Python�s keywords. The interpreter uses keywords to 
recognize the structure of the program, and they cannot be used as variable names. 

Python 2 has 31 keywords: 

an. 
de. 
fro. 
no. 
whil. 
a. 
eli. 
globa. 
o. 
wit. 
asser. 
els. 
i. 
pas. 
yiel. 
brea. 
excep. 
impor. 
prin. 
clas. 
exe. 
i. 
rais. 
continu. 
finall. 
i. 
retur. 
de. 
fo. 
lambd. 
tr. 


In Python 3, exe. 
is no longer a keyword, but nonloca. 
is. 

You might want to keep this list handy. If the interpreter complains about one of your 
variable names and you don�t know why, see if it is on this list. 

2.4 Operators and operands 
Operators are special symbols that represent computations like addition and multiplication.
 The values the operator is applied to are called operands. 

The operators +, -, *, . 
and *. 
perform addition, subtraction, multiplication, division and 
exponentiation, as in the following examples: 

20+3. 
hour-. 
hour*60+minut. 
minute/6. 
5**. 
(5+9)*(15-7. 
In some other languages, . 
is used for exponentiation, but in Python it is a bitwise operator 
called XOR. I won�t cover bitwise operators in this book, but you can read about them at http://wiki.python.org/moin/BitwiseOperators. 

In Python 2, the division operator might not do what you expect: 


Chapter 2. Variables, expressions and statements 

>>. 
minut. 
. 
5. 


>>. 
minute/6. 


. 


The value of minut. 
is 59, and in conventional arithmetic 59 divided by 60 is 0.98333, not 0. 
The reason for the discrepancy is that Python is performing floor division. When both of 
the operands are integers, the result is also an integer; floor division chops off the fraction 
part, so in this example it rounds down to zero. 

In Python 3, the result of this division is a float. The new operator /. 
performs floor 
division. 

If either of the operands is a floating-point number, Python performs floating-point division,
 and the result is a float: 

>>. 
minute/60.. 


0.9833333333333332. 


2.5 Expressions and statements 
An expression is a combination of values, variables, and operators. A value all by itself 
is considered an expression, and so is a variable, so the following are all legal expressions 
(assuming that the variable . 
has been assigned a value): 

1. 


. 


. 
. 
1. 


A statement is a unit of code that the Python interpreter can execute. We have seen two 
kinds of statement: print and assignment. 

Technically an expression is also a statement, but it is probably simpler to think of them 
as different things. The important difference is that an expression has a value; a statement 
does not. 

2.6 Interactive mode and script mode 
One of the benefits of working with an interpreted language is that you can test bits of 
code in interactive mode before you put them in a script. But there are differences between 
interactive mode and script mode that can be confusing. 

For example, if you are using Python as a calculator, you might type 

>>. 
mile. 
. 
26.. 


>>. 
mile. 
. 
1.6. 


42.18. 


The first line assigns a value to miles, but it has no visible effect. The second line is an expression,
 so the interpreter evaluates it and displays the result. So we learn that a marathon 
is about 42 kilometers. 

But if you type the same code into a script and run it, you get no output at all. In script 
mode an expression, all by itself, has no visible effect. Python actually evaluates the expression,
 but it doesn�t display the value unless you tell it to: 


2.7. Order of operations 
mile. 
. 
26.. 


prin. 
mile. 
. 
1.6. 


This behavior can be confusing at first. 

A script usually contains a sequence of statements. If there is more than one statement, the 
results appear one at a time as the statements execute. 

For example, the script 

prin. 
. 


. 
=. 


prin. 
. 


produces the output 

. 


. 


The assignment statement produces no output. 

Exercise 2.2. Type the following statements in the Python interpreter to see what they do: 

. 


. 
=. 


. 
+. 


Now put the same statements into a script and run it. What is the output? Modify the script by 
transforming each expression into a print statement and then run it again. 

2.7 Order of operations 
When more than one operator appears in an expression, the order of evaluation depends 
on the rules of precedence. For mathematical operators, Python follows mathematical 
convention. The acronym PEMDAS is a useful way to remember the rules: 

� 
Parentheses have the highest precedence and can be used to force an expression to 
evaluate in the order you want. Since expressions in parentheses are evaluated first, 
. 
. 
(3-1. 
is 4, and (1+1)**(5-2. 
is 8. You can also use parentheses to make an 
expression easier to read, as in (minut. 
. 
100. 
. 
60, even if it doesn�t change the 
result. 
� 
Exponentiation has the next highest precedence, so 2**1+. 
is 3, not 4, and 3*1**. 
is 
3, not 27. 
� 
Multiplication and Division have the same precedence, which is higher than 
Addition and Subtraction, which also have the same precedence. So 2*3-. 
is 5, not 
4, and 6+4/. 
is 8, not 5. 
� Operators with the same precedence are evaluated from left to right (except exponentiation).
 So in the expression degree. 
. 
. 
. 
pi, the division happens first and the 
result is multiplied by pi. To divide by 2p, you can use parentheses or write degree. 
. 
. 
. 
pi. 
I don�t work very hard to remember rules of precedence for other operators. If I can�t tell 
by looking at the expression, I use parentheses to make it obvious. 


Chapter 2. Variables, expressions and statements 

2.8 String operations 
In general, you can�t perform mathematical operations on strings, even if the strings look 
like numbers, so the following are illegal: 

'2'-'1''eggs'/'easy''third'*'. 
charm. 


The . 
operator works with strings, but it might not do what you expect: it performs concatenation,
 which means joining the strings by linking them end-to-end. For example: 

firs. 
. 
'throat. 


secon. 
. 
'warbler. 


prin. 
firs. 
. 
secon. 


The output of this program is throatwarbler. 

The . 
operator also works on strings; it performs repetition. For example, 'Spam'*. 
is 'SpamSpamSpam'. If one of the operands is a string, the other has to be an integer. 

This use of . 
and . 
makes sense by analogy with addition and multiplication. Just as 4*. 
is equivalent to 4+4+4, we expect 'Spam'*. 
to be the same as 'Spam'+'Spam'+'Spam', and 
it is. On the other hand, there is a significant way in which string concatenation and repetition
 are different from integer addition and multiplication. Can you think of a property 
that addition has that string concatenation does not? 

2.9 Comments 
As programs get bigger and more complicated, they get more difficult to read. Formal 
languages are dense, and it is often difficult to look at a piece of code and figure out what 
it is doing, or why. 

For this reason, it is a good idea to add notes to your programs to explain in natural language
 what the program is doing. These notes are called comments, and they start with 
the . 
symbol: 

. 
comput. 
th. 
percentag. 
o. 
th. 
hou. 
tha. 
ha. 
elapse. 


percentag. 
. 
(minut. 
. 
100. 
. 
6. 


In this case, the comment appears on a line by itself. You can also put comments at the end 
of a line: 

percentag. 
. 
(minut. 
. 
100. 
. 
6. 
. 
percentag. 
o. 
a. 
hou. 


Everything from the . 
to the end of the line is ignored�it has no effect on the program. 

Comments are most useful when they document non-obvious features of the code. It is 
reasonable to assume that the reader can figure out what the code does; it is much more 
useful to explain why. 

This comment is redundant with the code and useless: 

v=. 
#assign5to. 


This comment contains useful information that is not in the code: 

. 
. 
. 
. 
velocit. 
i. 
meters/second. 


Good variable names can reduce the need for comments, but long names can make complex
 expressions hard to read, so there is a tradeoff. 


2.10. Debugging 
2.10 Debugging 
At this point the syntax error you are most likely to make is an illegal variable name, like clas. 
and yield, which are keywords, or odd~jo. 
and US$, which contain illegal characters.
 

If you put a space in a variable name, Python thinks it is two operands without an operator: 

>>. 
ba. 
nam. 
. 
. 


SyntaxError. 
invali. 
synta. 


For syntax errors, the error messages don�t help much. The most common messages are SyntaxError. 
invali. 
synta. 
and SyntaxError. 
invali. 
token, neither of which is 
very informative. 

The runtime error you are most likely to make is a �use before def;� that is, trying to use 
a variable before you have assigned a value. This can happen if you spell a variable name 
wrong: 

>>. 
principa. 
. 
327.6. 


>>. 
interes. 
. 
principl. 
. 
rat. 


NameError. 
nam. 
'principle. 
i. 
no. 
define. 


Variables names are case sensitive, so LaTe. 
is not the same as latex. 

At this point the most likely cause of a semantic error is the order of operations. For example,
 to evaluate 1 , you might be tempted to write 

2. 


>>>1.. 
. 
2.. 
*p. 


But the division happens first, so you would get p/2, which is not the same thing! There is 
no way for Python to know what you meant to write, so in this case you don�t get an error 
message; you just get the wrong answer. 

2.11 Glossary 
value: One of the basic units of data, like a number or string, that a program manipulates. 

type: A category of values. The types we have seen so far are integers (type int), floating-
point numbers (type float), and strings (type str). 
integer: A type that represents whole numbers. 
floating-point: A type that represents numbers with fractional parts. 
string: A type that represents sequences of characters. 
variable: A name that refers to a value. 
statement: A section of code that represents a command or action. So far, the statements 
we have seen are assignments and print statements. 
assignment: A statement that assigns a value to a variable. 
state diagram: A graphical representation of a set of variables and the values they refer to. 


Chapter 2. Variables, expressions and statements 

keyword: A reserved word that is used by the compiler to parse a program; you cannot 
use keywords like if, def, and whil. 
as variable names. 

operator: A special symbol that represents a simple computation like addition, multiplication,
 or string concatenation. 

operand: One of the values on which an operator operates. 

floor division: The operation that divides two numbers and chops off the fraction part. 

expression: A combination of variables, operators, and values that represents a single result
 value. 

evaluate: To simplify an expression by performing the operations in order to yield a single 
value. 

rules of precedence: The set of rules governing the order in which expressions involving 
multiple operators and operands are evaluated. 

concatenate: To join two operands end-to-end. 

comment: Information in a program that is meant for other programmers (or anyone reading
 the source code) and has no effect on the execution of the program. 

2.12 Exercises 
Exercise 2.3. Assume that we execute the following assignment statements: 

widt. 
. 
1. 


heigh. 
. 
12.. 


delimite. 
. 
'.. 


For each of the following expressions, write the value of the expression and the type (of the value of 
the expression). 

1. width/. 
2. width/2.. 
3. height/. 
4. 1+2*. 
5. delimite. 
. 
. 
Use the Python interpreter to check your answers. 
Exercise 2.4. Practice using the Python interpreter as a calculator: 


1. The volume of a sphere with radius r is 43 pr3. What is the volume of a sphere with radius 5? 
Hint: 392.7 is wrong! 
2. Suppose the cover price of a book is $24.95, but bookstores get a 40% discount. Shipping costs 
$3 for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 
60 copies? 
3. If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at 
tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast? 

Chapter 3 

Functions 

3.1 Function calls 
In the context of programming, a function is a named sequence of statements that performs 
a computation. When you define a function, you specify the name and the sequence of 
statements. Later, you can �call� the function by name. We have already seen one example 
of a function call: 

>>. 
type(32. 
<typ. 
'int'. 


The name of the function is type. The expression in parentheses is called the argument of 
the function. The result, for this function, is the type of the argument. 

It is common to say that a function �takes� an argument and �returns� a result. The result 
is called the return value. 

3.2 Type conversion functions 
Python provides built-in functions that convert values from one type to another. The in. 
function takes any value and converts it to an integer, if it can, or complains otherwise: 

>>. 
int('32'. 
3. 
>>. 
int('Hello'. 
ValueError. 
invali. 
litera. 
fo. 
int(). 
Hell. 


in. 
can convert floating-point values to integers, but it doesn�t round off; it chops off the 
fraction part: 
>>. 
int(3.99999. 
. 
>>. 
int(-2.3. 
-. 


floa. 
converts integers and strings to floating-point numbers: 


Chapter 3. Functions 

>>. 
float(32. 
32.. 
>>. 
float('3.14159'. 
3.1415. 


Finally, st. 
converts its argument to a string: >>. 
str(32. 


'32. 


>>. 
str(3.14159. 
'3.14159. 


3.3 Math functions 
Python has a math module that provides most of the familiar mathematical functions. A 
module is a file that contains a collection of related functions. 

Before we can use the module, we have to import it: 

>>. 
impor. 
mat. 


This statement creates a module object named math. If you print the module object, you 
get some information about it: 

>>. 
prin. 
mat. 
<modul. 
'math. 
(built-in). 


The module object contains the functions and variables defined in the module. To access 
one of the functions, you have to specify the name of the module and the name of the 
function, separated by a dot (also known as a period). This format is called dot notation. 

>>. 
rati. 
. 
signal_powe. 
. 
noise_powe. 
>>. 
decibel. 
. 
1. 
. 
math.log10(ratio. 


>>. 
radian. 
. 
0.. 


>>. 
heigh. 
. 
math.sin(radians. 
The first example uses log1. 
to compute a signal-to-noise ratio in decibels (assuming that signal_powe. 
and noise_powe. 
are defined). The math module also provides log, which 
computes logarithms base e. 

The second example finds the sine of radians. The name of the variable is a hint that si. 
and the other trigonometric functions (cos, tan, etc.) take arguments in radians. To convert 
from degrees to radians, divide by 360 and multiply by 2p: 

>>. 
degree. 
. 
4. 
>>. 
radian. 
. 
degree. 
. 
360.. 
. 
. 
. 
math.p. 
>>. 
math.sin(radians. 
0.70710678118. 


The expression math.p. 
gets the variable p. 
from the math module. The value of this 
variable is an approximation of p, accurate to about 15 digits. 

If you know your trigonometry, you can check the previous result by comparing it to the 
square root of two divided by two: 

>>. 
math.sqrt(2. 
. 
2.. 
0.70710678118. 



3.4. Composition 
3.4 Composition 
So far, we have looked at the elements of a program�variables, expressions, and 
statements�in isolation, without talking about how to combine them. 

One of the most useful features of programming languages is their ability to take small 
building blocks and compose them. For example, the argument of a function can be any 
kind of expression, including arithmetic operators: 

. 
. 
math.sin(degree. 
. 
360.. 
. 
. 
. 
math.pi. 


And even function calls: 

. 
. 
math.exp(math.log(x+1). 


Almost anywhere you can put a value, you can put an arbitrary expression, with one exception:
 the left side of an assignment statement has to be a variable name. Any other 
expression on the left side is a syntax error (we will see exceptions to this rule later). 

>>. 
minute. 
. 
hour. 
. 
6. 
. 
righ. 


>>. 
hour. 
. 
6. 
. 
minute. 
. 
wrong. 


SyntaxError. 
can'. 
assig. 
t. 
operato. 


3.5 Adding new functions 
So far, we have only been using the functions that come with Python, but it is also possible 
to add new functions. A function definition specifies the name of a new function and the 
sequence of statements that execute when the function is called. 

Here is an example: 

de. 
print_lyrics(). 


prin. 
"I'. 
. 
lumberjack. 
an. 
I'. 
okay.. 


prin. 
". 
slee. 
al. 
nigh. 
an. 
. 
wor. 
al. 
day.. 


de. 
is a keyword that indicates that this is a function definition. The name of the function 
is print_lyrics. The rules for function names are the same as for variable names: letters, 
numbers and some punctuation marks are legal, but the first character can�t be a number. 
You can�t use a keyword as the name of a function, and you should avoid having a variable 
and a function with the same name. 
The empty parentheses after the name indicate that this function doesn�t take any arguments.
 

The first line of the function definition is called the header; the rest is called the body. 
The header has to end with a colon and the body has to be indented. By convention, the 
indentation is always four spaces (see Section 3.14). The body can contain any number of 
statements. 

The strings in the print statements are enclosed in double quotes. Single quotes and double 
quotes do the same thing; most people use single quotes except in cases like this where a 
single quote (which is also an apostrophe) appears in the string. 

If you type a function definition in interactive mode, the interpreter prints ellipses (...) to 
let you know that the definition isn�t complete: 


Chapter 3. Functions 

>>. 
de. 
print_lyrics(). 
... 
prin. 
"I'. 
. 
lumberjack. 
an. 
I'. 
okay.. 
... 
prin. 
". 
slee. 
al. 
nigh. 
an. 
. 
wor. 
al. 
day.. 
... 


To end the function, you have to enter an empty line (this is not necessary in a script). 
Defining a function creates a variable with the same name. 

>>. 
prin. 
print_lyric. 
<functio. 
print_lyric. 
a. 
0xb7e99e9c. 
>>. 
type(print_lyrics. 
<typ. 
'function'. 


The value of print_lyric. 
is a function object, which has type 'function'. 

The syntax for calling the new function is the same as for built-in functions: 

>>. 
print_lyrics(. 
I'. 
. 
lumberjack. 
an. 
I'. 
okay. 
. 
slee. 
al. 
nigh. 
an. 
. 
wor. 
al. 
day. 


Once you have defined a function, you can use it inside another function. For example, to 
repeat the previous refrain, we could write a function called repeat_lyrics: 

de. 
repeat_lyrics(). 
print_lyrics(. 
print_lyrics(. 


And then call repeat_lyrics: >>. 
repeat_lyrics(. 
I'. 
. 
lumberjack. 
an. 
I'. 
okay. 
. 
slee. 
al. 
nigh. 
an. 
. 
wor. 
al. 
day. 
I'. 
. 
lumberjack. 
an. 
I'. 
okay. 
. 
slee. 
al. 
nigh. 
an. 
. 
wor. 
al. 
day. 


But that�s not really how the song goes. 

3.6 Definitions and uses 
Pulling together the code fragments from the previous section, the whole program looks 
like this: 

de. 
print_lyrics(). 
prin. 
"I'. 
. 
lumberjack. 
an. 
I'. 
okay.. 
prin. 
". 
slee. 
al. 
nigh. 
an. 
. 
wor. 
al. 
day.. 


de. 
repeat_lyrics(). 
print_lyrics(. 
print_lyrics(. 


repeat_lyrics(. 
This program contains two function definitions: print_lyric. 
and repeat_lyrics. Function
 definitions get executed just like other statements, but the effect is to create function 
objects. The statements inside the function do not get executed until the function is called, 
and the function definition generates no output. 


3.7. Flow of execution 
As you might expect, you have to create a function before you can execute it. In other 
words, the function definition has to be executed before the first time it is called. 

Exercise 3.1. Move the last line of this program to the top, so the function call appears before the 
definitions. Run the program and see what error message you get. 
Exercise 3.2. Move the function call back to the bottom and move the definition of print_lyric. 
after the definition of repeat_lyrics. What happens when you run this program? 


3.7 Flow of execution 
In order to ensure that a function is defined before its first use, you have to know the order 
in which statements are executed, which is called the flow of execution. 

Execution always begins at the first statement of the program. Statements are executed one 
at a time, in order from top to bottom. 

Function definitions do not alter the flow of execution of the program, but remember that 
statements inside the function are not executed until the function is called. 

A function call is like a detour in the flow of execution. Instead of going to the next statement,
 the flow jumps to the body of the function, executes all the statements there, and 
then comes back to pick up where it left off. 

That sounds simple enough, until you remember that one function can call another. While 
in the middle of one function, the program might have to execute the statements in another 
function. But while executing that new function, the program might have to execute yet 
another function! 

Fortunately, Python is good at keeping track of where it is, so each time a function completes,
 the program picks up where it left off in the function that called it. When it gets to 
the end of the program, it terminates. 

What�s the moral of this sordid tale? When you read a program, you don�t always want 
to read from top to bottom. Sometimes it makes more sense if you follow the flow of 
execution. 

3.8 Parameters and arguments 
Some of the built-in functions we have seen require arguments. For example, when you 
call math.si. 
you pass a number as an argument. Some functions take more than one 
argument: math.po. 
takes two, the base and the exponent. 

Inside the function, the arguments are assigned to variables called parameters. Here is an 
example of a user-defined function that takes an argument: 

de. 
print_twice(bruce). 


prin. 
bruc. 


prin. 
bruc. 


This function assigns the argument to a parameter named bruce. When the function is 
called, it prints the value of the parameter (whatever it is) twice. 

This function works with any value that can be printed. 


Chapter 3. Functions 

>>. 
print_twice('Spam'. 
Spa. 
Spa. 
>>. 
print_twice(17. 
1. 
1. 
>>. 
print_twice(math.pi. 
3.1415926535. 
3.1415926535. 


The same rules of composition that apply to built-in functions also apply to user-defined 

functions, so we can use any kind of expression as an argument for print_twice: >>. 
print_twice('Spa. 
'*4. 
Spa. 
Spa. 
Spa. 
Spa. 
Spa. 
Spa. 
Spa. 
Spa. 
>>. 
print_twice(math.cos(math.pi). 
-1.. 
-1.. 


The argument is evaluated before the function is called, so in the examples the expressions 'Spa. 
'*. 
and math.cos(math.pi. 
are only evaluated once. 

You can also use a variable as an argument: 

>>. 
michae. 
. 
'Eric. 
th. 
hal. 
. 
bee.. 
>>. 
print_twice(michael. 
Eric. 
th. 
hal. 
. 
bee. 
Eric. 
th. 
hal. 
. 
bee. 


The name of the variable we pass as an argument (michael) has nothing to do with the 
name of the parameter (bruce). It doesn�t matter what the value was called back home (in 
the caller); here in print_twice, we call everybody bruce. 

3.9 Variables and parameters are local 
When you create a variable inside a function, it is local, which means that it only exists 
inside the function. For example: 

de. 
cat_twice(part1. 
part2). 
ca. 
. 
part. 
. 
part. 
print_twice(cat. 


This function takes two arguments, concatenates them, and prints the result twice. Here is 
an example that uses it: 

>>. 
line. 
. 
'Bin. 
tiddl. 
. 
>>. 
line. 
. 
'tiddl. 
bang.. 
>>. 
cat_twice(line1. 
line2. 
Bin. 
tiddl. 
tiddl. 
bang. 
Bin. 
tiddl. 
tiddl. 
bang. 


When cat_twic. 
terminates, the variable ca. 
is destroyed. If we try to print it, we get an 
exception: 

>>. 
prin. 
ca. 
NameError. 
nam. 
'cat. 
i. 
no. 
define. 



3.10. Stack diagrams 
line1line2�tiddle bang.�
part1part2catbruce
�Bing tiddle �
�Bing tiddle �
�tiddle bang.�
�Bing tiddle tiddle bang.�
�Bing tiddle tiddle bang.�
<module>cat_twiceprint_twice
Figure 3.1: Stack diagram. 

Parameters are also local. For example, outside print_twice, there is no such thing as bruce. 

3.10 Stack diagrams 
To keep track of which variables can be used where, it is sometimes useful to draw a stack 
diagram. Like state diagrams, stack diagrams show the value of each variable, but they 
also show the function each variable belongs to. 

Each function is represented by a frame. A frame is a box with the name of a function 
beside it and the parameters and variables of the function inside it. The stack diagram for 
the previous example is shown in Figure 3.1. 

The frames are arranged in a stack that indicates which function called which, and so 
on. In this example, print_twic. 
was called by cat_twice, and cat_twic. 
was called 
by __main__, which is a special name for the topmost frame. When you create a variable 
outside of any function, it belongs to __main__. 

Each parameter refers to the same value as its corresponding argument. So, part. 
has the 
same value as line1, part. 
has the same value as line2, and bruc. 
has the same value as cat. 

If an error occurs during a function call, Python prints the name of the function, and the 
name of the function that called it, and the name of the function that called that, all the way 
back to __main__. 

For example, if you try to access ca. 
from within print_twice, you get a NameError: 

Tracebac. 
(innermos. 
last). 


Fil. 
"test.py". 
lin. 
13. 
i. 
__main_. 


cat_twice(line1. 
line2. 


Fil. 
"test.py". 
lin. 
5. 
i. 
cat_twic. 


print_twice(cat. 


Fil. 
"test.py". 
lin. 
9. 
i. 
print_twic. 


prin. 
ca. 


NameError. 
nam. 
'cat. 
i. 
no. 
define. 


This list of functions is called a traceback. It tells you what program file the error occurred 
in, and what line, and what functions were executing at the time. It also shows the line of 
code that caused the error. 


Chapter 3. Functions 

The order of the functions in the traceback is the same as the order of the frames in the 
stack diagram. The function that is currently running is at the bottom. 

3.11 Fruitful functions and void functions 
Some of the functions we are using, such as the math functions, yield results; for lack of a 
better name, I call them fruitful functions. Other functions, like print_twice, perform an 
action but don�t return a value. They are called void functions. 

When you call a fruitful function, you almost always want to do something with the result; 
for example, you might assign it to a variable or use it as part of an expression: 

. 
. 
math.cos(radians. 


golde. 
. 
(math.sqrt(5. 
. 
1. 
. 
. 


When you call a function in interactive mode, Python displays the result: 

>>. 
math.sqrt(5. 


2.236067977499789. 


But in a script, if you call a fruitful function all by itself, the return value is lost forever! 

math.sqrt(5. 


This script computes the square root of 5, but since it doesn�t store or display the result, it 
is not very useful. 

Void functions might display something on the screen or have some other effect, but they 
don�t have a return value. If you try to assign the result to a variable, you get a special 
value called None. 

>>. 
resul. 
. 
print_twice('Bing'. 


Bin. 


Bin. 


>>. 
prin. 
resul. 


Non. 


The value Non. 
is not the same as the string 'None'. It is a special value that has its own 
type: 

>>. 
prin. 
type(None. 


<typ. 
'NoneType'. 


The functions we have written so far are all void. We will start writing fruitful functions in 
a few chapters. 

3.12 Why functions? 
It may not be clear why it is worth the trouble to divide a program into functions. There 
are several reasons: 

� Creating a new function gives you an opportunity to name a group of statements, 
which makes your program easier to read and debug. 
� Functions can make a program smaller by eliminating repetitive code. Later, if you 
make a change, you only have to make it in one place. 

3.13. Importing with fro. 
� Dividing a long program into functions allows you to debug the parts one at a time 
and then assemble them into a working whole. 
� Well-designed functions are often useful for many programs. Once you write and 
debug one, you can reuse it. 
3.13 Importing with fro. 
Python provides two ways to import modules; we have already seen one: 

>>. 
impor. 
mat. 
>>. 
prin. 
mat. 
<modul. 
'math. 
(built-in). 
>>. 
prin. 
math.p. 
3.1415926535. 


If you import math, you get a module object named math. The module object contains 
constants like p. 
and functions like si. 
and exp. 

But if you try to access p. 
directly, you get an error. >>. 
prin. 
p. 
Tracebac. 
(mos. 
recen. 
cal. 
last). 


Fil. 
"<stdin>". 
lin. 
1. 
i. 
<module. 
NameError. 
nam. 
'pi. 
i. 
no. 
define. 


As an alternative, you can import an object from a module like this: 

>>. 
fro. 
mat. 
impor. 
p. 
Now you can access p. 
directly, without dot notation. >>. 
prin. 
p. 


3.1415926535. 


Or you can use the star operator to import everything from the module: 

>>. 
fro. 
mat. 
impor. 
. 
>>. 
cos(pi. 
-1.. 


The advantage of importing everything from the math module is that your code can be 
more concise. The disadvantage is that there might be conflicts between names defined in 
different modules, or between a name from a module and one of your variables. 

3.14 Debugging 
If you are using a text editor to write your scripts, you might run into problems with spaces 
and tabs. The best way to avoid these problems is to use spaces exclusively (no tabs). Most 
text editors that know about Python do this by default, but some don�t. 

Tabs and spaces are usually invisible, which makes them hard to debug, so try to find an 
editor that manages indentation for you. 

Also, don�t forget to save your program before you run it. Some development environments
 do this automatically, but some don�t. In that case the program you are looking at in 
the text editor is not the same as the program you are running. 


Chapter 3. Functions 

Debugging can take a long time if you keep running the same, incorrect, program over and 
over! 

Make sure that the code you are looking at is the code you are running. If you�re not sure, 
put something like prin. 
'hello. 
at the beginning of the program and run it again. If you 
don�t see hello, you�re not running the right program! 

3.15 Glossary 
function: A named sequence of statements that performs some useful operation. Functions
 may or may not take arguments and may or may not produce a result. 

function definition: A statement that creates a new function, specifying its name, parameters,
 and the statements it executes. 

function object: A value created by a function definition. The name of the function is a 
variable that refers to a function object. 

header: The first line of a function definition. 

body: The sequence of statements inside a function definition. 

parameter: A name used inside a function to refer to the value passed as an argument. 

function call: A statement that executes a function. It consists of the function name followed
 by an argument list. 

argument: A value provided to a function when the function is called. This value is assigned
 to the corresponding parameter in the function. 

local variable: A variable defined inside a function. A local variable can only be used 
inside its function. 

return value: The result of a function. If a function call is used as an expression, the return 
value is the value of the expression. 

fruitful function: A function that returns a value. 

void function: A function that doesn�t return a value. 

module: A file that contains a collection of related functions and other definitions. 

import statement: A statement that reads a module file and creates a module object. 

module object: A value created by an impor. 
statement that provides access to the values 
defined in a module. 

dot notation: The syntax for calling a function in another module by specifying the module
 name followed by a dot (period) and the function name. 

composition: Using an expression as part of a larger expression, or a statement as part of 
a larger statement. 

flow of execution: The order in which statements are executed during a program run. 


3.16. Exercises 
stack diagram: A graphical representation of a stack of functions, their variables, and the 
values they refer to. 

frame: A box in a stack diagram that represents a function call. It contains the local variables
 and parameters of the function. 

traceback: A list of the functions that are executing, printed when an exception occurs. 

3.16 Exercises 
Exercise 3.3. Python provides a built-in function called le. 
that returns the length of a string, so 
the value of len('allen'. 
is 5. 

Write a function named right_justif. 
that takes a string named . 
as a parameter and prints the 
string with enough leading spaces so that the last letter of the string is in column 70 of the display. 

>>. 
right_justify('allen'. 


alle. 
Exercise 3.4. A function object is a value you can assign to a variable or pass as an argument. For 
example, do_twic. 
is a function that takes a function object as an argument and calls it twice: 

de. 
do_twice(f). 


f(. 


f(. 


Here�s an example that uses do_twic. 
to call a function named print_spa. 
twice. 

de. 
print_spam(). 


prin. 
'spam. 


do_twice(print_spam. 


1. Type this example into a script and test it. 
2. Modify do_twic. 
so that it takes two arguments, a function object and a value, and calls the 
function twice, passing the value as an argument. 
3. Write a more general version of print_spam, called print_twice, that takes a string as a 
parameter and prints it twice. 
4. Use the modified version of do_twic. 
to call print_twic. 
twice, passing 'spam. 
as an 
argument. 
5. Define a new function called do_fou. 
that takes a function object and a value and calls the 
function four times, passing the value as a parameter. There should be only two statements in 
the body of this function, not four. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
do. 
four. 
p. 
. 
Exercise 3.5. This exercise can be done using only the statements and other features we have learned 
so far. 


1. Write a function that draws a grid like the following: 

Chapter 3. Functions 

+----+----. 
||. 
||. 
||. 
||. 
+----+----. 
||. 
||. 
||. 
||. 
+----+----. 


Hint: to print more than one value on a line, you can print a comma-separated sequence: 

prin. 
'+'. 
'-. 


If the sequence ends with a comma, Python leaves the line unfinished, so the value printed 
next appears on the same line. 

prin. 
'+'. 
prin. 
'-. 


The output of these statements is '+-'. 

A prin. 
statement all by itself ends the current line and goes to the next line. 

2. Write a function that draws a similar grid with four rows and four columns. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
grid. 
p. 
. Credit: This exercise is based on an 
exercise in Oualline, Practical C Programming, Third Edition, O�Reilly Media, 1997. 


Chapter 4 
Case study: interface design 

Code examples from this chapter are available from http://thinkpython.com/code. 
polygon.py. 

4.1 TurtleWorld 
To accompany this book, I have written a package called Swampy. You can download 
Swampy from http://thinkpython.com/swampy; follow the instructions there to install 
Swampy on your system. 

A package is a collection of modules; one of the modules in Swampy is TurtleWorld, 
which provides a set of functions for drawing lines by steering turtles around the screen. 

If Swampy is installed as a package on your system, you can import TurtleWorl. 
like this: 

fro. 
swampy.TurtleWorl. 
impor. 
. 


If you downloaded the Swampy modules but did not install them as a package, you can either
 work in the directory that contains the Swampy files, or add that directory to Python�s 
search path. Then you can import TurtleWorl. 
like this: 

fro. 
TurtleWorl. 
impor. 
. 


The details of the installation process and setting Python�s search path depend on your 
system, so rather than include those details here, I will try to maintain current information 
for several systems at http://thinkpython.com/swamp. 


Create a file named mypolygon.p. 
and type in the following code: 

fro. 
swampy.TurtleWorl. 
impor. 
. 


worl. 
. 
TurtleWorld(. 


bo. 
. 
Turtle(. 


prin. 
bo. 


wait_for_user(. 



Chapter 4. Case study: interface design 

The first line imports everything from the TurtleWorl. 
module in the swamp. 
package. 

The next lines create a TurtleWorld assigned to worl. 
and a Turtle assigned to bob. Printing 

bo. 
yields something like: 
<TurtleWorld.Turtl. 
instanc. 
a. 
0xb7bfbf4c. 


This means that bo. 
refers to an instance of a Turtle as defined in module TurtleWorld. 
In this context, �instance� means a member of a set; this Turtle is one of the set of possible 
Turtles. 

wait_for_use. 
tells TurtleWorld to wait for the user to do something, although in this case 
there�s not much for the user to do except close the window. 

TurtleWorld provides several turtle-steering functions: f. 
and b. 
for forward and backward,
 and l. 
and r. 
for left and right turns. Also, each Turtle is holding a pen, which is 
either down or up; if the pen is down, the Turtle leaves a trail when it moves. The functions p. 
and p. 
stand for �pen up� and �pen down.� 

To draw a right angle, add these lines to the program (after creating bo. 
and before calling wait_for_user): 

fd(bob. 
100. 


lt(bob. 


fd(bob. 
100. 


The first line tells bo. 
to take 100 steps forward. The second line tells him to turn left. 

When you run this program, you should see bo. 
move east and then north, leaving two 
line segments behind. 

Now modify the program to draw a square. Don�t go on until you�ve got it working! 

4.2 Simple repetition 
Chances are you wrote something like this (leaving out the code that creates TurtleWorld 
and waits for the user): 

fd(bob. 
100. 


lt(bob. 


fd(bob. 
100. 


lt(bob. 


fd(bob. 
100. 


lt(bob. 


fd(bob. 
100. 


We can do the same thing more concisely with a fo. 
statement. Add this example to mypolygon.p. 
and run it again: 

fo. 
. 
i. 
range(4). 


prin. 
'Hello!. 


You should see something like this: 


4.3. Exercises 
Hello. 


Hello. 


Hello. 


Hello. 


This is the simplest use of the fo. 
statement; we will see more later. But that should be 
enough to let you rewrite your square-drawing program. Don�t go on until you do. 

Here is a fo. 
statement that draws a square: 

fo. 
. 
i. 
range(4). 


fd(bob. 
100. 


lt(bob. 


The syntax of a fo. 
statement is similar to a function definition. It has a header that ends 
with a colon and an indented body. The body can contain any number of statements. 

A fo. 
statement is sometimes called a loop because the flow of execution runs through the 
body and then loops back to the top. In this case, it runs the body four times. 

This version is actually a little different from the previous square-drawing code because it 
makes another turn after drawing the last side of the square. The extra turn takes a little 
more time, but it simplifies the code if we do the same thing every time through the loop. 
This version also has the effect of leaving the turtle back in the starting position, facing in 
the starting direction. 

4.3 Exercises 
The following is a series of exercises using TurtleWorld. They are meant to be fun, but they 
have a point, too. While you are working on them, think about what the point is. 

The following sections have solutions to the exercises, so don�t look until you have finished 
(or at least tried). 

1. Write a function called squar. 
that takes a parameter named t, which is a turtle. It 
should use the turtle to draw a square. 
Write a function call that passes bo. 
as an argument to square, and then run the 
program again. 

2. Add another parameter, named length, to square. Modify the body so length of the 
sides is length, and then modify the function call to provide a second argument. Run 
the program again. Test your program with a range of values for length. 
3. The functions l. 
and r. 
make 90-degree turns by default, but you can provide a 
second argument that specifies the number of degrees. For example, lt(bob. 
45. 
turns bo. 
45 degrees to the left. 
Make a copy of squar. 
and change the name to polygon. Add another parameter 
named . 
and modify the body so it draws an n-sided regular polygon. Hint: The 
exterior angles of an n-sided regular polygon are 360/n degrees. 

4. Write a function called circl. 
that takes a turtle, t, and radius, r, as parameters and 
that draws an approximate circle by invoking polygo. 
with an appropriate length 
and number of sides. Test your function with a range of values of r. 

Chapter 4. Case study: interface design 

Hint: figure out the circumference of the circle and make sure that lengt. 
. 
. 
. 
circumference. 

Another hint: if bo. 
is too slow for you, you can speed him up by changing bob.delay, which is the time between moves, in seconds. bob.dela. 
. 
0.0. 
ought 
to get him moving. 

5. Make a more general version of circl. 
called ar. 
that takes an additional parameter angle, which determines what fraction of a circle to draw. angl. 
is in units of degrees, 
so when angle=360, ar. 
should draw a complete circle. 
4.4 Encapsulation 
The first exercise asks you to put your square-drawing code into a function definition and 
then call the function, passing the turtle as a parameter. Here is a solution: 

de. 
square(t). 


fo. 
. 
i. 
range(4). 


fd(t. 
100. 


lt(t. 


square(bob. 


The innermost statements, f. 
and l. 
are indented twice to show that they are inside the fo. 
loop, which is inside the function definition. The next line, square(bob), is flush with 
the left margin, so that is the end of both the fo. 
loop and the function definition. 

Inside the function, . 
refers to the same turtle bo. 
refers to, so lt(t. 
has the same effect as lt(bob). So why not call the parameter bob? The idea is that . 
can be any turtle, not just bob, so you could create a second turtle and pass it as an argument to square: 

ra. 
. 
Turtle(. 


square(ray. 


Wrapping a piece of code up in a function is called encapsulation. One of the benefits of 
encapsulation is that it attaches a name to the code, which serves as a kind of documentation.
 Another advantage is that if you re-use the code, it is more concise to call a function 
twice than to copy and paste the body! 

4.5 Generalization 
The next step is to add a lengt. 
parameter to square. Here is a solution: 

de. 
square(t. 
length). 


fo. 
. 
i. 
range(4). 


fd(t. 
length. 


lt(t. 


square(bob. 
100. 


Adding a parameter to a function is called generalization because it makes the function 
more general: in the previous version, the square is always the same size; in this version it 
can be any size. 


4.6. Interface design 
The next step is also a generalization. Instead of drawing squares, polygo. 
draws regular 
polygons with any number of sides. Here is a solution: 

de. 
polygon(t. 
n. 
length). 


angl. 
. 
360.. 
. 
. 


fo. 
. 
i. 
range(n). 


fd(t. 
length. 


lt(t. 
angle. 


polygon(bob. 
7. 
70. 


This draws a 7-sided polygon with side length 70. If you have more than a few numeric 
arguments, it is easy to forget what they are, or what order they should be in. It is legal, 
and sometimes helpful, to include the names of the parameters in the argument list: 

polygon(bob. 
n=7. 
length=70. 


These are called keyword arguments because they include the parameter names as �keywords�
 (not to be confused with Python keywords like whil. 
and def). 

This syntax makes the program more readable. It is also a reminder about how arguments 
and parameters work: when you call a function, the arguments are assigned to the parameters.
 

4.6 Interface design 
The next step is to write circle, which takes a radius, r, as a parameter. Here is a simple 
solution that uses polygo. 
to draw a 50-sided polygon: 

de. 
circle(t. 
r). 


circumferenc. 
. 
. 
. 
math.p. 
. 
. 


n. 
5. 


lengt. 
. 
circumferenc. 
. 
. 


polygon(t. 
n. 
length. 


The first line computes the circumference of a circle with radius . 
using the formula 2pr. 
Since we use math.pi, we have to import math. By convention, impor. 
statements are 
usually at the beginning of the script. 

. 
is the number of line segments in our approximation of a circle, so lengt. 
is the length 
of each segment. Thus, polygo. 
draws a 50-sides polygon that approximates a circle with 
radius r. 

One limitation of this solution is that . 
is a constant, which means that for very big circles, 
the line segments are too long, and for small circles, we waste time drawing very small 
segments. One solution would be to generalize the function by taking . 
as a parameter. 
This would give the user (whoever calls circle) more control, but the interface would be 
less clean. 

The interface of a function is a summary of how it is used: what are the parameters? What 
does the function do? And what is the return value? An interface is �clean� if it is �as 
simple as possible, but not simpler. (Einstein)� 

In this example, . 
belongs in the interface because it specifies the circle to be drawn. . 
is 
less appropriate because it pertains to the details of how the circle should be rendered. 


Chapter 4. Case study: interface design 

Rather than clutter up the interface, it is better to choose an appropriate value of . 
depending
 on circumference: 

de. 
circle(t. 
r). 
circumferenc. 
. 
. 
. 
math.p. 
. 
. 
. 
. 
int(circumferenc. 
. 
3. 
. 
. 
lengt. 
. 
circumferenc. 
. 
. 
polygon(t. 
n. 
length. 


Now the number of segments is (approximately) circumference/3, so the length of each 
segment is (approximately) 3, which is small enough that the circles look good, but big 
enough to be efficient, and appropriate for any size circle. 

4.7 Refactoring 
When I wrote circle, I was able to re-use polygo. 
because a many-sided polygon is a good 
approximation of a circle. But ar. 
is not as cooperative; we can�t use polygo. 
or circl. 
to 
draw an arc. 

One alternative is to start with a copy of polygo. 
and transform it into arc. The result 
might look like this: 

de. 
arc(t. 
r. 
angle). 
arc_lengt. 
. 
. 
. 
math.p. 
. 
. 
. 
angl. 
. 
36. 
. 
. 
int(arc_lengt. 
. 
3. 
. 
. 
step_lengt. 
. 
arc_lengt. 
. 
. 
step_angl. 
. 
float(angle. 
. 
. 


fo. 
. 
i. 
range(n). 
fd(t. 
step_length. 
lt(t. 
step_angle. 


The second half of this function looks like polygon, but we can�t re-use polygo. 
without 
changing the interface. We could generalize polygo. 
to take an angle as a third argument, 
but then polygo. 
would no longer be an appropriate name! Instead, let�s call the more 
general function polyline: 

de. 
polyline(t. 
n. 
length. 
angle). 


fo. 
. 
i. 
range(n). 
fd(t. 
length. 
lt(t. 
angle. 


Now we can rewrite polygo. 
and ar. 
to use polyline: de. 
polygon(t. 
n. 
length). 
angl. 
. 
360.. 
. 
. 
polyline(t. 
n. 
length. 
angle. 


de. 
arc(t. 
r. 
angle). 
arc_lengt. 
. 
. 
. 
math.p. 
. 
. 
. 
angl. 
. 
36. 
. 
. 
int(arc_lengt. 
. 
3. 
. 
. 
step_lengt. 
. 
arc_lengt. 
. 
. 
step_angl. 
. 
float(angle. 
. 
. 
polyline(t. 
n. 
step_length. 
step_angle. 



4.8. A development plan 
Finally, we can rewrite circl. 
to use arc: 

de. 
circle(t. 
r). 
arc(t. 
r. 
360. 


This process�rearranging a program to improve function interfaces and facilitate code reuse�
is called refactoring. In this case, we noticed that there was similar code in ar. 
and polygon, so we �factored it out� into polyline. 

If we had planned ahead, we might have written polylin. 
first and avoided refactoring, 
but often you don�t know enough at the beginning of a project to design all the interfaces. 
Once you start coding, you understand the problem better. Sometimes refactoring is a sign 
that you have learned something. 

4.8 A development plan 
A development plan is a process for writing programs. The process we used in this case 
study is �encapsulation and generalization.� The steps of this process are: 

1. Start by writing a small program with no function definitions. 
2. Once you get the program working, encapsulate it in a function and give it a name. 
3. Generalize the function by adding appropriate parameters. 
4. Repeat steps 1�3 until you have a set of working functions. Copy and paste working 
code to avoid retyping (and re-debugging). 
5. Look for opportunities to improve the program by refactoring. For example, if you 
have similar code in several places, consider factoring it into an appropriately general 
function. 
This process has some drawbacks�we will see alternatives later�but it can be useful if 
you don�t know ahead of time how to divide the program into functions. This approach 
lets you design as you go along. 

4.9 docstring 
A docstring is a string at the beginning of a function that explains the interface (�doc� is 
short for �documentation�). Here is an example: 

de. 
polyline(t. 
n. 
length. 
angle). 


"""Draw. 
. 
lin. 
segment. 
wit. 
th. 
give. 
lengt. 
an. 


angl. 
(i. 
degrees. 
betwee. 
them. 
. 
i. 
. 
turtle. 


"". 


fo. 
. 
i. 
range(n). 


fd(t. 
length. 


lt(t. 
angle. 



Chapter 4. Case study: interface design 

This docstring is a triple-quoted string, also known as a multiline string because the triple 
quotes allow the string to span more than one line. 

It is terse, but it contains the essential information someone would need to use this function.
 It explains concisely what the function does (without getting into the details of how 
it does it). It explains what effect each parameter has on the behavior of the function and 
what type each parameter should be (if it is not obvious). 

Writing this kind of documentation is an important part of interface design. A well-
designed interface should be simple to explain; if you are having a hard time explaining 
one of your functions, that might be a sign that the interface could be improved. 

4.10 Debugging 
An interface is like a contract between a function and a caller. The caller agrees to provide 
certain parameters and the function agrees to do certain work. 

For example, polylin. 
requires four arguments: . 
has to be a Turtle; . 
is the number of 
line segments, so it has to be an integer; lengt. 
should be a positive number; and angl. 
has to be a number, which is understood to be in degrees. 

These requirements are called preconditions because they are supposed to be true before 
the function starts executing. Conversely, conditions at the end of the function are postconditions.
 Postconditions include the intended effect of the function (like drawing line 
segments) and any side effects (like moving the Turtle or making other changes in the 
World). 

Preconditions are the responsibility of the caller. If the caller violates a (properly documented!)
 precondition and the function doesn�t work correctly, the bug is in the caller, not 
the function. 

4.11 Glossary 
instance: A member of a set. The TurtleWorld in this chapter is a member of the set of 
TurtleWorlds. 

loop: A part of a program that can execute repeatedly. 

encapsulation: The process of transforming a sequence of statements into a function definition.
 

generalization: The process of replacing something unnecessarily specific (like a number) 
with something appropriately general (like a variable or parameter). 

keyword argument: An argument that includes the name of the parameter as a �keyword.�
 

interface: A description of how to use a function, including the name and descriptions of 
the arguments and return value. 

refactoring: The process of modifying a working program to improve function interfaces 
and other qualities of the code. 


4.12. Exercises 
Figure 4.1: Turtle flowers. 


Figure 4.2: Turtle pies. 

development plan: A process for writing programs. 

docstring: A string that appears in a function definition to document the function�s interface.
 

precondition: A requirement that should be satisfied by the caller before a function starts. 

postcondition: A requirement that should be satisfied by the function before it ends. 

4.12 Exercises 
Exercise 4.1. Download the code in this chapter from http. 
/. 
thinkpython. 
com. 
code. 
polygon. 
p. 
. 

1. Write appropriate docstrings for polygon, ar. 
and circle. 
2. Draw a stack diagram that shows the state of the program while executing circle(bob. 
radius). You can do the arithmetic by hand or add prin. 
statements to the code. 
3. The version of ar. 
in Section 4.7 is not very accurate because the linear approximation of the 
circle is always outside the true circle. As a result, the turtle ends up a few units away from 
the correct destination. My solution shows a way to reduce the effect of this error. Read the 
code and see if it makes sense to you. If you draw a diagram, you might see how it works. 
Exercise 4.2. Write an appropriately general set of functions that can draw flowers as in Figure 4.1. 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
flower. 
p. 
, also requires http. 
/. 
thinkpython. 
com. 
code. 
polygon. 
p. 
. 
Exercise 4.3. Write an appropriately general set of functions that can draw shapes as in Figure 4.2. 


Solution: http. 
/. 
thinkpython. 
com. 
code. 
pie. 
p. 
. 


Chapter 4. Case study: interface design 

Exercise 4.4. The letters of the alphabet can be constructed from a moderate number of basic elements,
 like vertical and horizontal lines and a few curves. Design a font that can be drawn with a 
minimal number of basic elements and then write functions that draw letters of the alphabet. 

You should write one function for each letter, with names draw_a, draw_b, etc., and put your 
functions in a file named letters.py. You can download a �turtle typewriter� from http. 
/. 
thinkpython. 
com. 
code. 
typewriter. 
p. 
to help you test your code. 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
letters. 
p. 
, also requires http. 
/. 
thinkpython. 
com. 
code. 
polygon. 
p. 
. 
Exercise 4.5. Read about spirals at http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Spira. 
; then write 
a program that draws an Archimedian spiral (or one of the other kinds). Solution: http. 
/. 
thinkpython. 
com. 
code. 
spiral. 
p. 
. 


Chapter 5 
Conditionals and recursion 

5.1 Modulus operator 
The modulus operator works on integers and yields the remainder when the first operand 
is divided by the second. In Python, the modulus operator is a percent sign (%). The syntax 
is the same as for other operators: 

>>. 
quotien. 
. 
. 
. 
. 
>>. 
prin. 
quotien. 
. 
>>. 
remainde. 
. 
. 
. 
. 
>>. 
prin. 
remainde. 
. 


So 7 divided by 3 is 2 with 1 left over. 

The modulus operator turns out to be surprisingly useful. For example, you can check 
whether one number is divisible by another�if x%. 
is zero, then . 
is divisible by y. 

Also, you can extract the right-most digit or digits from a number. For example, . 
. 
1. 
yields the right-most digit of . 
(in base 10). Similarly . 
. 
10. 
yields the last two digits. 

5.2 Boolean expressions 
A boolean expression is an expression that is either true or false. The following examples 
use the operator ==, which compares two operands and produces Tru. 
if they are equal 
and Fals. 
otherwise: 

>>. 
. 
=. 
. 
Tru. 
>>. 
. 
=. 
. 
Fals. 


Tru. 
and Fals. 
are special values that belong to the type bool; they are not strings: >>. 
type(True. 
<typ. 
'bool'. 
>>. 
type(False. 
<typ. 
'bool'. 



Chapter 5. Conditionals and recursion 

The =. 
operator is one of the relational operators; the others are: 

x!=. 
#xisnotequalto. 


x>. 
#xisgreaterthan. 


x<. 
#xislessthan. 


. 
>. 
. 
. 
. 
i. 
greate. 
tha. 
o. 
equa. 
t. 
. 


x<=. 
#xislessthanorequalto. 


Although these operations are probably familiar to you, the Python symbols are different 
from the mathematical symbols. A common error is to use a single equal sign (=) instead of 
a double equal sign (==). Remember that . 
is an assignment operator and =. 
is a relational 
operator. There is no such thing as =. 
or =>. 

5.3 Logical operators 
There are three logical operators: and, or, and not. The semantics (meaning) of these 
operators is similar to their meaning in English. For example, x. 
. 
an. 
x<1. 
is true 
only if . 
is greater than 0 and less than 10. 

n%2=. 
0o. 
n%3=. 
. 
is true if either of the conditions is true, that is, if the number is 
divisible by 2 or 3. 

Finally, the no. 
operator negates a boolean expression, so no. 
(. 
. 
y. 
is true if x>. 
is 
false, that is, if . 
is less than or equal to y. 

Strictly speaking, the operands of the logical operators should be boolean expressions, but 
Python is not very strict. Any nonzero number is interpreted as �true.� 

>>. 
1. 
an. 
Tru. 


Tru. 


This flexibility can be useful, but there are some subtleties to it that might be confusing. 
You might want to avoid it (unless you know what you are doing). 

5.4 Conditional execution 
In order to write useful programs, we almost always need the ability to check conditions 
and change the behavior of the program accordingly. Conditional statements give us this 
ability. The simplest form is the i. 
statement: 

i. 
. 
>0. 


prin. 
'. 
i. 
positive. 


The boolean expression after i. 
is called the condition. If it is true, then the indented 
statement gets executed. If not, nothing happens. 

i. 
statements have the same structure as function definitions: a header followed by an 
indented body. Statements like this are called compound statements. 
There is no limit on the number of statements that can appear in the body, but there has to 
be at least one. Occasionally, it is useful to have a body with no statements (usually as a 
place keeper for code you haven�t written yet). In that case, you can use the pas. 
statement, 
which does nothing. 

i. 
. 
<0. 


pas. 
. 
nee. 
t. 
handl. 
negativ. 
values. 



5.5. Alternative execution 
5.5 Alternative execution 
A second form of the i. 
statement is alternative execution, in which there are two possibilities
 and the condition determines which one gets executed. The syntax looks like this: 

i. 
x%2=. 
0. 


prin. 
'. 
i. 
even. 
else. 


prin. 
'. 
i. 
odd. 


If the remainder when . 
is divided by 2 is 0, then we know that . 
is even, and the program 
displays a message to that effect. If the condition is false, the second set of statements is 
executed. Since the condition must be true or false, exactly one of the alternatives will be 
executed. The alternatives are called branches, because they are branches in the flow of 
execution. 

5.6 Chained conditionals 
Sometimes there are more than two possibilities and we need more than two branches. 
One way to express a computation like that is a chained conditional: 

i. 
. 
<y. 


prin. 
'. 
i. 
les. 
tha. 
y. 
eli. 
. 
>y. 


prin. 
'. 
i. 
greate. 
tha. 
y. 
else. 


prin. 
'. 
an. 
. 
ar. 
equal. 


eli. 
is an abbreviation of �else if.� Again, exactly one branch will be executed. There is no 
limit on the number of eli. 
statements. If there is an els. 
clause, it has to be at the end, 
but there doesn�t have to be one. 

i. 
choic. 
=. 
'a'. 


draw_a(. 
eli. 
choic. 
=. 
'b'. 


draw_b(. 
eli. 
choic. 
=. 
'c'. 


draw_c(. 


Each condition is checked in order. If the first is false, the next is checked, and so on. If one 
of them is true, the corresponding branch executes, and the statement ends. Even if more 
than one condition is true, only the first true branch executes. 

5.7 Nested conditionals 
One conditional can also be nested within another. We could have written the trichotomy 
example like this: 

i. 
. 
=. 
y. 


prin. 
'. 
an. 
. 
ar. 
equal. 
else. 


i. 
x<y. 



Chapter 5. Conditionals and recursion 

prin. 
'. 
i. 
les. 
tha. 
y. 


else. 


prin. 
'. 
i. 
greate. 
tha. 
y. 


The outer conditional contains two branches. The first branch contains a simple statement. 
The second branch contains another i. 
statement, which has two branches of its own. 
Those two branches are both simple statements, although they could have been conditional 
statements as well. 

Although the indentation of the statements makes the structure apparent, nested conditionals
 become difficult to read very quickly. In general, it is a good idea to avoid them 
when you can. 

Logical operators often provide a way to simplify nested conditional statements. For example,
 we can rewrite the following code using a single conditional: 

i. 
. 
<x. 


i. 
x<10. 


prin. 
'. 
i. 
. 
positiv. 
single-digi. 
number.. 


The prin. 
statement is executed only if we make it past both conditionals, so we can get 
the same effect with the an. 
operator: 

i. 
. 
<xan. 
. 
. 
10. 


prin. 
'. 
i. 
. 
positiv. 
single-digi. 
number.. 


5.8 Recursion 
It is legal for one function to call another; it is also legal for a function to call itself. It may 
not be obvious why that is a good thing, but it turns out to be one of the most magical 
things a program can do. For example, look at the following function: 

de. 
countdown(n). 


i. 
n<. 
0. 


prin. 
'Blastoff!. 


else. 


prin. 
. 


countdown(n-1. 


If . 
is 0 or negative, it outputs the word, �Blastoff!� Otherwise, it outputs . 
and then calls 
a function named countdown�itself�passing n-. 
as an argument. 

What happens if we call this function like this? 

>>. 
countdown(3. 


The execution of countdow. 
begins with n=3, and since . 
is greater than 0, it outputs the 
value 3, and then calls itself... 

The execution of countdow. 
begins with n=2, and since . 
is greater than 0, it 

outputs the value 2, and then calls itself... 

The execution of countdow. 
begins with n=1, and since . 
is greater 

than 0, it outputs the value 1, and then calls itself... 

The execution of countdow. 
begins with n=0, and since . 
is 
not greater than 0, it outputs the word, �Blastoff!� and then 
returns. 


5.9. Stack diagrams for recursive functions 
The countdow. 
that got n=. 
returns. 

The countdow. 
that got n=. 
returns. 

The countdow. 
that got n=. 
returns. 

And then you�re back in __main__. So, the total output looks like this: 

. 


. 


. 


Blastoff. 


A function that calls itself is recursive; the process is called recursion. 

As another example, we can write a function that prints a string . 
times. 

de. 
print_n(s. 
n). 


i. 
n<. 
0. 


retur. 


prin. 
. 


print_n(s. 
n-1. 


If . 
<. 
. 
the retur. 
statement exits the function. The flow of execution immediately returns
 to the caller, and the remaining lines of the function are not executed. 

The rest of the function is similar to countdown: if . 
is greater than 0, it displays . 
and then 
calls itself to display . 
n . 
1 additional times. So the number of lines of output is . 
. 
(n. 
1), which adds up to n. 

For simple examples like this, it is probably easier to use a fo. 
loop. But we will see 
examples later that are hard to write with a fo. 
loop and easy to write with recursion, so it 
is good to start early. 

5.9 Stack diagrams for recursive functions 
In Section 3.10, we used a stack diagram to represent the state of a program during a function
 call. The same kind of diagram can help interpret a recursive function. 

Every time a function gets called, Python creates a new function frame, which contains the 
function�s local variables and parameters. For a recursive function, there might be more 
than one frame on the stack at the same time. 

Figure 5.1 shows a stack diagram for countdow. 
called with n=3. 

As usual, the top of the stack is the frame for __main__. It is empty because we did not 
create any variables in __main_. 
or pass any arguments to it. 

The four countdow. 
frames have different values for the parameter n. The bottom of the 
stack, where n=0, is called the base case. It does not make a recursive call, so there are no 
more frames. 

Exercise 5.1. Draw a stack diagram for print_. 
called with s. 
'Hello. 
and n=2. 
Exercise 5.2. Write a function called do_. 
that takes a function object and a number, n, as arguments,
 and that calls the given function . 
times. 



Chapter 5. Conditionals and recursion 

<module>
countdowncountdowncountdowncountdownn3n2n1n0
Figure 5.1: Stack diagram. 

5.10 Infinite recursion 
If a recursion never reaches a base case, it goes on making recursive calls forever, and the 
program never terminates. This is known as infinite recursion, and it is generally not a 
good idea. Here is a minimal program with an infinite recursion: 

de. 
recurse(). 
recurse(. 


In most programming environments, a program with infinite recursion does not really run 
forever. Python reports an error message when the maximum recursion depth is reached: 

Fil. 
"<stdin>". 
lin. 
2. 
i. 
recurs. 
Fil. 
"<stdin>". 
lin. 
2. 
i. 
recurs. 
Fil. 
"<stdin>". 
lin. 
2. 
i. 
recurs. 


. 
. 
. 


Fil. 
"<stdin>". 
lin. 
2. 
i. 
recurs. 
RuntimeError. 
Maximu. 
recursio. 
dept. 
exceede. 


This traceback is a little bigger than the one we saw in the previous chapter. When the error 
occurs, there are 1000 recurs. 
frames on the stack! 

5.11 Keyboard input 
The programs we have written so far are a bit rude in the sense that they accept no input 
from the user. They just do the same thing every time. 

Python 2 provides a built-in function called raw_inpu. 
that gets input from the keyboard. 
In Python 3, it is called input. When this function is called, the program stops and waits for 
the user to type something. When the user presses Retur. 
or Enter, the program resumes 
and raw_inpu. 
returns what the user typed as a string. 

>>. 
tex. 
. 
raw_input(. 
Wha. 
ar. 
yo. 
waitin. 
for. 
>>. 
prin. 
tex. 
Wha. 
ar. 
yo. 
waitin. 
for. 



5.12. Debugging 
Before getting input from the user, it is a good idea to print a prompt telling the user what 
to input. raw_inpu. 
can take a prompt as an argument: 

>>. 
nam. 
. 
raw_input('What...i. 
you. 
name?\n'. 
What...i. 
you. 
name. 
Arthur. 
Kin. 
o. 
th. 
Britons. 
>>. 
prin. 
nam. 
Arthur. 
Kin. 
o. 
th. 
Britons. 


The sequence \. 
at the end of the prompt represents a newline, which is a special character 
that causes a line break. That�s why the user�s input appears below the prompt. 

If you expect the user to type an integer, you can try to convert the return value to int: >>. 
promp. 
. 
'What...i. 
th. 
airspee. 
velocit. 
o. 
a. 
unlade. 
swallow?\n. 
>>. 
spee. 
. 
raw_input(prompt. 
What...i. 
th. 
airspee. 
velocit. 
o. 
a. 
unlade. 
swallow. 
1. 
>>. 
int(speed. 
1. 


But if the user types something other than a string of digits, you get an error: 

>>. 
spee. 
. 
raw_input(prompt. 
What...i. 
th. 
airspee. 
velocit. 
o. 
a. 
unlade. 
swallow. 
Wha. 
d. 
yo. 
mean. 
a. 
Africa. 
o. 
. 
Europea. 
swallow. 
>>. 
int(speed. 
ValueError. 
invali. 
litera. 
fo. 
int(. 
wit. 
bas. 
1. 


We will see how to handle this kind of error later. 

5.12 Debugging 
The traceback Python displays when an error occurs contains a lot of information, but it 
can be overwhelming, especially when there are many frames on the stack. The most useful 
parts are usually: 

� What kind of error it was, and 
� Where it occurred. 
Syntax errors are usually easy to find, but there are a few gotchas. Whitespace errors can 
be tricky because spaces and tabs are invisible and we are used to ignoring them. 

>>>x. 
. 
>>. 
y=. 


Fil. 
"<stdin>". 
lin. 
. 
y=. 
. 


IndentationError. 
unexpecte. 
inden. 


In this example, the problem is that the second line is indented by one space. But the error 
message points to y, which is misleading. In general, error messages indicate where the 
problem was discovered, but the actual error might be earlier in the code, sometimes on a 
previous line. 


Chapter 5. Conditionals and recursion 

The same is true of runtime errors. 

Suppose you are trying to compute a signal-to-noise ratio in decibels. The formula is 
SNRdb = 
10 log10(Psignal /Pnoise). In Python, you might write something like this: 

impor. 
mat. 


signal_powe. 
. 
. 


noise_powe. 
. 
1. 


rati. 
. 
signal_powe. 
. 
noise_powe. 


decibel. 
. 
1. 
. 
math.log10(ratio. 


prin. 
decibel. 


But when you run it in Python 2, you get an error message. 

Tracebac. 
(mos. 
recen. 
cal. 
last). 


Fil. 
"snr.py". 
lin. 
5. 
i. 
. 


decibel. 
. 
1. 
. 
math.log10(ratio. 


ValueError. 
mat. 
domai. 
erro. 


The error message indicates line 5, but there is nothing wrong with that line. To find the 
real error, it might be useful to print the value of ratio, which turns out to be 0. The 
problem is in line 4, because dividing two integers does floor division. The solution is to 
represent signal power and noise power with floating-point values. 

In general, error messages tell you where the problem was discovered, but that is often not 
where it was caused. 

In Python 3, this example does not cause an error; the division operator performs floating-
point division even with integer operands. 

5.13 Glossary 
modulus operator: An operator, denoted with a percent sign (%), that works on integers 
and yields the remainder when one number is divided by another. 

boolean expression: An expression whose value is either Tru. 
or False. 

relational operator: One of the operators that compares its operands: ==, !=, >, <, >=, and <=. 

logical operator: One of the operators that combines boolean expressions: and, or, and not. 

conditional statement: A statement that controls the flow of execution depending on some 
condition. 

condition: The boolean expression in a conditional statement that determines which 
branch is executed. 

compound statement: A statement that consists of a header and a body. The header ends 
with a colon (:). The body is indented relative to the header. 

branch: One of the alternative sequences of statements in a conditional statement. 

chained conditional: A conditional statement with a series of alternative branches. 


5.14. Exercises 
nested conditional: A conditional statement that appears in one of the branches of another 
conditional statement. 

recursion: The process of calling the function that is currently executing. 

base case: A conditional branch in a recursive function that does not make a recursive call. 

infinite recursion: A recursion that doesn�t have a base case, or never reaches it. Eventually,
 an infinite recursion causes a runtime error. 

5.14 Exercises 
Exercise 5.3. Fermat�s Last Theorem says that there are no positive integers a, b, and c such that 

nn

a+ 
bn = 
c

for any values of n greater than 2. 

1. Write a function named check_ferma. 
that takes four parameters�a, b, . 
and n�and that 
checks to see if Fermat�s theorem holds. If n is greater than 2 and it turns out to be true that 
nn

a+ 
bn = 
c

the program should print, �Holy smokes, Fermat was wrong!� Otherwise the program should 
print, �No, that doesn�t work.� 

2. Write a function that prompts the user to input values for a, b, . 
and n, converts them to 
integers, and uses check_ferma. 
to check whether they violate Fermat�s theorem. 
Exercise 5.4. If you are given three sticks, you may or may not be able to arrange them in a triangle. 
For example, if one of the sticks is 12 inches long and the other two are one inch long, it is clear that 
you will not be able to get the short sticks to meet in the middle. For any three lengths, there is a 
simple test to see if it is possible to form a triangle: 

If any of the three lengths is greater than the sum of the other two, then you cannot 
form a triangle. Otherwise, you can. (If the sum of two lengths equals the third, they 
form what is called a �degenerate� triangle.) 

1. Write a function named is_triangl. 
that takes three integers as arguments, and that prints 
either �Yes� or �No,� depending on whether you can or cannot form a triangle from sticks 
with the given lengths. 
2. Write a function that prompts the user to input three stick lengths, converts them to integers, 
and uses is_triangl. 
to check whether sticks with the given lengths can form a triangle. 
The following exercises use TurtleWorld from Chapter 4: 

Exercise 5.5. Read the following function and see if you can figure out what it does. Then run it 
(see the examples in Chapter 4). 


Chapter 5. Conditionals and recursion 


Figure 5.2: A Koch curve. 

de. 
draw(t. 
length. 
n). 
i. 
n=. 
0. 


retur. 
angl. 
. 
5. 
fd(t. 
length*n. 
lt(t. 
angle. 
draw(t. 
length. 
n-1. 
rt(t. 
2*angle. 
draw(t. 
length. 
n-1. 
lt(t. 
angle. 
bk(t. 
length*n. 


Exercise 5.6. The Koch curve is a fractal that looks something like Figure 5.2. To draw a Koch 
curve with length x, all you have to do is 

1. Draw a Koch curve with length x/3. 
2. Turn left 60 degrees. 
3. Draw a Koch curve with length x/3. 
4. Turn right 120 degrees. 
5. Draw a Koch curve with length x/3. 
6. Turn left 60 degrees. 
7. Draw a Koch curve with length x/3. 
The exception is if x is less than 3: in that case, you can just draw a straight line with length x. 
1. Write a function called koc. 
that takes a turtle and a length as parameters, and that uses the 
turtle to draw a Koch curve with the given length. 
2. Write a function called snowflak. 
that draws three Koch curves to make the outline of a 
snowflake. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
koch. 
p. 
. 

3. The Koch curve can be generalized in several ways. 
See http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Koch. 
snowflak. 
for examples and implement your favorite. 

Chapter 6 

Fruitful functions 

6.1 Return values 
Some of the built-in functions we have used, such as the math functions, produce results. 
Calling the function generates a value, which we usually assign to a variable or use as part 
of an expression. 

. 
. 
math.exp(1.0. 
heigh. 
. 
radiu. 
. 
math.sin(radians. 


All of the functions we have written so far are void; they print something or move turtles 
around, but their return value is None. 

In this chapter, we are (finally) going to write fruitful functions. The first example is area, 
which returns the area of a circle with the given radius: 

de. 
area(radius). 
tem. 
. 
math.p. 
. 
radius**. 
retur. 
tem. 


We have seen the retur. 
statement before, but in a fruitful function the retur. 
statement 
includes an expression. This statement means: �Return immediately from this function 
and use the following expression as a return value.� The expression can be arbitrarily 
complicated, so we could have written this function more concisely: 

de. 
area(radius). 
retur. 
math.p. 
. 
radius**. 


On the other hand, temporary variables like tem. 
often make debugging easier. 

Sometimes it is useful to have multiple return statements, one in each branch of a conditional:
 

de. 
absolute_value(x). 
i. 
x<0. 
retur. 
-. 
else. 
retur. 
. 



Chapter 6. Fruitful functions 

Since these retur. 
statements are in an alternative conditional, only one will be executed. 

As soon as a return statement executes, the function terminates without executing any 
subsequent statements. Code that appears after a retur. 
statement, or any other place the 
flow of execution can never reach, is called dead code. 

In a fruitful function, it is a good idea to ensure that every possible path through the program
 hits a retur. 
statement. For example: 

de. 
absolute_value(x). 


i. 
x<0. 


retur. 
-. 


i. 
x>0. 


retur. 
. 


This function is incorrect because if . 
happens to be 0, neither condition is true, and the 
function ends without hitting a retur. 
statement. If the flow of execution gets to the end 
of a function, the return value is None, which is not the absolute value of 0. 

>>. 
prin. 
absolute_value(0. 


Non. 


By the way, Python provides a built-in function called ab. 
that computes absolute values. 
Exercise 6.1. Write a compar. 
function that returns . 
if x>y, . 
if . 
=. 
y, and -. 
if x<y. 

6.2 Incremental development 
As you write larger functions, you might find yourself spending more time debugging. 

To deal with increasingly complex programs, you might want to try a process called incremental
 development. The goal of incremental development is to avoid long debugging 
sessions by adding and testing only a small amount of code at a time. 

As an example, suppose you want to find the distance between two points, given by the 
coordinates (x1, y1) 
and (x2, y2). By the Pythagorean theorem, the distance is: 

distance =(x2 . 
x1)2 +(y2 . 
y1)2 

The first step is to consider what a distanc. 
function should look like in Python. In other 
words, what are the inputs (parameters) and what is the output (return value)? 

In this case, the inputs are two points, which you can represent using four numbers. The 
return value is the distance, which is a floating-point value. 

Already you can write an outline of the function: 

de. 
distance(x1. 
y1. 
x2. 
y2). 


retur. 
0.. 


Obviously, this version doesn�t compute distances; it always returns zero. But it is syntactically
 correct, and it runs, which means that you can test it before you make it more 
complicated. 

To test the new function, call it with sample arguments: 


6.2. Incremental development 
>>. 
distance(1. 
2. 
4. 
6. 
0.. 


I chose these values so that the horizontal distance is 3 and the vertical distance is 4; that 
way, the result is 5 (the hypotenuse of a 3-4-5 triangle). When testing a function, it is useful 
to know the right answer. 

At this point we have confirmed that the function is syntactically correct, and we can start 
adding code to the body. A reasonable next step is to find the differences x2 . 
x1 and 
y2 . 
y1. The next version stores those values in temporary variables and prints them. 

de. 
distance(x1. 
y1. 
x2. 
y2). 


d. 
=x. 
-x. 


d. 
=y. 
-y. 


prin. 
'd. 
is'. 
d. 


prin. 
'd. 
is'. 
d. 


retur. 
0.. 


If the function is working, it should display 'd. 
i. 
3. 
and 'd. 
i. 
4'. If so, we know that 
the function is getting the right arguments and performing the first computation correctly. 
If not, there are only a few lines to check. 

Next we compute the sum of squares of d. 
and dy: de. 
distance(x1. 
y1. 
x2. 
y2). 


d. 
=x. 
-x. 


d. 
=y. 
-y. 


dsquare. 
. 
dx**. 
. 
dy**. 


prin. 
'dsquare. 
is. 
'. 
dsquare. 


retur. 
0.. 


Again, you would run the program at this stage and check the output (which should be 
25). Finally, you can use math.sqr. 
to compute and return the result: 

de. 
distance(x1. 
y1. 
x2. 
y2). 


d. 
=x. 
-x. 


d. 
=y. 
-y. 


dsquare. 
. 
dx**. 
. 
dy**. 


resul. 
. 
math.sqrt(dsquared. 


retur. 
resul. 


If that works correctly, you are done. Otherwise, you might want to print the value of resul. 
before the return statement. 

The final version of the function doesn�t display anything when it runs; it only returns 
a value. The prin. 
statements we wrote are useful for debugging, but once you get the 
function working, you should remove them. Code like that is called scaffolding because it 
is helpful for building the program but is not part of the final product. 

When you start out, you should add only a line or two of code at a time. As you gain more 
experience, you might find yourself writing and debugging bigger chunks. Either way, 
incremental development can save you a lot of debugging time. 

The key aspects of the process are: 

1. Start with a working program and make small incremental changes. At any point, if 
there is an error, you should have a good idea where it is. 

Chapter 6. Fruitful functions 

2. Use temporary variables to hold intermediate values so you can display and check 
them. 
3. Once the program is working, you might want to remove some of the scaffolding or 
consolidate multiple statements into compound expressions, but only if it does not 
make the program difficult to read. 
Exercise 6.2. Use incremental development to write a function called hypotenus. 
that returns the 
length of the hypotenuse of a right triangle given the lengths of the two legs as arguments. Record 
each stage of the development process as you go. 

6.3 Composition 
As you should expect by now, you can call one function from within another. This ability 
is called composition. 

As an example, we�ll write a function that takes two points, the center of the circle and a 
point on the perimeter, and computes the area of the circle. 

Assume that the center point is stored in the variables x. 
and yc, and the perimeter point is 
in x. 
and yp. The first step is to find the radius of the circle, which is the distance between 
the two points. We just wrote a function, distance, that does that: 

radiu. 
. 
distance(xc. 
yc. 
xp. 
yp. 


The next step is to find the area of a circle with that radius; we just wrote that, too: 

resul. 
. 
area(radius. 


Encapsulating these steps in a function, we get: 

de. 
circle_area(xc. 
yc. 
xp. 
yp). 


radiu. 
. 
distance(xc. 
yc. 
xp. 
yp. 


resul. 
. 
area(radius. 


retur. 
resul. 


The temporary variables radiu. 
and resul. 
are useful for development and debugging, 
but once the program is working, we can make it more concise by composing the function 
calls: 

de. 
circle_area(xc. 
yc. 
xp. 
yp). 


retur. 
area(distance(xc. 
yc. 
xp. 
yp). 


6.4 Boolean functions 
Functions can return booleans, which is often convenient for hiding complicated tests inside
 functions. For example: 

de. 
is_divisible(x. 
y). 


i. 
x%. 
==0. 


retur. 
Tru. 


else. 


retur. 
Fals. 



6.5. More recursion 
It is common to give boolean functions names that sound like yes/no questions; is_divisibl. 
returns either Tru. 
or Fals. 
to indicate whether . 
is divisible by y. 

Here is an example: 

>>. 
is_divisible(6. 
4. 


Fals. 


>>. 
is_divisible(6. 
3. 


Tru. 


The result of the =. 
operator is a boolean, so we can write the function more concisely by 
returning it directly: 

de. 
is_divisible(x. 
y). 


returnx. 
. 
=. 
. 


Boolean functions are often used in conditional statements: 

i. 
is_divisible(x. 
y). 


prin. 
'. 
i. 
divisibl. 
b. 
y. 


It might be tempting to write something like: 

i. 
is_divisible(x. 
y. 
=. 
True. 


prin. 
'. 
i. 
divisibl. 
b. 
y. 


But the extra comparison is unnecessary. 

Exercise 6.3. Write a function is_between(x. 
y. 
z. 
that returns Tru. 
if x . 
y . 
z or Fals. 
otherwise. 

6.5 More recursion 
We have only covered a small subset of Python, but you might be interested to know that 
this subset is a complete programming language, which means that anything that can be 
computed can be expressed in this language. Any program ever written could be rewritten 
using only the language features you have learned so far (actually, you would need a few 
commands to control devices like the keyboard, mouse, disks, etc., but that�s all). 

Proving that claim is a nontrivial exercise first accomplished by Alan Turing, one of the 
first computer scientists (some would argue that he was a mathematician, but a lot of early 
computer scientists started as mathematicians). Accordingly, it is known as the Turing 
Thesis. For a more complete (and accurate) discussion of the Turing Thesis, I recommend 
Michael Sipser�s book Introduction to the Theory of Computation. 

To give you an idea of what you can do with the tools you have learned so far, we�ll evaluate
 a few recursively defined mathematical functions. A recursive definition is similar to 
a circular definition, in the sense that the definition contains a reference to the thing being 
defined. A truly circular definition is not very useful: 

vorpal: An adjective used to describe something that is vorpal. 

If you saw that definition in the dictionary, you might be annoyed. On the other hand, 
if you looked up the definition of the factorial function, denoted with the symbol !, you 
might get something like this: 

0! = 
1 
n! = 
n(n . 
1)! 


Chapter 6. Fruitful functions 

This definition says that the factorial of 0 is 1, and the factorial of any other value, n, is n 
multiplied by the factorial of n . 
1. 

So 3! is 3 times 2!, which is 2 times 1!, which is 1 times 0!. Putting it all together, 3! equals 3 
times 2 times 1 times 1, which is 6. 

If you can write a recursive definition of something, you can usually write a Python program
 to evaluate it. The first step is to decide what the parameters should be. In this case 
it should be clear that factoria. 
takes an integer: 

de. 
factorial(n). 


If the argument happens to be 0, all we have to do is return 1: 

de. 
factorial(n). 


i. 
n=. 
0. 


retur. 
. 


Otherwise, and this is the interesting part, we have to make a recursive call to find the 
factorial of n . 
1 and then multiply it by n: 

de. 
factorial(n). 


i. 
n=. 
0. 


retur. 
. 


else. 


recurs. 
. 
factorial(n-1. 


resul. 
. 
. 
. 
recurs. 


retur. 
resul. 


The flow of execution for this program is similar to the flow of countdow. 
in Section 5.8. If 
we call factoria. 
with the value 3: 

Since 3 is not 0, we take the second branch and calculate the factorial of n-1... 

Since 2 is not 0, we take the second branch and calculate the factorial of n-1... 

Since 1 is not 0, we take the second branch and calculate the factorial 

of n-1... 

Since 0 is 0, we take the first branch and return 1 without 

making any more recursive calls. 

The return value (1) is multiplied by n, which is 1, and the result is 

returned. 

The return value (1) is multiplied by n, which is 2, and the result is returned. 

The return value (2) is multiplied by n, which is 3, and the result, 6, becomes the return 
value of the function call that started the whole process. 

Figure 6.1 shows what the stack diagram looks like for this sequence of function calls. 

The return values are shown being passed back up the stack. In each frame, the return 
value is the value of result, which is the product of . 
and recurse. 

In the last frame, the local variables recurs. 
and resul. 
do not exist, because the branch 
that creates them does not execute. 


6.6. Leap of faith 
n3recurse2recurse1recurse1<module>
factorialn2n1n0factorialfactorialfactorial11261result26resultresult
Figure 6.1: Stack diagram. 

6.6 Leap of faith 
Following the flow of execution is one way to read programs, but it can quickly become 
labyrinthine. An alternative is what I call the �leap of faith.� When you come to a function 
call, instead of following the flow of execution, you assume that the function works correctly 
and returns the right result. 

In fact, you are already practicing this leap of faith when you use built-in functions. When 
you call math.co. 
or math.exp, you don�t examine the bodies of those functions. You just 
assume that they work because the people who wrote the built-in functions were good 
programmers. 

The same is true when you call one of your own functions. For example, in Section 6.4, we 
wrote a function called is_divisibl. 
that determines whether one number is divisible by 
another. Once we have convinced ourselves that this function is correct�by examining the 
code and testing�we can use the function without looking at the body again. 

The same is true of recursive programs. When you get to the recursive call, instead of 
following the flow of execution, you should assume that the recursive call works (yields 
the correct result) and then ask yourself, �Assuming that I can find the factorial of n . 
1, 
can I compute the factorial of n?� In this case, it is clear that you can, by multiplying by n. 

Of course, it�s a bit strange to assume that the function works correctly when you haven�t 
finished writing it, but that�s why it�s called a leap of faith! 

6.7 One more example 
After factorial, the most common example of a recursively defined mathematical function
 is fibonacci, which has the following definition (see http://en.wikipedia.org. 
wiki/Fibonacci_number): 

fibonacci(0)= 
0 
fibonacci(1)= 
1 
fibonacci(n)= 
fibonacci(n . 
1)+ 
fibonacci(n . 
2) 


Translated into Python, it looks like this: 


Chapter 6. Fruitful functions 

de. 
fibonacc. 
(n). 
i. 
n=. 
0. 
retur. 
. 
eli. 
n==1. 
retur. 
. 
else. 
retur. 
fibonacci(n-1. 
. 
fibonacci(n-2. 


If you try to follow the flow of execution here, even for fairly small values of n, your head 
explodes. But according to the leap of faith, if you assume that the two recursive calls work 
correctly, then it is clear that you get the right result by adding them together. 

6.8 Checking types 
What happens if we call factoria. 
and give it 1.5 as an argument? 

>>. 
factorial(1.5. 
RuntimeError. 
Maximu. 
recursio. 
dept. 
exceede. 
It looks like an infinite recursion. But how can that be? There is a base case�when . 
=. 
0. 

But if . 
is not an integer, we can miss the base case and recurse forever. 

In the first recursive call, the value of . 
is 0.5. In the next, it is -0.5. From there, it gets 
smaller (more negative), but it will never be 0. 

We have two choices. We can try to generalize the factoria. 
function to work with 
floating-point numbers, or we can make factoria. 
check the type of its argument. The 
first option is called the gamma function and it�s a little beyond the scope of this book. So 
we�ll go for the second. 

We can use the built-in function isinstanc. 
to verify the type of the argument. While 
we�re at it, we can also make sure the argument is positive: 

de. 
factoria. 
(n). 


i. 
no. 
isinstance(n. 
int). 
prin. 
'Factoria. 
i. 
onl. 
define. 
fo. 
integers.. 
retur. 
Non. 


eli. 
. 
. 
0. 
prin. 
'Factoria. 
i. 
no. 
define. 
fo. 
negativ. 
integers.. 
retur. 
Non. 


eli. 
. 
=. 
0. 
retur. 
. 
else. 
retur. 
. 
. 
factorial(n-1. 


The first base case handles nonintegers; the second catches negative integers. In both cases, 
the program prints an error message and returns Non. 
to indicate that something went 
wrong: 

>>. 
factorial('fred'. 
Factoria. 
i. 
onl. 
define. 
fo. 
integers. 
Non. 
>>. 
factorial(-2. 
Factoria. 
i. 
no. 
define. 
fo. 
negativ. 
integers. 
Non. 



6.9. Debugging 
If we get past both checks, then we know that n is positive or zero, so we can prove that 
the recursion terminates. 

This program demonstrates a pattern sometimes called a guardian. The first two conditionals
 act as guardians, protecting the code that follows from values that might cause an 
error. The guardians make it possible to prove the correctness of the code. 

In Section 11.3 we will see a more flexible alternative to printing an error message: raising 
an exception. 

6.9 Debugging 
Breaking a large program into smaller functions creates natural checkpoints for debugging. 
If a function is not working, there are three possibilities to consider: 

� There is something wrong with the arguments the function is getting; a precondition 
is violated. 
� There is something wrong with the function; a postcondition is violated. 
� There is something wrong with the return value or the way it is being used. 
To rule out the first possibility, you can add a prin. 
statement at the beginning of the 
function and display the values of the parameters (and maybe their types). Or you can 
write code that checks the preconditions explicitly. 

If the parameters look good, add a prin. 
statement before each retur. 
statement that displays
 the return value. If possible, check the result by hand. Consider calling the function 
with values that make it easy to check the result (as in Section 6.2). 

If the function seems to be working, look at the function call to make sure the return value 
is being used correctly (or used at all!). 

Adding print statements at the beginning and end of a function can help make the flow of 
execution more visible. For example, here is a version of factoria. 
with print statements: 

de. 
factorial(n). 


spac. 
. 
'. 
. 
(. 
. 
n. 


prin. 
space. 
'factorial',. 


i. 
n=. 
0. 


prin. 
space. 
'returnin. 
1. 


retur. 
. 


else. 


recurs. 
. 
factorial(n-1. 


resul. 
. 
. 
. 
recurs. 


prin. 
space. 
'returning'. 
resul. 


retur. 
resul. 


spac. 
is a string of space characters that controls the indentation of the output. Here is the 
result of factorial(5. 
: 


Chapter 6. Fruitful functions 

factoria. 
. 


factoria. 
. 


factoria. 
. 


factoria. 
. 


factoria. 
. 


factoria. 
. 


returnin. 
. 


returnin. 
. 


returnin. 
. 


returnin. 
. 


returnin. 
2. 


returnin. 
12. 


If you are confused about the flow of execution, this kind of output can be helpful. It takes 
some time to develop effective scaffolding, but a little bit of scaffolding can save a lot of 
debugging. 

6.10 Glossary 
temporary variable: A variable used to store an intermediate value in a complex calculation.
 

dead code: Part of a program that can never be executed, often because it appears after a retur. 
statement. 

None: A special value returned by functions that have no return statement or a return statement
 without an argument. 

incremental development: A program development plan intended to avoid debugging by 
adding and testing only a small amount of code at a time. 

scaffolding: Code that is used during program development but is not part of the final 
version. 

guardian: A programming pattern that uses a conditional statement to check for and handle
 circumstances that might cause an error. 

6.11 Exercises 
Exercise 6.4. Draw a stack diagram for the following program. What does the program print? 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
stack. 
diagram. 
p. 
. 

de. 
b(z). 


pro. 
. 
a(z. 
z. 


prin. 
z. 
pro. 


retur. 
pro. 


de. 
a(x. 
y). 


x=x+. 


returnx. 
. 



6.11. Exercises 
de. 
c(x. 
y. 
z). 
tota. 
. 
. 
+y. 
. 
squar. 
. 
b(total)**. 
retur. 
squar. 


x=. 
y=x+. 
prin. 
c(x. 
y+3. 
x+y. 


Exercise 6.5. The Ackermann function, A(m, n), is defined: 

A(m, n)= 


. 
>. 
>. 


n + 
1 
if m = 
0 

A(m . 
1, 1) 
if m > 
0 and n = 
0 
A(m . 
1, A(m, n . 
1)) 
if m > 
0 and n > 
0. 


See http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Ackermann. 
functio. 
. Write a function named ac. 
that evaluates Ackermann�s function. Use your function to evaluate ack(3. 
4), which should be 

125. What happens for larger values of . 
and n? Solution: http. 
/. 
thinkpython. 
com. 
code. 
ackermann. 
p. 
. 
Exercise 6.6. A palindrome is a word that is spelled the same backward and forward, like �noon� 
and �redivider�. Recursively, a word is a palindrome if the first and last letters are the same and the 
middle is a palindrome. 
The following are functions that take a string argument and return the first, last, and middle letters: 

de. 
first(word). 


retur. 
word[0. 


de. 
last(word). 


retur. 
word[-1. 


de. 
middle(word). 


retur. 
word[1:-1. 


We�ll see how they work in Chapter 8. 

1. Type these functions into a file named palindrome.p. 
and test them out. What happens if 
you call middl. 
with a string with two letters? One letter? What about the empty string, 
which is written '. 
and contains no letters? 
2. Write a function called is_palindrom. 
that takes a string argument and returns Tru. 
if it 
is a palindrome and Fals. 
otherwise. Remember that you can use the built-in function le. 
to check the length of a string. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
palindrome. 
soln. 
p. 
. 
Exercise 6.7. A number, a, is a power of b if it is divisible by b and a/b is a power of b. Write a 
function called is_powe. 
that takes parameters . 
and . 
and returns Tru. 
if . 
is a power of b. Note: 
you will have to think about the base case. 
Exercise 6.8. The greatest common divisor (GCD) of a and b is the largest number that divides 
both of them with no remainder. 


One way to find the GCD of two numbers is based on the observation that if r is the remainder when 
a is divided by b, then gcd(a, b)= 
gcd(b, r). As a base case, we can use gcd(a,0)= 
a. 



Chapter 6. Fruitful functions 

Write a function called gc. 
that takes parameters . 
and . 
and returns their greatest common divisor. 

Credit: This exercise is based on an example from Abelson and Sussman�s Structure and Interpretation
 of Computer Programs. 


Chapter 7 

Iteration 

7.1 Multiple assignment 
As you may have discovered, it is legal to make more than one assignment to the same 
variable. A new assignment makes an existing variable refer to a new value (and stop 
referring to the old value). 

bruc. 
. 
. 


prin. 
bruce. 


bruc. 
. 
. 


prin. 
bruc. 


The output of this program is 57, because the first time bruc. 
is printed, its value is 5, 
and the second time, its value is 7. The comma at the end of the first prin. 
statement 
suppresses the newline, which is why both outputs appear on the same line. 

Figure 7.1 shows what multiple assignment looks like in a state diagram. 

With multiple assignment it is especially important to distinguish between an assignment 
operation and a statement of equality. Because Python uses the equal sign (=) for assignment,
 it is tempting to interpret a statement like a=. 
as a statement of equality. It is not! 

First, equality is a symmetric relation and assignment is not. For example, in mathematics, 
if a = 
7 then 7 = 
a. But in Python, the statement a=. 
is legal and 7=. 
is not. 

Furthermore, in mathematics, a statement of equality is either true or false, for all time. If 
a = 
b now, then a will always equal b. In Python, an assignment statement can make two 
variables equal, but they don�t have to stay that way: 

a=. 


b=. 
#aandbarenowequa. 


. 
. 
. 
. 
. 
an. 
. 
ar. 
n. 
longe. 
equa. 


The third line changes the value of . 
but does not change the value of b, so they are no 
longer equal. 

Although multiple assignment is frequently helpful, you should use it with caution. If the 
values of variables change frequently, it can make the code difficult to read and debug. 


Chapter 7. Iteration 

75bruce
Figure 7.1: State diagram. 

7.2 Updating variables 
One of the most common forms of multiple assignment is an update, where the new value 
of the variable depends on the old. 

. 
. 
x+. 


This means �get the current value of x, add one, and then update . 
with the new value.� 

If you try to update a variable that doesn�t exist, you get an error, because Python evaluates 
the right side before it assigns a value to x: 

>>>x. 
x+. 


NameError. 
nam. 
'x. 
i. 
no. 
define. 


Before you can update a variable, you have to initialize it, usually with a simple assignment:
 

>>>x. 
. 


>>>x. 
x+. 


Updating a variable by adding 1 is called an increment; subtracting 1 is called a decrement. 

7.3 The whil. 
statement 
Computers are often used to automate repetitive tasks. Repeating identical or similar tasks 
without making errors is something that computers do well and people do poorly. 

We have seen two programs, countdow. 
and print_n, that use recursion to perform repetition,
 which is also called iteration. Because iteration is so common, Python provides 
several language features to make it easier. One is the fo. 
statement we saw in Section 4.2. 
We�ll get back to that later. 

Another is the whil. 
statement. Here is a version of countdow. 
that uses a whil. 
statement: 

de. 
countdown(n). 


whil. 
. 
. 
0. 


prin. 
. 


. 
. 
n-. 


prin. 
'Blastoff!. 


You can almost read the whil. 
statement as if it were English. It means, �While . 
is greater 
than 0, display the value of . 
and then reduce the value of . 
by 1. When you get to 0, 
display the word Blastoff!� 

More formally, here is the flow of execution for a whil. 
statement: 

1. Evaluate the condition, yielding Tru. 
or False. 

7.4. brea. 
2. If the condition is false, exit the whil. 
statement and continue execution at the next 
statement. 
3. If the condition is true, execute the body and then go back to step 1. 
This type of flow is called a loop because the third step loops back around to the top. 

The body of the loop should change the value of one or more variables so that eventually
 the condition becomes false and the loop terminates. Otherwise the loop will repeat 
forever, which is called an infinite loop. An endless source of amusement for computer 
scientists is the observation that the directions on shampoo, �Lather, rinse, repeat,� are an 
infinite loop. 

In the case of countdown, we can prove that the loop terminates because we know that the 
value of . 
is finite, and we can see that the value of . 
gets smaller each time through the 
loop, so eventually we have to get to 0. In other cases, it is not so easy to tell: 

de. 
sequence(n). 


whil. 
. 
!. 
1. 


prin. 
n. 


ifn%2==0. 
#niseve. 


. 
. 
n/. 


else. 
. 
. 
i. 
od. 


. 
. 
n*3+. 


The condition for this loop is . 
!. 
1, so the loop will continue until . 
is 1, which makes 
the condition false. 

Each time through the loop, the program outputs the value of . 
and then checks whether 
it is even or odd. If it is even, . 
is divided by 2. If it is odd, the value of . 
is replaced with n*3+1. For example, if the argument passed to sequenc. 
is 3, the resulting sequence is 3, 
10, 5, 16, 8, 4, 2, 1. 

Since . 
sometimes increases and sometimes decreases, there is no obvious proof that . 
will 
ever reach 1, or that the program terminates. For some particular values of n, we can prove 
termination. For example, if the starting value is a power of two, then the value of . 
will be 
even each time through the loop until it reaches 1. The previous example ends with such a 
sequence, starting with 16. 

The hard question is whether we can prove that this program terminates for all positive
 values of n. So far, no one has been able to prove it or disprove it! (See http. 
//en.wikipedia.org/wiki/Collatz_conjecture.) 
Exercise 7.1. Rewrite the function print_. 
from Section 5.8 using iteration instead of recursion. 


7.4 brea. 
Sometimes you don�t know it�s time to end a loop until you get half way through the body. 
In that case you can use the brea. 
statement to jump out of the loop. 

For example, suppose you want to take input from the user until they type done. You could 
write: 


Chapter 7. Iteration 

whil. 
True. 
lin. 
. 
raw_input('. 
'. 
i. 
lin. 
=. 
'done'. 


brea. 
prin. 
lin. 


prin. 
'Done!. 


The loop condition is True, which is always true, so the loop runs until it hits the break 
statement. 

Each time through, it prompts the user with an angle bracket. If the user types done, the brea. 
statement exits the loop. Otherwise the program echoes whatever the user types and 
goes back to the top of the loop. Here�s a sample run: 

. 
no. 
don. 
no. 
don. 
. 
don. 
Done. 


This way of writing whil. 
loops is common because you can check the condition anywhere 
in the loop (not just at the top) and you can express the stop condition affirmatively (�stop 
when this happens�) rather than negatively (�keep going until that happens.�). 

7.5 Square roots 
Loops are often used in programs that compute numerical results by starting with an approximate
 answer and iteratively improving it. 

For example, one way of computing square roots is Newton�s method. Suppose that you 
want to know the square root of a. If you start with almost any estimate, x, you can compute
 a better estimate with the following formula: 

x + 
a/x 

y = 


2 
For example, if a is4 and x is 3: 

>>>a. 
4.. 
>>>x. 
3.. 
>>>y. 
(x. 
a/x). 
. 
>>. 
prin. 
. 
2.1666666666. 


v 


Which is closer to the correct answer ( 4 = 
2). If we repeat the process with the new 
estimate, it gets even closer: 

>>>x. 
. 
>>>y. 
(x. 
a/x). 
. 
>>. 
prin. 
. 
2.0064102564. 


After a few more updates, the estimate is almost exact: 


7.6. Algorithms 
>>>x. 
. 
>>>y. 
(x. 
a/x). 
. 
>>. 
prin. 
. 
2.0000102400. 
>>>x. 
. 
>>>y. 
(x. 
a/x). 
. 
>>. 
prin. 
. 
2.0000000000. 


In general we don�t know ahead of time how many steps it takes to get to the right answer, 
but we know when we get there because the estimate stops changing: 

>>>x. 
. 
>>>y. 
(x. 
a/x). 
. 
>>. 
prin. 
. 
2.. 
>>>x. 
. 
>>>y. 
(x. 
a/x). 
. 
>>. 
prin. 
. 
2.. 


When . 
=. 
x, we can stop. Here is a loop that starts with an initial estimate, x, and improves
 it until it stops changing: 

whil. 
True. 
prin. 
. 
y. 
(x. 
a/x). 
. 
i. 
y=. 
x. 


brea. 
x=. 


For most values of . 
this works fine, but in general it is dangerous to test floa. 
equality. 
Floating-point values are only approximately right: most rational numbers, like 1/3, and 

v 


irrational numbers, like 2, can�t be represented exactly with a float. 

Rather than checking whether . 
and . 
are exactly equal, it is safer to use the built-in function
 ab. 
to compute the absolute value, or magnitude, of the difference between them: 

i. 
abs(y-x. 
. 
epsilon. 
brea. 


Where epsilo. 
has a value like 0.000000. 
that determines how close is close enough. 
Exercise 7.2. Encapsulate this loop in a function called square_roo. 
that takes . 
as a parameter, 
chooses a reasonable value of x, and returns an estimate of the square root of a. 

7.6 Algorithms 
Newton�s method is an example of an algorithm: it is a mechanical process for solving a 
category of problems (in this case, computing square roots). 

It is not easy to define an algorithm. It might help to start with something that is not an 
algorithm. When you learned to multiply single-digit numbers, you probably memorized 
the multiplication table. In effect, you memorized 100 specific solutions. That kind of 
knowledge is not algorithmic. 


Chapter 7. Iteration 

But if you were �lazy,� you probably cheated by learning a few tricks. For example, to 
find the product of n and 9, you can write n . 
1 as the first digit and 10 . 
n as the second 
digit. This trick is a general solution for multiplying any single-digit number by 9. That�s 
an algorithm! 

Similarly, the techniques you learned for addition with carrying, subtraction with borrowing,
 and long division are all algorithms. One of the characteristics of algorithms is that 
they do not require any intelligence to carry out. They are mechanical processes in which 
each step follows from the last according to a simple set of rules. 

In my opinion, it is embarrassing that humans spend so much time in school learning to 
execute algorithms that, quite literally, require no intelligence. 

On the other hand, the process of designing algorithms is interesting, intellectually challenging,
 and a central part of what we call programming. 

Some of the things that people do naturally, without difficulty or conscious thought, are 
the hardest to express algorithmically. Understanding natural language is a good example. 
We all do it, but so far no one has been able to explain how we do it, at least not in the form 
of an algorithm. 

7.7 Debugging 
As you start writing bigger programs, you might find yourself spending more time debugging.
 More code means more chances to make an error and more place for bugs to hide. 

One way to cut your debugging time is �debugging by bisection.� For example, if there 
are 100 lines in your program and you check them one at a time, it would take 100 steps. 

Instead, try to break the problem in half. Look at the middle of the program, or near it, for 
an intermediate value you can check. Add a prin. 
statement (or something else that has a 
verifiable effect) and run the program. 

If the mid-point check is incorrect, there must be a problem in the first half of the program. 
If it is correct, the problem is in the second half. 

Every time you perform a check like this, you halve the number of lines you have to search. 
After six steps (which is fewer than 100), you would be down to one or two lines of code, 
at least in theory. 

In practice it is not always clear what the �middle of the program� is and not always possible
 to check it. It doesn�t make sense to count lines and find the exact midpoint. Instead, 
think about places in the program where there might be errors and places where it is easy 
to put a check. Then choose a spot where you think the chances are about the same that 
the bug is before or after the check. 

7.8 Glossary 
multiple assignment: Making more than one assignment to the same variable during the 
execution of a program. 


7.9. Exercises 
update: An assignment where the new value of the variable depends on the old. 
initialization: An assignment that gives an initial value to a variable that will be updated. 


increment: An update that increases the value of a variable (often by one). 
decrement: An update that decreases the value of a variable. 
iteration: Repeated execution of a set of statements using either a recursive function call 


or a loop. 
infinite loop: A loop in which the terminating condition is never satisfied. 

7.9 Exercises 
Exercise 7.3. To test the square root algorithm in this chapter, you could compare it with 

math.sqrt. Write a function named test_square_roo. 
that prints a table like this: 1.. 
1.. 
1.. 
0.. 
2.. 
1.4142135623. 
1.4142135623. 
2.22044604925e-1. 
3.. 
1.7320508075. 
1.7320508075. 
0.. 
4.. 
2.. 
2.. 
0.. 
5.. 
2.236067977. 
2.236067977. 
0.. 
6.. 
2.4494897427. 
2.4494897427. 
0.. 
7.. 
2.6457513110. 
2.6457513110. 
0.. 
8.. 
2.8284271247. 
2.8284271247. 
4.4408920985e-1. 
9.. 
3.. 
3.. 
0.. 


The first column is a number, a; the second column is the square root of a computed with the function 
from Section 7.5; the third column is the square root computed by math.sqrt; the fourth column is 
the absolute value of the difference between the two estimates. 
Exercise 7.4. The built-in function eva. 
takes a string and evaluates it using the Python interpreter.
 For example: 

>>. 
eval('1+2*3'. 
. 
>>. 
impor. 
mat. 
>>. 
eval('math.sqrt(5)'. 
2.236067977499789. 
>>. 
eval('type(math.pi)'. 
<typ. 
'float'. 


Write a function called eval_loo. 
that iteratively prompts the user, takes the resulting input and 
evaluates it using eval, and prints the result. 


It should continue until the user enters 'done', and then return the value of the last expression it 
evaluated. 
Exercise 7.5. The mathematician Srinivasa Ramanujan found an infinite series that can be used to 
generate a numerical approximation of p: 


v 


1 22

.a

(4k)!(1103 + 
26390k) 


= 


. 
9801 

k=0 

(k!)43964k 


Chapter 7. Iteration 

Write a function called estimate_p. 
that uses this formula to compute and return an estimate of p. It should use a whil. 
loop to compute terms of the summation until the last term is smaller than 1e-1. 
(which is Python notation for 10..15). You can check the result by comparing it to math.pi. 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
pi. 
p. 
. 


Chapter 8 

Strings 

8.1 A string is a sequence 
A string is a sequence of characters. You can access the characters one at a time with the 
bracket operator: 

>>. 
frui. 
. 
'banana. 
>>. 
lette. 
. 
fruit[1. 


The second statement selects character number 1 from frui. 
and assigns it to letter. 
The expression in brackets is called an index. The index indicates which character in the 
sequence you want (hence the name). 


But you might not get what you expect: 


>>. 
prin. 
lette. 
. 


For most people, the first letter of 'banana. 
is b, not a. But for computer scientists, the 
index is an offset from the beginning of the string, and the offset of the first letter is zero. 

>>. 
lette. 
. 
fruit[0. 
>>. 
prin. 
lette. 
. 


So . 
is the 0th letter (�zero-eth�) of 'banana', . 
is the 1th letter (�one-eth�), and . 
is the 2th 
(�two-eth�) letter. 

You can use any expression, including variables and operators, as an index, but the value 
of the index has to be an integer. Otherwise you get: 

>>. 
lette. 
. 
fruit[1.5. 
TypeError. 
strin. 
indice. 
mus. 
b. 
integers. 
no. 
floa. 


8.2 le. 
le. 
is a built-in function that returns the number of characters in a string: 

Chapter 8. Strings 

>>. 
frui. 
. 
'banana. 


>>. 
len(fruit. 


. 


To get the last letter of a string, you might be tempted to try something like this: 

>>. 
lengt. 
. 
len(fruit. 


>>. 
las. 
. 
fruit[length. 


IndexError. 
strin. 
inde. 
ou. 
o. 
rang. 


The reason for the IndexErro. 
is that there is no letter in 'banana. 
with the index 6. Since 
we started counting at zero, the six letters are numbered 0 to 5. To get the last character, 
you have to subtract 1 from length: 

>>. 
las. 
. 
fruit[length-1. 


>>. 
prin. 
las. 


. 


Alternatively, you can use negative indices, which count backward from the end of the 
string. The expression fruit[-1. 
yields the last letter, fruit[-2. 
yields the second to last, 
and so on. 

8.3 Traversal with a fo. 
loop 
A lot of computations involve processing a string one character at a time. Often they start 
at the beginning, select each character in turn, do something to it, and continue until the 
end. This pattern of processing is called a traversal. One way to write a traversal is with a whil. 
loop: 

inde. 
. 
. 


whil. 
inde. 
. 
len(fruit). 


lette. 
. 
fruit[index. 


prin. 
lette. 


inde. 
. 
inde. 
. 
. 


This loop traverses the string and displays each letter on a line by itself. The loop condition 
is inde. 
. 
len(fruit), so when inde. 
is equal to the length of the string, the condition is 
false, and the body of the loop is not executed. The last character accessed is the one with 
the index len(fruit)-1, which is the last character in the string. 

Exercise 8.1. Write a function that takes a string as an argument and displays the letters backward, 
one per line. 

Another way to write a traversal is with a fo. 
loop: 

fo. 
cha. 
i. 
fruit. 


prin. 
cha. 


Each time through the loop, the next character in the string is assigned to the variable char. 
The loop continues until no characters are left. 

The following example shows how to use concatenation (string addition) and a fo. 
loop 
to generate an abecedarian series (that is, in alphabetical order). In Robert McCloskey�s 
book Make Way for Ducklings, the names of the ducklings are Jack, Kack, Lack, Mack, Nack, 
Ouack, Pack, and Quack. This loop outputs these names in order: 


8.4. String slices 
fruitbannaa�
0123456index
�
Figure 8.1: Slice indices. 

prefixe. 
. 
'JKLMNOPQ. 
suffi. 
. 
'ack. 


fo. 
lette. 
i. 
prefixes. 
prin. 
lette. 
. 
suffi. 


The output is: 

Jac. 
Kac. 
Lac. 
Mac. 
Nac. 
Oac. 
Pac. 
Qac. 


Of course, that�s not quite right because �Ouack� and �Quack� are misspelled. 

Exercise 8.2. Modify the program to fix this error. 

8.4 String slices 
A segment of a string is called a slice. Selecting a slice is similar to selecting a character: 

>>. 
. 
. 
'Mont. 
Python. 
>>. 
prin. 
s[0:5. 
Mont. 
>>. 
prin. 
s[6:12. 
Pytho. 


The operator [n:m. 
returns the part of the string from the �n-eth� character to the �m-eth� 
character, including the first but excluding the last. This behavior is counterintuitive, but 
it might help to imagine the indices pointing between the characters, as in Figure 8.1. 

If you omit the first index (before the colon), the slice starts at the beginning of the string. 
If you omit the second index, the slice goes to the end of the string: 

>>. 
frui. 
. 
'banana. 
>>. 
fruit[:3. 
'ban. 
>>. 
fruit[3:. 
'ana. 


If the first index is greater than or equal to the second the result is an empty string, represented
 by two quotation marks: 

>>. 
frui. 
. 
'banana. 
>>. 
fruit[3:3. 


'. 



Chapter 8. Strings 

An empty string contains no characters and has length 0, but other than that, it is the same 
as any other string. 

Exercise 8.3. Given that frui. 
is a string, what does fruit[:. 
mean? 

8.5 Strings are immutable 
It is tempting to use the [. 
operator on the left side of an assignment, with the intention of 
changing a character in a string. For example: 

>>. 
greetin. 
. 
'Hello. 
world!. 


>>. 
greeting[0. 
. 
'J. 


TypeError. 
'str. 
objec. 
doe. 
no. 
suppor. 
ite. 
assignmen. 


The �object� in this case is the string and the �item� is the character you tried to assign. For 
now, an object is the same thing as a value, but we will refine that definition later. An item 
is one of the values in a sequence. 

The reason for the error is that strings are immutable, which means you can�t change an 
existing string. The best you can do is create a new string that is a variation on the original: 

>>. 
greetin. 
. 
'Hello. 
world!. 


>>. 
new_greetin. 
. 
'J. 
. 
greeting[1:. 


>>. 
prin. 
new_greetin. 


Jello. 
world. 


This example concatenates a new first letter onto a slice of greeting. It has no effect on the 
original string. 

8.6 Searching 
What does the following function do? 

de. 
find(word. 
letter). 


inde. 
. 
. 


whil. 
inde. 
. 
len(word). 


i. 
word[index. 
=. 
letter. 


retur. 
inde. 


inde. 
. 
inde. 
. 
. 


retur. 
-. 


In a sense, fin. 
is the opposite of the [. 
operator. Instead of taking an index and extracting 
the corresponding character, it takes a character and finds the index where that character 
appears. If the character is not found, the function returns -1. 

This is the first example we have seen of a retur. 
statement inside a loop. If word[index. 
=. 
letter, the function breaks out of the loop and returns immediately. 

If the character doesn�t appear in the string, the program exits the loop normally and returns
 -1. 

This pattern of computation�traversing a sequence and returning when we find what we 
are looking for�is called a search. 
Exercise 8.4. Modify fin. 
so that it has a third parameter, the index in wor. 
where it should start 
looking. 



8.7. Looping and counting 
8.7 Looping and counting 
The following program counts the number of times the letter . 
appears in a string: 

wor. 
. 
'banana. 
coun. 
. 
. 
fo. 
lette. 
i. 
word. 


i. 
lette. 
=. 
'a'. 
coun. 
. 
coun. 
. 
. 
prin. 
coun. 


This program demonstrates another pattern of computation called a counter. The variable 
coun. 
is initialized to 0 and then incremented each time an . 
is found. When the loop exits, 
coun. 
contains the result�the total number of a�s. 
Exercise 8.5. Encapsulate this code in a function named count, and generalize it so that it accepts 
the string and the letter as arguments. 
Exercise 8.6. Rewrite this function so that instead of traversing the string, it uses the three-
parameter version of fin. 
from the previous section. 


8.8 String methods 
A method is similar to a function�it takes arguments and returns a value�but the syntax 
is different. For example, the method uppe. 
takes a string and returns a new string with all 
uppercase letters: 

Instead of the function syntax upper(word), it uses the method syntax word.upper(). >>. 
wor. 
. 
'banana. 
>>. 
new_wor. 
. 
word.upper(. 
>>. 
prin. 
new_wor. 
BANAN. 


This form of dot notation specifies the name of the method, upper, and the name of the 
string to apply the method to, word. The empty parentheses indicate that this method 
takes no argument. 

A method call is called an invocation; in this case, we would say that we are invoking uppe. 
on the word. 

As it turns out, there is a string method named fin. 
that is remarkably similar to the 
function we wrote: 

>>. 
wor. 
. 
'banana. 
>>. 
inde. 
. 
word.find('a'. 
>>. 
prin. 
inde. 
. 


In this example, we invoke fin. 
on wor. 
and pass the letter we are looking for as a parameter.
 

Actually, the fin. 
method is more general than our function; it can find substrings, not just 
characters: 

>>. 
word.find('na'. 
. 



Chapter 8. Strings 

It can take as a second argument the index where it should start: 

>>. 
word.find('na'. 
3. 
. 


And as a third argument the index where it should stop: 

>>. 
nam. 
. 
'bob. 
>>. 
name.find('b'. 
1. 
2. 
-. 


This search fails because . 
does not appear in the index range from . 
to . 
(not including 2). 
Exercise 8.7. There is a string method called coun. 
that is similar to the function in the previous 
exercise. Read the documentation of this method and write an invocation that counts the number of as in 'banana'. 
Exercise 8.8. Read the documentation of the string methods at http. 
/. 
docs. 
python. 
org. 
2. 
library. 
stdtypes. 
html. 
string. 
method. 
. You might want to experiment with some of them 
to make sure you understand how they work. stri. 
and replac. 
are particularly useful. 

The documentation uses a syntax that might be confusing. For example, in find(sub[. 
start[. 
end]]), the brackets indicate optional arguments. So su. 
is required, but star. 
is optional, and if you include start, then en. 
is optional. 

8.9 The i. 
operator 
The word i. 
is a boolean operator that takes two strings and returns Tru. 
if the first appears
 as a substring in the second: 

>>. 
'a. 
i. 
'banana. 
Tru. 
>>. 
'seed. 
i. 
'banana. 
Fals. 


For example, the following function prints all the letters from word. 
that also appear in word2: de. 
in_both(word1. 
word2). 
fo. 
lette. 
i. 
word1. 
i. 
lette. 
i. 
word2. 
prin. 
lette. 


With well-chosen variable names, Python sometimes reads like English. You could read 
this loop, �for (each) letter in (the first) word, if (the) letter (appears) in (the second) word, 
print (the) letter.� 

Here�s what you get if you compare apples and oranges: 

>>. 
in_both('apples'. 
'oranges'. 
. 
. 
. 


8.10 String comparison 
The relational operators work on strings. To see if two strings are equal: 


8.11. Debugging 
i. 
wor. 
=. 
'banana'. 
prin. 
'Al. 
right. 
bananas.. 


Other relational operations are useful for putting words in alphabetical order: 

i. 
wor. 
. 
'banana'. 


prin. 
'You. 
word,. 
. 
wor. 
. 
'. 
come. 
befor. 
banana.. 
eli. 
wor. 
. 
'banana'. 


prin. 
'You. 
word,. 
. 
wor. 
. 
'. 
come. 
afte. 
banana.. 
else. 


prin. 
'Al. 
right. 
bananas.. 


Python does not handle uppercase and lowercase letters the same way that people do. All 
the uppercase letters come before all the lowercase letters, so: 

You. 
word. 
Pineapple. 
come. 
befor. 
banana. 


A common way to address this problem is to convert strings to a standard format, such as 
all lowercase, before performing the comparison. Keep that in mind in case you have to 
defend yourself against a man armed with a Pineapple. 

8.11 Debugging 
When you use indices to traverse the values in a sequence, it is tricky to get the beginning 
and end of the traversal right. Here is a function that is supposed to compare two words 
and return Tru. 
if one of the words is the reverse of the other, but it contains two errors: 

de. 
is_reverse(word1. 
word2). 
i. 
len(word1. 
!. 
len(word2). 
retur. 
Fals. 


i=. 
. 
. 
len(word2. 


whil. 
. 
. 
0. 


i. 
word1[i. 
!. 
word2[j]. 


retur. 
Fals. 


. 
. 
i+. 


. 
. 
j-. 


retur. 
Tru. 
The first i. 
statement checks whether the words are the same length. If not, we can return Fals. 
immediately and then, for the rest of the function, we can assume that the words are 
the same length. This is an example of the guardian pattern in Section 6.8. 

. 
and . 
are indices: . 
traverses word. 
forward while . 
traverses word. 
backward. If we 
find two letters that don�t match, we can return Fals. 
immediately. If we get through the 
whole loop and all the letters match, we return True. 

If we test this function with the words �pots� and �stop�, we expect the return value True, 
but we get an IndexError: 

>>. 
is_reverse('pots'. 
'stop'. 
... 



Chapter 8. Strings 

i0j3word1�pots�word2�stop�
Figure 8.2: State diagram. 

Fil. 
"reverse.py". 
lin. 
15. 
i. 
is_revers. 
i. 
word1[i. 
!. 
word2[j]. 
IndexError. 
strin. 
inde. 
ou. 
o. 
rang. 


For debugging this kind of error, my first move is to print the values of the indices immediately
 before the line where the error appears. 

whil. 
. 
. 
0. 
prin. 
i. 
. 
. 
prin. 
her. 


i. 
word1[i. 
!. 
word2[j]. 


retur. 
Fals. 
. 
. 
i+. 
. 
. 
j-. 


Now when I run the program again, I get more information: 

>>. 
is_reverse('pots'. 
'stop'. 
0. 
... 
IndexError. 
strin. 
inde. 
ou. 
o. 
rang. 


The first time through the loop, the value of . 
is 4, which is out of range for the 
string 'pots'. The index of the last character is 3, so the initial value for . 
should be len(word2)-1. 

If I fix that error and run the program again, I get: 

>>. 
is_reverse('pots'. 
'stop'. 
0. 
1. 
2. 
Tru. 


This time we get the right answer, but it looks like the loop only ran three times, which is 
suspicious. To get a better idea of what is happening, it is useful to draw a state diagram. 
During the first iteration, the frame for is_revers. 
is shows in Figure 8.2. 

I took a little license by arranging the variables in the frame and adding dotted lines to 
show that the values of . 
and . 
indicate characters in word. 
and word2. 
Exercise 8.9. Starting with this diagram, execute the program on paper, changing the values of . 
and . 
during each iteration. Find and fix the second error in this function. 


8.12 Glossary 
object: Something a variable can refer to. For now, you can use �object� and �value� 
interchangeably. 


8.13. Exercises 
sequence: An ordered set; that is, a set of values where each value is identified by an 
integer index. 
item: One of the values in a sequence. 
index: An integer value used to select an item in a sequence, such as a character in a string. 

slice: A part of a string specified by a range of indices. 
empty string: A string with no characters and length 0, represented by two quotation 


marks. 
immutable: The property of a sequence whose items cannot be assigned. 
traverse: To iterate through the items in a sequence, performing a similar operation on 

each. 
search: A pattern of traversal that stops when it finds what it is looking for. 
counter: A variable used to count something, usually initialized to zero and then incre


mented. 
method: A function that is associated with an object and called using dot notation. 
invocation: A statement that calls a method. 

8.13 Exercises 
Exercise 8.10. A string slice can take a third index that specifies the �step size;� that is, the number 
of spaces between successive characters. A step size of 2 means every other character; 3 means every 
third, etc. 

>>. 
frui. 
. 
'banana. 
>>. 
fruit[0:5:2. 
'bnn. 


A step size of -1 goes through the word backwards, so the slice [::-1. 
generates a reversed string. 

Use this idiom to write a one-line version of is_palindrom. 
from Exercise 6.6. 
Exercise 8.11. The following functions are all intended to check whether a string contains any 
lowercase letters, but at least some of them are wrong. For each function, describe what the function 
actually does (assuming that the parameter is a string). 


de. 
any_lowercase1(s). 
fo. 
. 
ins. 
i. 
c.islower(). 
retur. 
Tru. 
else. 
retur. 
Fals. 


de. 
any_lowercase2(s). 
fo. 
. 
ins. 
i. 
'c'.islower(). 
retur. 
'True. 



Chapter 8. Strings 

else. 
retur. 
'False. 


de. 
any_lowercase3(s). 
fo. 
. 
ins. 
fla. 
. 
c.islower(. 
retur. 
fla. 


de. 
any_lowercase4(s). 
fla. 
. 
Fals. 
fo. 
. 
ins. 


fla. 
. 
fla. 
o. 
c.islower(. 
retur. 
fla. 


de. 
any_lowercase5(s). 
fo. 
. 
ins. 
i. 
no. 
c.islower(). 
retur. 
Fals. 
retur. 
Tru. 


Exercise 8.12. ROT13 is a weak form of encryption that involves �rotating� each letter in a word 
by 13 places. To rotate a letter means to shift it through the alphabet, wrapping around to the 
beginning if necessary, so �A� shifted by 3 is �D� and �Z� shifted by 1 is �A�. 

Write a function called rotate_wor. 
that takes a string and an integer as parameters, and that 
returns a new string that contains the letters from the original string �rotated� by the given amount. 

For example, �cheer� rotated by 7 is �jolly� and �melon� rotated by -10 is �cubed�. 

You might want to use the built-in functions ord, which converts a character to a numeric code, 
and chr, which converts numeric codes to characters. 

Potentially offensive jokes on the Internet are sometimes encoded in ROT13. If you are not easily 
offended, find and decode some of them. Solution: http. 
/. 
thinkpython. 
com. 
code. 
rotate. 
p. 
. 


Chapter 9 

Case study: word play 

9.1 Reading word lists 
For the exercises in this chapter we need a list of English words. There are lots of word 
lists available on the Web, but the one most suitable for our purpose is one of the word lists 
collected and contributed to the public domain by Grady Ward as part of the Moby lexicon
 project (see http://wikipedia.org/wiki/Moby_Project). It is a list of 113,809 official 
crosswords; that is, words that are considered valid in crossword puzzles and other word 
games. In the Moby collection, the filename is 113809of.fic; you can download a copy, 
with the simpler name words.txt, from http://thinkpython.com/code/words.txt. 

This file is in plain text, so you can open it with a text editor, but you can also read it from 
Python. The built-in function ope. 
takes the name of the file as a parameter and returns a 
file object you can use to read the file. 

>>. 
fi. 
. 
open('words.txt'. 


>>. 
prin. 
fi. 


<ope. 
fil. 
'words.txt'. 
mod. 
'r. 
a. 
0xb7f4b380. 


fi. 
is a common name for a file object used for input. Mode 'r. 
indicates that this file is 
open for reading (as opposed to 'w. 
for writing). 

The file object provides several methods for reading, including readline, which reads 
characters from the file until it gets to a newline and returns the result as a string: 

>>. 
fin.readline(. 


'aa\r\n. 


The first word in this particular list is �aa,� which is a kind of lava. The sequence \r\. 
represents two whitespace characters, a carriage return and a newline, that separate this 
word from the next. 

The file object keeps track of where it is in the file, so if you call readlin. 
again, you get 
the next word: 

>>. 
fin.readline(. 


'aah\r\n. 


The next word is �aah,� which is a perfectly legitimate word, so stop looking at me like 
that. Or, if it�s the whitespace that�s bothering you, we can get rid of it with the string 
method strip: 


Chapter 9. Case study: word play 

>>. 
lin. 
. 
fin.readline(. 


>>. 
wor. 
. 
line.strip(. 


>>. 
prin. 
wor. 


aahe. 


You can also use a file object as part of a fo. 
loop. This program reads words.tx. 
and 
prints each word, one per line: 

fi. 
. 
open('words.txt'. 


fo. 
lin. 
i. 
fin. 


wor. 
. 
line.strip(. 


prin. 
wor. 
Exercise 9.1. Write a program that reads words.tx. 
and prints only the words with more than 20 
characters (not counting whitespace). 

9.2 Exercises 
There are solutions to these exercises in the next section. You should at least attempt each 
one before you read the solutions. 
Exercise 9.2. In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that 
does not contain the letter �e.� Since �e� is the most common letter in English, that�s not easy to 
do. 


In fact, it is difficult to construct a solitary thought without using that most common symbol. It is 
slow going at first, but with caution and hours of training you can gradually gain facility. 


All right, I�ll stop now. 


Write a function called has_no_. 
that returns Tru. 
if the given word doesn�t have the letter �e� in 
it. 


Modify your program from the previous section to print only the words that have no �e� and compute
 the percentage of the words in the list have no �e.� 
Exercise 9.3. Write a function named avoid. 
that takes a word and a string of forbidden letters, 
and that returns Tru. 
if the word doesn�t use any of the forbidden letters. 


Modify your program to prompt the user to enter a string of forbidden letters and then print the 
number of words that don�t contain any of them. Can you find a combination of 5 forbidden letters 
that excludes the smallest number of words? 
Exercise 9.4. Write a function named uses_onl. 
that takes a word and a string of letters, and 
that returns Tru. 
if the word contains only letters in the list. Can you make a sentence using only 
the letters acefhlo? Other than �Hoe alfalfa?� 
Exercise 9.5. Write a function named uses_al. 
that takes a word and a string of required letters, 
and that returns Tru. 
if the word uses all the required letters at least once. How many words are 
there that use all the vowels aeiou? How about aeiouy? 
Exercise 9.6. Write a function called is_abecedaria. 
that returns Tru. 
if the letters in a word 
appear in alphabetical order (double letters are ok). How many abecedarian words are there? 


9.3 Search 
All of the exercises in the previous section have something in common; they can be solved 
with the search pattern we saw in Section 8.6. The simplest example is: 


9.4. Looping with indices 
de. 
has_no_e(word). 
fo. 
lette. 
i. 
word. 
i. 
lette. 
=. 
'e'. 
retur. 
Fals. 


retur. 
Tru. 
The fo. 
loop traverses the characters in word. If we find the letter �e�, we can immediately 
return False; otherwise we have to go to the next letter. If we exit the loop normally, that 
means we didn�t find an �e�, so we return True. 

avoid. 
is a more general version of has_no_. 
but it has the same structure: de. 
avoids(word. 
forbidden). 
fo. 
lette. 
i. 
word. 
i. 
lette. 
i. 
forbidden. 
retur. 
Fals. 
retur. 
Tru. 
We can return Fals. 
as soon as we find a forbidden letter; if we get to the end of the loop, 
we return True. 

uses_onl. 
is similar except that the sense of the condition is reversed: de. 
uses_only(word. 
available). 
fo. 
lette. 
i. 
word. 
i. 
lette. 
no. 
i. 
available. 
retur. 
Fals. 
retur. 
Tru. 


Instead of a list of forbidden letters, we have a list of available letters. If we find a letter in wor. 
that is not in available, we can return False. 

uses_al. 
is similar except that we reverse the role of the word and the string of letters: de. 
uses_all(word. 
required). 
fo. 
lette. 
i. 
required. 
i. 
lette. 
no. 
i. 
word. 
retur. 
Fals. 
retur. 
Tru. 
Instead of traversing the letters in word, the loop traverses the required letters. If any of the 
required letters do not appear in the word, we can return False. 

If you were really thinking like a computer scientist, you would have recognized that uses_al. 
was an instance of a previously-solved problem, and you would have written: de. 
uses_all(word. 
required). 


retur. 
uses_only(required. 
word. 


This is an example of a program development method called problem recognition, which 
means that you recognize the problem you are working on as an instance of a previously-
solved problem, and apply a previously-developed solution. 

9.4 Looping with indices 
I wrote the functions in the previous section with fo. 
loops because I only needed the 
characters in the strings; I didn�t have to do anything with the indices. 


Chapter 9. Case study: word play 

For is_abecedaria. 
we have to compare adjacent letters, which is a little tricky with a fo. 
loop: 

de. 
is_abecedarian(word). 
previou. 
. 
word[0. 
fo. 
. 
i. 
word. 


i. 
. 
. 
previous. 
retur. 
Fals. 
previou. 
. 
. 
retur. 
Tru. 


An alternative is to use recursion: 

de. 
is_abecedarian(word). 
i. 
len(word. 
<. 
1. 
retur. 
Tru. 
i. 
word[0. 
. 
word[1]. 
retur. 
Fals. 
retur. 
is_abecedarian(word[1:]. 
Another option is to use a whil. 
loop: 

de. 
is_abecedarian(word). 
i=. 
whil. 
. 
. 
len(word)-1. 


i. 
word[i+1. 
. 
word[i]. 
retur. 
Fals. 
. 
. 
i+. 


retur. 
Tru. 
The loop starts at i=. 
and ends when i=len(word)-1. Each time through the loop, it compares
 the ith character (which you can think of as the current character) to the i + 
1th 
character (which you can think of as the next). 

If the next character is less than (alphabetically before) the current one, then we have discovered
 a break in the abecedarian trend, and we return False. 

If we get to the end of the loop without finding a fault, then the word passes the test. To 
convince yourself that the loop ends correctly, consider an example like 'flossy'. The 
length of the word is 6, so the last time the loop runs is when . 
is 4, which is the index of 
the second-to-last character. On the last iteration, it compares the second-to-last character 
to the last, which is what we want. 

Here is a version of is_palindrom. 
(see Exercise 6.6) that uses two indices; one starts at 
the beginning and goes up; the other starts at the end and goes down. 

de. 
is_palindrome(word). 
i=. 
. 
. 
len(word)-. 


whil. 
i<j. 
i. 
word[i. 
!. 
word[j]. 


retur. 
Fals. 
. 
. 
i+. 
. 
. 
j-. 


retur. 
Tru. 



9.5. Debugging 
Or, if you noticed that this is an instance of a previously-solved problem, you might have 
written: 

de. 
is_palindrome(word). 


retur. 
is_reverse(word. 
word. 


Assuming you did Exercise 8.9. 

9.5 Debugging 
Testing programs is hard. The functions in this chapter are relatively easy to test because 
you can check the results by hand. Even so, it is somewhere between difficult and impossible
 to choose a set of words that test for all possible errors. 

Taking has_no_. 
as an example, there are two obvious cases to check: words that have an 
�e� should return False; words that don�t should return True. You should have no trouble 
coming up with one of each. 

Within each case, there are some less obvious subcases. Among the words that have an 
�e,� you should test words with an �e� at the beginning, the end, and somewhere in the 
middle. You should test long words, short words, and very short words, like the empty 
string. The empty string is an example of a special case, which is one of the non-obvious 
cases where errors often lurk. 

In addition to the test cases you generate, you can also test your program with a word list 
like words.txt. By scanning the output, you might be able to catch errors, but be careful: 
you might catch one kind of error (words that should not be included, but are) and not 
another (words that should be included, but aren�t). 

In general, testing can help you find bugs, but it is not easy to generate a good set of test 
cases, and even if you do, you can�t be sure your program is correct. 

According to a legendary computer scientist: 

Program testing can be used to show the presence of bugs, but never to show 

their absence! 

� Edsger W. Dijkstra 
9.6 Glossary 
file object: A value that represents an open file. 

problem recognition: A way of solving a problem by expressing it as an instance of a 
previously-solved problem. 

special case: A test case that is atypical or non-obvious (and less likely to be handled correctly).
 


Chapter 9. Case study: word play 

9.7 Exercises 
Exercise 9.7. This question is based on a Puzzler that was broadcast on the radio program Car 
Talk (http. 
/. 
www. 
cartalk. 
com. 
content. 
puzzler. 
): 

Give me a word with three consecutive double letters. I�ll give you a couple of words 
that almost qualify, but don�t. For example, the word committee, c-o-m-m-i-t-t-e-e. It 
would be great except for the �i� that sneaks in there. Or Mississippi: M-i-s-s-i-s-s-ip-
p-i. If you could take out those i�s it would work. But there is a word that has three 
consecutive pairs of letters and to the best of my knowledge this may be the only word. 
Of course there are probably 500 more but I can only think of one. What is the word? 

Write a program to find it. Solution: http. 
/. 
thinkpython. 
com. 
code. 
cartalk1. 
p. 
. 
Exercise 9.8. Here�s another Car Talk Puzzler (http. 
/. 
www. 
cartalk. 
com. 
content. 
puzzler. 
): 

�I was driving on the highway the other day and I happened to notice my odometer. 
Like most odometers, it shows six digits, in whole miles only. So, if my car had 300,000 
miles, for example, I�d see 3-0-0-0-0-0. 

�Now, what I saw that day was very interesting. I noticed that the last 4 digits were 
palindromic; that is, they read the same forward as backward. For example, 5-4-4-5 is a 
palindrome, so my odometer could have read 3-1-5-4-4-5. 

�One mile later, the last 5 numbers were palindromic. For example, it could have read 
3-6-5-4-5-6. One mile after that, the middle 4 out of 6 numbers were palindromic. And 
you ready for this? One mile later, all 6 were palindromic! 

�The question is, what was on the odometer when I first looked?� 

Write a Python program that tests all the six-digit numbers and prints any numbers that satisfy 
these requirements. Solution: http. 
/. 
thinkpython. 
com. 
code. 
cartalk2. 
p. 
. 
Exercise 9.9. Here�s another Car Talk Puzzler you can solve with a search (http. 
/. 
www. 
cartalk. 
com. 
content. 
puzzler. 
): 


�Recently I had a visit with my mom and we realized that the two digits that make 
up my age when reversed resulted in her age. For example, if she�s 73, I�m 37. We 
wondered how often this has happened over the years but we got sidetracked with other 
topics and we never came up with an answer. 

�When I got home I figured out that the digits of our ages have been reversible six times 
so far. I also figured out that if we�re lucky it would happen again in a few years, and 
if we�re really lucky it would happen one more time after that. In other words, it would 
have happened 8 times over all. So the question is, how old am I now?� 

Write a Python program that searches for solutions to this Puzzler. Hint: you might find the string 
method zfil. 
useful. 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
cartalk3. 
p. 
. 


Chapter 10 

Lists 

10.1 A list is a sequence 
Like a string, a list is a sequence of values. In a string, the values are characters; in a list, 
they can be any type. The values in a list are called elements or sometimes items. 

There are several ways to create a new list; the simplest is to enclose the elements in square 
brackets (. 
and ]): 

[10. 
20. 
30. 
40. 


['crunch. 
frog'. 
'ra. 
bladder'. 
'lar. 
vomit'. 


The first example is a list of four integers. The second is a list of three strings. The elements 
of a list don�t have to be the same type. The following list contains a string, a float, an 
integer, and (lo!) another list: 

['spam'. 
2.0. 
5. 
[10. 
20]. 


A list within another list is nested. 

A list that contains no elements is called an empty list; you can create one with empty 
brackets, []. 

As you might expect, you can assign list values to variables: 

>>. 
cheese. 
. 
['Cheddar'. 
'Edam'. 
'Gouda'. 


>>. 
number. 
. 
[17. 
123. 


>>. 
empt. 
. 
[. 


>>. 
prin. 
cheeses. 
numbers. 
empt. 


['Cheddar'. 
'Edam'. 
'Gouda'. 
[17. 
123. 
[. 


10.2 Lists are mutable 
The syntax for accessing the elements of a list is the same as for accessing the characters 
of a string�the bracket operator. The expression inside the brackets specifies the index. 
Remember that the indices start at 0: 

>>. 
prin. 
cheeses[0. 


Chedda. 



Chapter 10. Lists 

01listnumbers171235listempty012
�Cheddar�
�Edam�
�Gouda�
listcheeses
Figure 10.1: State diagram. 

Unlike strings, lists are mutable. When the bracket operator appears on the left side of an 
assignment, it identifies the element of the list that will be assigned. 

>>. 
number. 
. 
[17. 
123. 
>>. 
numbers[1. 
. 
. 
>>. 
prin. 
number. 
[17. 
5. 


The one-eth element of numbers, which used to be 123, is now 5. 

You can think of a list as a relationship between indices and elements. This relationship is 
called a mapping; each index �maps to� one of the elements. Figure 10.1 shows the state 
diagram for cheeses, number. 
and empty: 

Lists are represented by boxes with the word �list� outside and the elements of the list 
inside. cheese. 
refers to a list with three elements indexed 0, 1 and 2. number. 
contains 
two elements; the diagram shows that the value of the second element has been reassigned 
from 123 to 5. empt. 
refers to a list with no elements. 

List indices work the same way as string indices: 

� Any integer expression can be used as an index. 
� If you try to read or write an element that does not exist, you get an IndexError. 
� If an index has a negative value, it counts backward from the end of the list. 
The i. 
operator also works on lists. 

>>. 
cheese. 
. 
['Cheddar'. 
'Edam'. 
'Gouda'. 
>>. 
'Edam. 
i. 
cheese. 
Tru. 
>>. 
'Brie. 
i. 
cheese. 
Fals. 



10.3. Traversing a list 
10.3 Traversing a list 
The most common way to traverse the elements of a list is with a fo. 
loop. The syntax is 
the same as for strings: 

fo. 
chees. 
i. 
cheeses. 
prin. 
chees. 


This works well if you only need to read the elements of the list. But if you want to write 
or update the elements, you need the indices. A common way to do that is to combine the 
functions rang. 
and len: 

fo. 
. 
i. 
range(len(numbers)). 
numbers[i. 
. 
numbers[i. 
. 
. 


This loop traverses the list and updates each element. le. 
returns the number of elements 
in the list. rang. 
returns a list of indices from 0 to n . 
1, where n is the length of the list. 
Each time through the loop . 
gets the index of the next element. The assignment statement 
in the body uses . 
to read the old value of the element and to assign the new value. 

A fo. 
loop over an empty list never executes the body: 

fo. 
. 
i. 
[]. 
prin. 
'Thi. 
neve. 
happens.. 


Although a list can contain another list, the nested list still counts as a single element. The 
length of this list is four: 

['spam',1. 
['Brie'. 
'Roquefort'. 
'Po. 
l. 
Veq']. 
[1. 
2. 
3]. 


10.4 List operations 
The . 
operator concatenates lists: 

>>>a. 
[1. 
2. 
3. 
>>>b. 
[4. 
5. 
6. 
>>>c. 
. 
. 
. 
>>. 
prin. 
. 
[1,2. 
3. 
4. 
5,6. 


Similarly, the . 
operator repeats a list a given number of times: 

>>>[0. 
. 
. 
[0,0. 
0. 
0. 
>>>[1. 
2,3. 
*. 
[1,2. 
3. 
1. 
2,3. 
1. 
2. 
3. 


The first example repeats [0. 
four times. The second example repeats the list [1. 
2. 
3. 
three times. 

10.5 List slices 
The slice operator also works on lists: 


Chapter 10. Lists 

>>>t. 
['a'. 
'b'. 
'c'. 
'd'. 
'e'. 
'f'. 
>>. 
t[1:3. 
['b'. 
'c'. 
>>. 
t[:4. 
['a'. 
'b'. 
'c'. 
'd'. 
>>. 
t[3:. 
['d'. 
'e'. 
'f'. 


If you omit the first index, the slice starts at the beginning. If you omit the second, the slice 
goes to the end. So if you omit both, the slice is a copy of the whole list. 

>>. 
t[:. 
['a'. 
'b'. 
'c'. 
'd'. 
'e'. 
'f'. 


Since lists are mutable, it is often useful to make a copy before performing operations that 
fold, spindle or mutilate lists. 

A slice operator on the left side of an assignment can update multiple elements: 

>>>t. 
['a'. 
'b'. 
'c'. 
'd'. 
'e'. 
'f'. 
>>. 
t[1:3. 
. 
['x'. 
'y'. 
>>. 
prin. 
. 
['a'. 
'x'. 
'y'. 
'd'. 
'e'. 
'f'. 


10.6 List methods 
Python provides methods that operate on lists. For example, appen. 
adds a new element 
to the end of a list: 

>>>t. 
['a'. 
'b'. 
'c'. 
>>. 
t.append('d'. 
>>. 
prin. 
. 
['a'. 
'b'. 
'c'. 
'd'. 


exten. 
takes a list as an argument and appends all of the elements: 

>>>t. 
=['a'. 
'b'. 
'c'. 
>>>t. 
=['d'. 
'e'. 
>>. 
t1.extend(t2. 
>>. 
prin. 
t. 
['a'. 
'b'. 
'c'. 
'd'. 
'e'. 


This example leaves t. 
unmodified. 

sor. 
arranges the elements of the list from low to high: 

>>>t. 
['d'. 
'c'. 
'e'. 
'b'. 
'a'. 
>>. 
t.sort(. 
>>. 
prin. 
. 
['a'. 
'b'. 
'c'. 
'd'. 
'e'. 


List methods are all void; they modify the list and return None. If you accidentally write . 
. 
t.sort(), you will be disappointed with the result. 


10.7. Map, filter and reduce 
10.7 Map, filter and reduce 
To add up all the numbers in a list, you can use a loop like this: 

de. 
add_all(t). 


tota. 
. 
. 


fo. 
. 
int. 


tota. 
+. 
. 


retur. 
tota. 


tota. 
is initialized to 0. Each time through the loop, . 
gets one element from the list. 
The +. 
operator provides a short way to update a variable. This augmented assignment 
statement: 

tota. 
+. 
. 


is equivalent to: 

tota. 
. 
tota. 
. 
. 


As the loop executes, tota. 
accumulates the sum of the elements; a variable used this way 
is sometimes called an accumulator. 

Adding up the elements of a list is such a common operation that Python provides it as a 
built-in function, sum: 

>>>t. 
[1. 
2. 
3. 


>>. 
sum(t. 


. 


An operation like this that combines a sequence of elements into a single value is sometimes
 called reduce. 
Exercise 10.1. Write a function called nested_su. 
that takes a nested list of integers and add up 
the elements from all of the nested lists. 


Sometimes you want to traverse one list while building another. For example, the following 
function takes a list of strings and returns a new list that contains capitalized strings: 

de. 
capitalize_all(t). 


re. 
. 
[. 


fo. 
. 
int. 


res.append(s.capitalize(). 


retur. 
re. 


re. 
is initialized with an empty list; each time through the loop, we append the next element.
 So re. 
is another kind of accumulator. 
An operation like capitalize_al. 
is sometimes called a map because it �maps� a function 
(in this case the method capitalize) onto each of the elements in a sequence. 
Exercise 10.2. Use capitalize_al. 
to write a function named capitalize_neste. 
that takes 
a nested list of strings and returns a new nested list with all strings capitalized. 


Another common operation is to select some of the elements from a list and return a sublist. 
For example, the following function takes a list of strings and returns a list that contains 
only the uppercase strings: 


de. 
only_upper(t). 


re. 
. 
[. 


fo. 
. 
int. 



Chapter 10. Lists 

i. 
s.isupper(). 
res.append(s. 
retur. 
re. 
isuppe. 
is a string method that returns Tru. 
if the string contains only upper case letters. 

An operation like only_uppe. 
is called a filter because it selects some of the elements and 
filters out the others. 

Most common list operations can be expressed as a combination of map, filter and reduce. 
Because these operations are so common, Python provides language features to support 
them, including the built-in function ma. 
and an operator called a �list comprehension.� 

Exercise 10.3. Write a function that takes a list of numbers and returns the cumulative sum; that 
is, a new list where the ith element is the sum of the first i + 
1 elements from the original list. For 
example, the cumulative sum of [1. 
2. 
3. 
is [1. 
3. 
6]. 

10.8 Deleting elements 
There are several ways to delete elements from a list. If you know the index of the element 

you want, you can use pop: >>>t. 
['a'. 
'b'. 
'c'. 
>>. 
. 
. 
t.pop(1. 
>>. 
prin. 
. 
['a'. 
'c'. 
>>. 
prin. 
. 
. 


po. 
modifies the list and returns the element that was removed. If you don�t provide an 
index, it deletes and returns the last element. 
If you don�t need the removed value, you can use the de. 
operator: >>>t. 
['a'. 
'b'. 
'c'. 
>>. 
de. 
t[1. 


>>. 
prin. 
. 
['a'. 
'c'. 
If you know the element you want to remove (but not the index), you can use remove: >>>t. 
['a'. 
'b'. 
'c'. 


>>. 
t.remove('b'. 
>>. 
prin. 
. 
['a'. 
'c'. 


The return value from remov. 
is None. 

To remove more than one element, you can use de. 
with a slice index: >>>t. 
['a'. 
'b'. 
'c'. 
'd'. 
'e'. 
'f'. 
>>. 
de. 
t[1:5. 
>>. 
prin. 
. 
['a'. 
'f'. 


As usual, the slice selects all the elements up to, but not including, the second index. 

Exercise 10.4. Write a function called middl. 
that takes a list and returns a new list that contains 
all but the first and last elements. So middle([1,2,3,4]. 
should return [2,3]. 
Exercise 10.5. Write a function called cho. 
that takes a list, modifies it by removing the first and 
last elements, and returns None. 



10.9. Lists and strings 
10.9 Lists and strings 
A string is a sequence of characters and a list is a sequence of values, but a list of characters 
is not the same as a string. To convert from a string to a list of characters, you can use list: 

>>. 
. 
. 
'spam. 
>>. 
. 
. 
list(s. 
>>. 
prin. 
. 
['s'. 
'p'. 
'a'. 
'm'. 


Because lis. 
is the name of a built-in function, you should avoid using it as a variable 
name. I also avoid . 
because it looks too much like 1. So that�s why I use t. 

The lis. 
function breaks a string into individual letters. If you want to break a string into 
words, you can use the spli. 
method: 

>>. 
. 
. 
'pinin. 
fo. 
th. 
fjords. 
>>. 
. 
. 
s.split(. 
>>. 
prin. 
. 
['pining'. 
'for'. 
'the'. 
'fjords'. 


An optional argument called a delimiter specifies which characters to use as word boundaries.
 The following example uses a hyphen as a delimiter: 

>>. 
. 
. 
'spam-spam-spam. 
>>. 
delimite. 
. 
'-. 
>>. 
s.split(delimiter. 
['spam'. 
'spam'. 
'spam'. 


joi. 
is the inverse of split. It takes a list of strings and concatenates the elements. joi. 
is 
a string method, so you have to invoke it on the delimiter and pass the list as a parameter: 

>>>t. 
['pining'. 
'for'. 
'the'. 
'fjords'. 
>>. 
delimite. 
. 
'. 
>>. 
delimiter.join(t. 
'pinin. 
fo. 
th. 
fjords. 


In this case the delimiter is a space character, so joi. 
puts a space between words. To 
concatenate strings without spaces, you can use the empty string, '', as a delimiter. 

10.10 Objects and values 
If we execute these assignment statements: 

a. 
'banana. 
b. 
'banana. 


We know that . 
and . 
both refer to a string, but we don�t know whether they refer to the 
same string. There are two possible states, shown in Figure 10.2. 

In one case, . 
and . 
refer to two different objects that have the same value. In the second 
case, they refer to the same object. 

To check whether two variables refer to the same object, you can use the i. 
operator. 


Chapter 10. Lists 

ab
�banana�
ab
�banana�
�banana�
Figure 10.2: State diagram. 

ab[ 1, 2, 3 ]
[ 1, 2, 3 ]
Figure 10.3: State diagram. 

>>. 
. 
. 
'banana. 
>>. 
. 
. 
'banana. 
>>. 
. 
i. 
. 
Tru. 


In this example, Python only created one string object, and both . 
and . 
refer to it. 

But when you create two lists, you get two objects: 

>>>a. 
[1. 
2. 
3. 
>>>b. 
[1. 
2. 
3. 
>>. 
. 
i. 
. 
Fals. 


So the state diagram looks like Figure 10.3. 

In this case we would say that the two lists are equivalent, because they have the same elements,
 but not identical, because they are not the same object. If two objects are identical, 
they are also equivalent, but if they are equivalent, they are not necessarily identical. 

Until now, we have been using �object� and �value� interchangeably, but it is more precise 
to say that an object has a value. If you execute [1,2,3], you get a list object whose value is 
a sequence of integers. If another list has the same elements, we say it has the same value, 
but it is not the same object. 

10.11 Aliasing 
If . 
refers to an object and you assign b=a, then both variables refer to the same object: >>>a. 
[1. 
2. 
3. 
>>>b. 
. 
>>. 
. 
i. 
. 
Tru. 


The state diagram looks like Figure 10.4. 

The association of a variable with an object is called a reference. In this example, there are 
two references to the same object. 
An object with more than one reference has more than one name, so we say that the object 

is aliased. 
If the aliased object is mutable, changes made with one alias affect the other: 



10.12. List arguments 
ab[ 1, 2, 3 ]
Figure 10.4: State diagram. 

012
�a�
�b�
�c�
listtlettersdelete_head<module>
Figure 10.5: Stack diagram. 

>>. 
b[0. 
. 
1. 
>>. 
prin. 
. 
[17. 
2. 
3. 


Although this behavior can be useful, it is error-prone. In general, it is safer to avoid 
aliasing when you are working with mutable objects. 

For immutable objects like strings, aliasing is not as much of a problem. In this example: 

a. 
'banana. 
b. 
'banana. 
It almost never makes a difference whether . 
and . 
refer to the same string or not. 

10.12 List arguments 
When you pass a list to a function, the function gets a reference to the list. If the function 
modifies a list parameter, the caller sees the change. For example, delete_hea. 
removes 
the first element from a list: 

de. 
delete_head(t). 
de. 
t[0. 


Here�s how it is used: 

>>. 
letter. 
. 
['a'. 
'b'. 
'c'. 
>>. 
delete_head(letters. 
>>. 
prin. 
letter. 
['b'. 
'c'. 


The parameter . 
and the variable letter. 
are aliases for the same object. The stack diagram 
looks like Figure 10.5. 

Since the list is shared by two frames, I drew it between them. 

It is important to distinguish between operations that modify lists and operations that create
 new lists. For example, the appen. 
method modifies a list, but the . 
operator creates a 
new list: 

>>>t. 
=[1,2. 
>>. 
t. 
. 
t1.append(3. 



Chapter 10. Lists 

>>. 
prin. 
t. 
[1. 
2. 
3. 
>>. 
prin. 
t. 
Non. 


>>>t. 
=t. 
+[4. 
>>. 
prin. 
t. 
[1,2. 
3. 
4. 


This difference is important when you write functions that are supposed to modify lists. 
For example, this function does not delete the head of a list: 

de. 
bad_delete_head(t). 


. 
. 
t[1:. 
. 
WRONG. 
The slice operator creates a new list and the assignment makes . 
refer to it, but none of that 
has any effect on the list that was passed as an argument. 

An alternative is to write a function that creates and returns a new list. For example, tai. 
returns all but the first element of a list: 

de. 
tail(t). 
retur. 
t[1:. 


This function leaves the original list unmodified. Here�s how it is used: 

>>. 
letter. 
. 
['a'. 
'b'. 
'c'. 
>>. 
res. 
. 
tail(letters. 
>>. 
prin. 
res. 
['b'. 
'c'. 


10.13 Debugging 
Careless use of lists (and other mutable objects) can lead to long hours of debugging. Here 
are some common pitfalls and ways to avoid them: 

1. Don�t forget that most list methods modify the argument and return None. This is 
the opposite of the string methods, which return a new string and leave the original 
alone. 
If you are used to writing string code like this: 

wor. 
. 
word.strip(. 


It is tempting to write list code like this: 

. 
. 
t.sort(. 
. 
WRONG. 


Because sor. 
returns None, the next operation you perform with . 
is likely to fail. 

Before using list methods and operators, you should read the documentation carefully
 and then test them in interactive mode. The methods and operators that lists 
share with other sequences (like strings) are documented at http://docs.python. 
org/2/library/stdtypes.html#typesseq. The methods and operators that only apply
 to mutable sequences are documented at http://docs.python.org/2/library. 
stdtypes.html#typesseq. 
mutable. 


10.14. Glossary 
2. Pick an idiom and stick with it. 
Part of the problem with lists is that there are too many ways to do things. For example,
 to remove an element from a list, you can use pop, remove, del, or even a slice 
assignment. 
To add an element, you can use the appen. 
method or the . 
operator. Assuming that 

. 
is a list and . 
is a list element, these are right: 

t.append(x. 


. 
. 
. 
+[x. 


And these are wrong: 

t.append([x]. 
. 
WRONG. 


. 
. 
t.append(x. 
. 
WRONG. 


. 
. 
[x. 
. 
WRONG. 


t=t+. 
#WRONG. 


Try out each of these examples in interactive mode to make sure you understand 
what they do. Notice that only the last one causes a runtime error; the other three are 
legal, but they do the wrong thing. 

3. Make copies to avoid aliasing. 
If you want to use a method like sor. 
that modifies the argument, but you need to 
keep the original list as well, you can make a copy. 

ori. 
. 
t[:. 


t.sort(. 


In this example you could also use the built-in function sorted, which returns a new, 
sorted list and leaves the original alone. But in that case you should avoid using sorte. 
as a variable name! 

10.14 Glossary 
list: A sequence of values. 

element: One of the values in a list (or other sequence), also called items. 

index: An integer value that indicates an element in a list. 

nested list: A list that is an element of another list. 

list traversal: The sequential accessing of each element in a list. 

mapping: A relationship in which each element of one set corresponds to an element of 
another set. For example, a list is a mapping from indices to elements. 

accumulator: A variable used in a loop to add up or accumulate a result. 

augmented assignment: A statement that updates the value of a variable using an operator
 like +=. 

reduce: A processing pattern that traverses a sequence and accumulates the elements into 
a single result. 


Chapter 10. Lists 

map: A processing pattern that traverses a sequence and performs an operation on each 
element. 

filter: A processing pattern that traverses a list and selects the elements that satisfy some 
criterion. 

object: Something a variable can refer to. An object has a type and a value. 

equivalent: Having the same value. 

identical: Being the same object (which implies equivalence). 

reference: The association between a variable and its value. 

aliasing: A circumstance where two or more variables refer to the same object. 

delimiter: A character or string used to indicate where a string should be split. 

10.15 Exercises 
Exercise 10.6. Write a function called is_sorte. 
that takes a list as a parameter and returns Tru. 
if the list is sorted in ascending order and Fals. 
otherwise. You can assume (as a precondition) that 
the elements of the list can be compared with the relational operators <, >, etc. 


For example, is_sorted([1,2,2]. 
should return Tru. 
and is_sorted(['b','a']. 
should return
 False. 
Exercise 10.7. Two words are anagrams if you can rearrange the letters from one to spell the other. 
Write a function called is_anagra. 
that takes two strings and returns Tru. 
if they are anagrams. 
Exercise 10.8. The (so-called) Birthday Paradox: 


1. Write a function called has_duplicate. 
that takes a list and returns Tru. 
if there is any 
element that appears more than once. It should not modify the original list. 
2. If there are 23 students in your class, what are the chances that two of you have the same 
birthday? You can estimate this probability by generating random samples of 23 birthdays and 
checking for matches. Hint: you can generate random birthdays with the randin. 
function 
in the rando. 
module. 
You can read about this problem at http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Birthday. 
parado. 
, 
and you can download my solution from http. 
/. 
thinkpython. 
com. 
code. 
birthday. 
p. 
. 
Exercise 10.9. Write a function called remove_duplicate. 
that takes a list and returns a new 
list with only the unique elements from the original. Hint: they don�t have to be in the same order. 
Exercise 10.10. Write a function that reads the file words.tx. 
and builds a list with one element 
per word. Write two versions of this function, one using the appen. 
method and the other using 
the idiom t=. 
. 
[x]. Which one takes longer to run? Why? 


Hint: use the tim. 
module to measure elapsed time. Solution: http. 
/. 
thinkpython. 
com. 
code. 
wordlist. 
p. 
. 
Exercise 10.11. To check whether a word is in the word list, you could use the i. 
operator, but it 
would be slow because it searches through the words in order. 


Because the words are in alphabetical order, we can speed things up with a bisection search (also 
known as binary search), which is similar to what you do when you look a word up in the dictionary. 



10.15. Exercises 
You start in the middle and check to see whether the word you are looking for comes before the word 
in the middle of the list. If so, then you search the first half of the list the same way. Otherwise you 
search the second half. 

Either way, you cut the remaining search space in half. If the word list has 113,809 words, it will 
take about 17 steps to find the word or conclude that it�s not there. 

Write a function called bisec. 
that takes a sorted list and a target value and returns the index of 
the value in the list, if it�s there, or Non. 
if it�s not. 

Or you could read the documentation of the bisec. 
module and use that! Solution: http. 
/. 
thinkpython. 
com. 
code. 
inlist. 
p. 
. 
Exercise 10.12. Two words are a �reverse pair� if each is the reverse of the other. Write a program 
that finds all the reverse pairs in the word list. Solution: http. 
/. 
thinkpython. 
com. 
code. 
reverse. 
pair. 
p. 
. 
Exercise 10.13. Two words �interlock� if taking alternating letters from each forms a new 
word. For example, �shoe� and �cold� interlock to form �schooled.� Solution: http. 
/. 
thinkpython. 
com. 
code. 
interlock. 
p. 
. Credit: This exercise is inspired by an example at http. 
/. 
puzzlers. 
or. 
. 

1. Write a program that finds all pairs of words that interlock. Hint: don�t enumerate all pairs! 
2. Can you find any words that are three-way interlocked; that is, every third letter forms a 
word, starting from the first, second or third? 

Chapter 10. Lists 


Chapter 11 
Dictionaries 

A dictionary is like a list, but more general. In a list, the indices have to be integers; in a 
dictionary they can be (almost) any type. 

You can think of a dictionary as a mapping between a set of indices (which are called keys) 
and a set of values. Each key maps to a value. The association of a key and a value is called 
a key-value pair or sometimes an item. 

As an example, we�ll build a dictionary that maps from English to Spanish words, so the 
keys and the values are all strings. 

The function dic. 
creates a new dictionary with no items. Because dic. 
is the name of a 
built-in function, you should avoid using it as a variable name. 

>>. 
eng2s. 
. 
dict(. 


>>. 
prin. 
eng2s. 


{. 


The squiggly-brackets, {}, represent an empty dictionary. To add items to the dictionary, 
you can use square brackets: 

>>. 
eng2sp['one']. 
'uno. 


This line creates an item that maps from the key 'one. 
to the value 'uno'. If we print the 
dictionary again, we see a key-value pair with a colon between the key and value: 

>>. 
prin. 
eng2s. 


{'one'. 
'uno'. 


This output format is also an input format. For example, you can create a new dictionary 
with three items: 

>>. 
eng2s. 
. 
{'one'. 
'uno'. 
'two'. 
'dos'. 
'three'. 
'tres'. 


But if you print eng2sp, you might be surprised: 

>>. 
prin. 
eng2s. 


{'one'. 
'uno'. 
'three'. 
'tres'. 
'two'. 
'dos'. 


The order of the key-value pairs is not the same. In fact, if you type the same example 
on your computer, you might get a different result. In general, the order of items in a 
dictionary is unpredictable. 

But that�s not a problem because the elements of a dictionary are never indexed with integer
 indices. Instead, you use the keys to look up the corresponding values: 


Chapter 11. Dictionaries 

>>. 
prin. 
eng2sp['two'. 


'dos. 


The key 'two. 
always maps to the value 'dos. 
so the order of the items doesn�t matter. 

If the key isn�t in the dictionary, you get an exception: 

>>. 
prin. 
eng2sp['four'. 


KeyError. 
'four. 


The le. 
function works on dictionaries; it returns the number of key-value pairs: 

>>. 
len(eng2sp. 


. 


The i. 
operator works on dictionaries; it tells you whether something appears as a key in 
the dictionary (appearing as a value is not good enough). 

>>. 
'one. 
i. 
eng2s. 


Tru. 


>>. 
'uno. 
i. 
eng2s. 


Fals. 


To see whether something appears as a value in a dictionary, you can use the method values, which returns the values as a list, and then use the i. 
operator: 

>>. 
val. 
. 
eng2sp.values(. 


>>. 
'uno. 
i. 
val. 


Tru. 


The i. 
operator uses different algorithms for lists and dictionaries. For lists, it uses a search 
algorithm, as in Section 8.6. As the list gets longer, the search time gets longer in direct 
proportion. For dictionaries, Python uses an algorithm called a hashtable that has a remarkable
 property: the i. 
operator takes about the same amount of time no matter how 
many items there are in a dictionary. I won�t explain how that�s possible, but you can read 
more about it at http://en.wikipedia.org/wiki/Hash_table. 
Exercise 11.1. Write a function that reads the words in words.tx. 
and stores them as keys in a 
dictionary. It doesn�t matter what the values are. Then you can use the i. 
operator as a fast way to 
check whether a string is in the dictionary. 

If you did Exercise 10.11, you can compare the speed of this implementation with the list i. 
operator 
and the bisection search. 

11.1 Dictionary as a set of counters 
Suppose you are given a string and you want to count how many times each letter appears. 
There are several ways you could do it: 

1. You could create 26 variables, one for each letter of the alphabet. Then you could traverse
 the string and, for each character, increment the corresponding counter, probably
 using a chained conditional. 
2. You could create a list with 26 elements. Then you could convert each character to 
a number (using the built-in function ord), use the number as an index into the list, 
and increment the appropriate counter. 

11.2. Looping and dictionaries 
3. You could create a dictionary with characters as keys and counters as the corresponding
 values. The first time you see a character, you would add an item to the dictionary. 
After that you would increment the value of an existing item. 
Each of these options performs the same computation, but each of them implements that 
computation in a different way. 

An implementation is a way of performing a computation; some implementations are 
better than others. For example, an advantage of the dictionary implementation is that we 
don�t have to know ahead of time which letters appear in the string and we only have to 
make room for the letters that do appear. 

Here is what the code might look like: 

de. 
histogram(s). 


. 
. 
dict(. 


fo. 
. 
ins. 


if. 
no. 
i. 
d. 


d[c. 
. 
. 


else. 


d[c. 
+. 
. 


retur. 
. 


The name of the function is histogram, which is a statistical term for a set of counters (or 
frequencies). 

The first line of the function creates an empty dictionary. The fo. 
loop traverses the string. 
Each time through the loop, if the character . 
is not in the dictionary, we create a new item 
with key . 
and the initial value 1 (since we have seen this letter once). If . 
is already in the 
dictionary we increment d[c]. 

Here�s how it works: 

>>. 
. 
. 
histogram('brontosaurus'. 


>>. 
prin. 
. 


{'a'. 
1. 
'b'. 
1. 
'o'. 
2. 
'n'. 
1. 
's'. 
2. 
'r'. 
2. 
'u'. 
2. 
't'. 
1. 


The histogram indicates that the letters 'a. 
and 'b. 
appear once; 'o. 
appears twice, and 
so on. 

Exercise 11.2. Dictionaries have a method called ge. 
that takes a key and a default value. If the 
key appears in the dictionary, ge. 
returns the corresponding value; otherwise it returns the default 
value. For example: 

>>. 
. 
. 
histogram('a'. 


>>. 
prin. 
. 


{'a'. 
1. 


>>. 
h.get('a'. 
0. 


. 


>>. 
h.get('b'. 
0. 


. 


Use ge. 
to write histogra. 
more concisely. You should be able to eliminate the i. 
statement. 

11.2 Looping and dictionaries 
If you use a dictionary in a fo. 
statement, it traverses the keys of the dictionary. For example,
 print_his. 
prints each key and the corresponding value: 


Chapter 11. Dictionaries 

de. 
print_hist(h). 
fo. 
. 
inh. 
prin. 
c. 
h[c. 


Here�s what the output looks like: 

>>. 
. 
. 
histogram('parrot'. 
>>. 
print_hist(h. 
a. 
p. 
r. 
t. 
o. 


Again, the keys are in no particular order. 

Exercise 11.3. Dictionaries have a method called key. 
that returns the keys of the dictionary, in 
no particular order, as a list. 

Modify print_his. 
to print the keys and their values in alphabetical order. 

11.3 Reverse lookup 
Given a dictionary . 
and a key k, it is easy to find the corresponding value . 
. 
d[k]. This 
operation is called a lookup. 

But what if you have . 
and you want to find k? You have two problems: first, there might 
be more than one key that maps to the value v. Depending on the application, you might 
be able to pick one, or you might have to make a list that contains all of them. Second, 
there is no simple syntax to do a reverse lookup; you have to search. 

Here is a function that takes a value and returns the first key that maps to that value: 

de. 
reverse_lookup(d. 
v). 
fo. 
. 
ind. 
i. 
d[k. 
=. 
v. 
retur. 
. 
rais. 
ValueErro. 


This function is yet another example of the search pattern, but it uses a feature we haven�t 
seen before, raise. The rais. 
statement causes an exception; in this case it causes a ValueError, which generally indicates that there is something wrong with the value of 
a parameter. 

If we get to the end of the loop, that means . 
doesn�t appear in the dictionary as a value, so 
we raise an exception. 

Here is an example of a successful reverse lookup: 

>>. 
. 
. 
histogram('parrot'. 
>>. 
. 
. 
reverse_lookup(h. 
2. 
>>. 
prin. 
. 
. 


And an unsuccessful one: 


11.4. Dictionaries and lists 
>>. 
. 
. 
reverse_lookup(h. 
3. 


Tracebac. 
(mos. 
recen. 
cal. 
last). 
Fil. 
"<stdin>". 
lin. 
1. 
i. 
. 
Fil. 
"<stdin>". 
lin. 
5. 
i. 
reverse_looku. 


ValueErro. 


The result when you raise an exception is the same as when Python raises one: it prints a 
traceback and an error message. 

The rais. 
statement takes a detailed error message as an optional argument. For example: 

>>. 
rais. 
ValueError. 
'valu. 
doe. 
no. 
appea. 
i. 
th. 
dictionary. 
Tracebac. 
(mos. 
recen. 
cal. 
last). 
Fil. 
"<stdin>". 
lin. 
1. 
i. 
. 
ValueError. 
valu. 
doe. 
no. 
appea. 
i. 
th. 
dictionar. 


A reverse lookup is much slower than a forward lookup; if you have to do it often, or if the 
dictionary gets big, the performance of your program will suffer. 

Exercise 11.4. Modify reverse_looku. 
so that it builds and returns a list of all keys that map to 

v, or an empty list if there are none. 
11.4 Dictionaries and lists 
Lists can appear as values in a dictionary. For example, if you were given a dictionary that 
maps from letters to frequencies, you might want to invert it; that is, create a dictionary 
that maps from frequencies to letters. Since there might be several letters with the same 
frequency, each value in the inverted dictionary should be a list of letters. 

Here is a function that inverts a dictionary: 

de. 
invert_dict(d). 
invers. 
. 
dict(. 
fo. 
ke. 
i. 
d. 


va. 
. 
d[key. 
i. 
va. 
no. 
i. 
inverse. 
inverse[val. 
. 
[key. 
else. 
inverse[val].append(key. 
retur. 
invers. 


Each time through the loop, ke. 
gets a key from . 
and va. 
gets the corresponding value. 
If va. 
is not in inverse, that means we haven�t seen it before, so we create a new item and 
initialize it with a singleton (a list that contains a single element). Otherwise we have seen 
this value before, so we append the corresponding key to the list. 

Here is an example: 

>>. 
his. 
. 
histogram('parrot'. 
>>. 
prin. 
his. 
{'a'. 
1. 
'p'. 
1. 
'r'. 
2. 
't'. 
1. 
'o'. 
1. 
>>. 
invers. 
. 
invert_dict(hist. 
>>. 
prin. 
invers. 
{1. 
['a'. 
'p'. 
't'. 
'o']. 
2. 
['r']. 



Chapter 11. Dictionaries 

�a�11dicthist
�p�
1
�o�1
�r�2
�t�
01
�a�
�p�
list2�t�
�o�31dictinv20list
�r�
Figure 11.1: State diagram. 

Figure 11.1 is a state diagram showing his. 
and inverse. A dictionary is represented as a 
box with the type dic. 
above it and the key-value pairs inside. If the values are integers, 
floats or strings, I usually draw them inside the box, but I usually draw lists outside the 
box, just to keep the diagram simple. 

Lists can be values in a dictionary, as this example shows, but they cannot be keys. Here�s 
what happens if you try: 

>>>t. 
[1. 
2. 
3. 


>>. 
. 
. 
dict(. 


>>. 
d[t. 
. 
'oops. 


Tracebac. 
(mos. 
recen. 
cal. 
last). 


Fil. 
"<stdin>". 
lin. 
1. 
i. 
. 


TypeError. 
lis. 
object. 
ar. 
unhashabl. 


I mentioned earlier that a dictionary is implemented using a hashtable and that means that 
the keys have to be hashable. 

A hash is a function that takes a value (of any kind) and returns an integer. Dictionaries 
use these integers, called hash values, to store and look up key-value pairs. 

This system works fine if the keys are immutable. But if the keys are mutable, like lists, 
bad things happen. For example, when you create a key-value pair, Python hashes the key 
and stores it in the corresponding location. If you modify the key and then hash it again, it 
would go to a different location. In that case you might have two entries for the same key, 
or you might not be able to find a key. Either way, the dictionary wouldn�t work correctly. 

That�s why the keys have to be hashable, and why mutable types like lists aren�t. The 
simplest way to get around this limitation is to use tuples, which we will see in the next 
chapter. 

Since dictionaries are mutable, they can�t be used as keys, but they can be used as values. 
Exercise 11.5. Read the documentation of the dictionary method setdefaul. 
and use it to write a 
more concise version of invert_dict. Solution: http. 
/. 
thinkpython. 
com. 
code. 
invert. 
dict. 
p. 
. 

11.5 Memos 
If you played with the fibonacc. 
function from Section 6.7, you might have noticed that 
the bigger the argument you provide, the longer the function takes to run. Furthermore, 
the run time increases very quickly. 


11.5. Memos 107 
fibonaccin4fibonaccin3fibonaccin2fibonaccin0fibonaccin1fibonaccin1fibonaccin2fibonaccin0fibonaccin1
Figure 11.2: Call graph. 

To understand why, consider Figure 11.2, which shows the call graph for fibonacc. 
with n=4: 

A call graph shows a set of function frames, with lines connecting each frame to the frames 
of the functions it calls. At the top of the graph, fibonacc. 
with n=. 
calls fibonacc. 
with n=. 
and n=2. In turn, fibonacc. 
with n=. 
calls fibonacc. 
with n=. 
and n=1. And so on. 

Count how many times fibonacci(0. 
and fibonacci(1. 
are called. This is an inefficient 
solution to the problem, and it gets worse as the argument gets bigger. 

One solution is to keep track of values that have already been computed by storing them 
in a dictionary. A previously computed value that is stored for later use is called a memo. 
Here is an implementation of fibonacc. 
using memos: 

know. 
. 
{0:0. 
1:1. 


de. 
fibonacci(n). 


i. 
. 
i. 
known. 


retur. 
known[n. 


re. 
. 
fibonacci(n-1. 
. 
fibonacci(n-2. 


known[n. 
. 
re. 


retur. 
re. 


know. 
is a dictionary that keeps track of the Fibonacci numbers we already know. It starts 
with two items: 0 maps to 0 and 1 maps to 1. 

Whenever fibonacc. 
is called, it checks known. If the result is already there, it can return 
immediately. Otherwise it has to compute the new value, add it to the dictionary, and 
return it. 

Exercise 11.6. Run this version of fibonacc. 
and the original with a range of parameters and 
compare their run times. 
Exercise 11.7. Memoize the Ackermann function from Exercise 6.5 and see if memoization 
makes it possible to evaluate the function with bigger arguments. Hint: no. Solution: http. 
/. 
thinkpython. 
com. 
code. 
ackermann. 
memo. 
p. 
. 


Chapter 11. Dictionaries 

11.6 Global variables 
In the previous example, know. 
is created outside the function, so it belongs to the special 
frame called __main__. Variables in __main_. 
are sometimes called global because they 
can be accessed from any function. Unlike local variables, which disappear when their 
function ends, global variables persist from one function call to the next. 

It is common to use global variables for flags; that is, boolean variables that indicate (�flag�) 
whether a condition is true. For example, some programs use a flag named verbos. 
to 
control the level of detail in the output: 

verbos. 
. 
Tru. 


de. 
example1(). 


i. 
verbose. 


prin. 
'Runnin. 
example1. 


If you try to reassign a global variable, you might be surprised. The following example is 
supposed to keep track of whether the function has been called: 

been_calle. 
. 
Fals. 


de. 
example2(). 


been_calle. 
. 
Tru. 
. 
WRON. 


But if you run it you will see that the value of been_calle. 
doesn�t change. The problem 
is that example. 
creates a new local variable named been_called. The local variable goes 
away when the function ends, and has no effect on the global variable. 

To reassign a global variable inside a function you have to declare the global variable before 
you use it: 

been_calle. 
. 
Fals. 


de. 
example2(). 


globa. 
been_calle. 


been_calle. 
. 
Tru. 


The globa. 
statement tells the interpreter something like, �In this function, when I say been_called, I mean the global variable; don�t create a local one.� 

Here�s an example that tries to update a global variable: 

coun. 
. 
. 


de. 
example3(). 


coun. 
. 
coun. 
. 
. 
. 
WRON. 


If you run it you get: 

UnboundLocalError. 
loca. 
variabl. 
'count. 
reference. 
befor. 
assignmen. 


Python assumes that coun. 
is local, which means that you are reading it before writing it. 
The solution, again, is to declare coun. 
global. 

de. 
example3(). 


globa. 
coun. 


coun. 
+. 
. 


If the global value is mutable, you can modify it without declaring it: 


11.7. Long integers 
know. 
. 
{0:0. 
1:1. 


de. 
example4(). 


known[2. 
. 
. 


So you can add, remove and replace elements of a global list or dictionary, but if you want 
to reassign the variable, you have to declare it: 

de. 
example5(). 


globa. 
know. 


know. 
. 
dict(. 


11.7 Long integers 
If you compute fibonacci(50), you get: 

>>. 
fibonacci(50. 


12586269025. 


The . 
at the end indicates that the result is a long integer, or type long. In Python 3, lon. 
is gone; all integers, even really big ones, are type int. 

Values with type in. 
have a limited range; long integers can be arbitrarily big, but as they 
get bigger they consume more space and time. 

The mathematical operators work on long integers, and the functions in the mat. 
module, 
too, so in general any code that works with in. 
will also work with long. 

Any time the result of a computation is too big to be represented with an integer, Python 
converts the result as a long integer: 

>>. 
100. 
. 
100. 


100000. 


>>. 
10000. 
. 
10000. 


10000000000. 


In the first case the result has type int; in the second case it is long. 

Exercise 11.8. Exponentiation of large integers is the basis of common algorithms for public-key encryption.
 Read the Wikipedia page on the RSA algorithm (http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
RSA. 
. 
algorithm. 
) and write functions to encode and decode messages. 

11.8 Debugging 
As you work with bigger datasets it can become unwieldy to debug by printing and checking
 data by hand. Here are some suggestions for debugging large datasets: 

Scale down the input: If possible, reduce the size of the dataset. For example if the program
 reads a text file, start with just the first 10 lines, or with the smallest example 
you can find. You can either edit the files themselves, or (better) modify the program 
so it reads only the first . 
lines. 

If there is an error, you can reduce . 
to the smallest value that manifests the error, and 
then increase it gradually as you find and correct errors. 


Chapter 11. Dictionaries 

Check summaries and types: Instead of printing and checking the entire dataset, consider 
printing summaries of the data: for example, the number of items in a dictionary or 
the total of a list of numbers. 

A common cause of runtime errors is a value that is not the right type. For debugging 
this kind of error, it is often enough to print the type of a value. 

Write self-checks: Sometimes you can write code to check for errors automatically. For 
example, if you are computing the average of a list of numbers, you could check that 
the result is not greater than the largest element in the list or less than the smallest. 
This is called a �sanity check� because it detects results that are �insane.� 

Another kind of check compares the results of two different computations to see if 
they are consistent. This is called a �consistency check.� 

Pretty print the output: Formatting debugging output can make it easier to spot an error. 
We saw an example in Section 6.9. The pprin. 
module provides a pprin. 
function 
that displays built-in types in a more human-readable format. 

Again, time you spend building scaffolding can reduce the time you spend debugging. 

11.9 Glossary 
dictionary: A mapping from a set of keys to their corresponding values. 
key-value pair: The representation of the mapping from a key to a value. 
item: Another name for a key-value pair. 
key: An object that appears in a dictionary as the first part of a key-value pair. 
value: An object that appears in a dictionary as the second part of a key-value pair. This is 


more specific than our previous use of the word �value.� 

implementation: A way of performing a computation. 

hashtable: The algorithm used to implement Python dictionaries. 

hash function: A function used by a hashtable to compute the location for a key. 

hashable: A type that has a hash function. Immutable types like integers, floats and strings 

are hashable; mutable types like lists and dictionaries are not. 

lookup: A dictionary operation that takes a key and finds the corresponding value. 

reverse lookup: A dictionary operation that takes a value and finds one or more keys that 

map to it. 

singleton: A list (or other sequence) with a single element. 

call graph: A diagram that shows every frame created during the execution of a program, 

with an arrow from each caller to each callee. 

histogram: A set of counters. 

memo: A computed value stored to avoid unnecessary future computation. 


11.10. Exercises 
global variable: A variable defined outside a function. Global variables can be accessed 
from any function. 

flag: A boolean variable used to indicate whether a condition is true. 

declaration: A statement like globa. 
that tells the interpreter something about a variable. 

11.10 Exercises 
Exercise 11.9. If you did Exercise 10.8, you already have a function named has_duplicate. 
that 
takes a list as a parameter and returns Tru. 
if there is any object that appears more than once in the 
list. 


Use a dictionary to write a faster, simpler version of has_duplicates. Solution: http. 
/. 
thinkpython. 
com. 
code. 
has. 
duplicates. 
p. 
. 
Exercise 11.10. Two words are �rotate pairs� if you can rotate one of them and get the other (see 
rotate_wor. 
in Exercise 8.12). 


Write a program that reads a wordlist and finds all the rotate pairs. Solution: http. 
/. 
thinkpython. 
com. 
code. 
rotate. 
pairs. 
p. 
. 
Exercise 11.11. Here�s another Puzzler from Car Talk (http. 
/. 
www. 
cartalk. 
com. 
content. 
puzzler. 
): 


This was sent in by a fellow named Dan O�Leary. He came upon a common one-syllable, 
five-letter word recently that has the following unique property. When you remove the 
first letter, the remaining letters form a homophone of the original word, that is a word 
that sounds exactly the same. Replace the first letter, that is, put it back and remove 
the second letter and the result is yet another homophone of the original word. And the 
question is, what�s the word? 

Now I�m going to give you an example that doesn�t work. Let�s look at the five-letter 
word, �wrack.� W-R-A-C-K, you know like to �wrack with pain.� If I remove the first 
letter, I am left with a four-letter word, �R-A-C-K.� As in, �Holy cow, did you see the 
rack on that buck! It must have been a nine-pointer!� It�s a perfect homophone. If you 
put the �w� back, and remove the �r,� instead, you�re left with the word, �wack,� which is 
a real word, it�s just not a homophone of the other two words. 

But there is, however, at least one word that Dan and we know of, which will yield two 
homophones if you remove either of the first two letters to make two, new four-letter 
words. The question is, what�s the word? 

You can use the dictionary from Exercise 11.1 to check whether a string is in the word list. 

To check whether two words are homophones, you can use the CMU Pronouncing Dictionary. 
You can download it from http. 
/. 
www. 
speech. 
cs. 
cmu. 
edu. 
cgi. 
bin. 
cmudic. 
or from http. 
/. 
thinkpython. 
com. 
code. 
c06. 
and you can also download http. 
/. 
thinkpython. 
com. 
code. 
pronounce. 
p. 
, which provides a function named read_dictionar. 
that reads the 
pronouncing dictionary and returns a Python dictionary that maps from each word to a string that 
describes its primary pronunciation. 

Write a program that lists all the words that solve the Puzzler. Solution: http. 
/. 
thinkpython. 
com. 
code. 
homophone. 
p. 
. 


Chapter 11. Dictionaries 


Chapter 12 

Tuples 

12.1 Tuples are immutable 
A tuple is a sequence of values. The values can be any type, and they are indexed by 
integers, so in that respect tuples are a lot like lists. The important difference is that tuples 
are immutable. 

Syntactically, a tuple is a comma-separated list of values: 

>>. 
. 
. 
'a'. 
'b'. 
'c'. 
'd'. 
'e. 


Although it is not necessary, it is common to enclose tuples in parentheses: 

>>>t. 
('a'. 
'b'. 
'c'. 
'd'. 
'e'. 


To create a tuple with a single element, you have to include a final comma: 

>>>t. 
. 
'a'. 
>>. 
type(t1. 
<typ. 
'tuple'. 


A value in parentheses is not a tuple: 

>>>t. 
=('a'. 
>>. 
type(t2. 
<typ. 
'str'. 


Another way to create a tuple is the built-in function tuple. With no argument, it creates 
an empty tuple: 

>>. 
. 
. 
tuple(. 
>>. 
prin. 
. 
(. 


If the argument is a sequence (string, list or tuple), the result is a tuple with the elements of 
the sequence: 

>>. 
. 
. 
tuple('lupins'. 
>>. 
prin. 
. 
('l'. 
'u'. 
'p'. 
'i'. 
'n'. 
's'. 


Because tupl. 
is the name of a built-in function, you should avoid using it as a variable 
name. 

Most list operators also work on tuples. The bracket operator indexes an element: 


Chapter 12. Tuples 

>>>t. 
('a'. 
'b'. 
'c'. 
'd'. 
'e'. 
>>. 
prin. 
t[0. 


'a. 


And the slice operator selects a range of elements. 

>>. 
prin. 
t[1:3. 
('b'. 
'c'. 


But if you try to modify one of the elements of the tuple, you get an error: 

>>. 
t[0. 
. 
'A. 
TypeError. 
objec. 
doesn'. 
suppor. 
ite. 
assignmen. 


You can�t modify the elements of a tuple, but you can replace one tuple with another: 

>>>t. 
('A',. 
. 
t[1:. 
>>. 
prin. 
. 
('A'. 
'b'. 
'c'. 
'd'. 
'e'. 


12.2 Tuple assignment 
It is often useful to swap the values of two variables. With conventional assignments, you 
have to use a temporary variable. For example, to swap . 
and b: 

>>. 
tem. 
. 
. 
>>>a. 
. 
>>>b. 
tem. 


This solution is cumbersome; tuple assignment is more elegant: 

>>>a. 
b=b,. 


The left side is a tuple of variables; the right side is a tuple of expressions. Each value 
is assigned to its respective variable. All the expressions on the right side are evaluated 
before any of the assignments. 

The number of variables on the left and the number of values on the right have to be the 
same: 

>>>a. 
b=1,2. 
. 
ValueError. 
to. 
man. 
value. 
t. 
unpac. 


More generally, the right side can be any kind of sequence (string, list or tuple). For example,
 to split an email address into a user name and a domain, you could write: 

>>. 
add. 
. 
'monty@python.org. 
>>. 
uname. 
domai. 
. 
addr.split('@'. 


The return value from spli. 
is a list with two elements; the first element is assigned to uname, the second to domain. 

>>. 
prin. 
unam. 
mont. 
>>. 
prin. 
domai. 
python.or. 



12.3. Tuples as return values 
12.3 Tuples as return values 
Strictly speaking, a function can only return one value, but if the value is a tuple, the effect 
is the same as returning multiple values. For example, if you want to divide two integers 
and compute the quotient and remainder, it is inefficient to compute x/. 
and then x%y. It 
is better to compute them both at the same time. 

The built-in function divmo. 
takes two arguments and returns a tuple of two values, the 
quotient and remainder. You can store the result as a tuple: 

>>. 
. 
. 
divmod(7. 
3. 
>>. 
prin. 
. 
(2. 
1. 


Or use tuple assignment to store the elements separately: 

>>. 
quot. 
re. 
. 
divmod(7. 
3. 
>>. 
prin. 
quo. 
. 
>>. 
prin. 
re. 
. 


Here is an example of a function that returns a tuple: 

de. 
min_max(t). 


retur. 
min(t). 
max(t. 
ma. 
and mi. 
are built-in functions that find the largest and smallest elements of a sequence. min_ma. 
computes both and returns a tuple of two values. 

12.4 Variable-length argument tuples 
Functions can take a variable number of arguments. A parameter name that begins with 
. 
gathers arguments into a tuple. For example, printal. 
takes any number of arguments 
and prints them: 

de. 
printall(*args). 


prin. 
arg. 
The gather parameter can have any name you like, but arg. 
is conventional. Here�s how 
the function works: 

>>. 
printall(1. 
2.0. 
'3'. 
(1. 
2.0. 
'3'. 


The complement of gather is scatter. If you have a sequence of values and you want to pass 
it to a function as multiple arguments, you can use the . 
operator. For example, divmo. 
takes exactly two arguments; it doesn�t work with a tuple: 

>>>t. 
(7. 
3. 
>>. 
divmod(t. 
TypeError. 
divmo. 
expecte. 
. 
arguments. 
go. 
. 


But if you scatter the tuple, it works: 

>>. 
divmod(*t. 
(2. 
1. 


Exercise 12.1. Many of the built-in functions use variable-length argument tuples. For example, ma. 
and mi. 
can take any number of arguments: 


Chapter 12. Tuples 

>>. 
max(1,2,3. 
. 


But su. 
does not. >>. 
sum(1,2,3. 
TypeError. 
su. 
expecte. 
a. 
mos. 
. 
arguments. 
go. 
. 


Write a function called sumal. 
that takes any number of arguments and returns their sum. 

12.5 Lists and tuples 
zi. 
is a built-in function that takes two or more sequences and �zips� them into a list of 
tuples where each tuple contains one element from each sequence. In Python 3, zi. 
returns 
an iterator of tuples, but for most purposes, an iterator behaves like a list. 
This example zips a string and a list: 

>>. 
. 
. 
'abc. 
>>>t. 
[0. 
1. 
2. 
>>. 
zip(s. 
t. 
[('a'. 
0). 
('b'. 
1). 
('c'. 
2). 


The result is a list of tuples where each tuple contains a character from the string and the 
corresponding element from the list. 

If the sequences are not the same length, the result has the length of the shorter one. 

>>. 
zip('Anne'. 
'Elk'. 
[('A'. 
'E'). 
('n'. 
'l'). 
('n'. 
'k'). 
You can use tuple assignment in a fo. 
loop to traverse a list of tuples: 

. 
. 
[('a'. 
0). 
('b'. 
1). 
('c'. 
2). 
fo. 
letter. 
numbe. 
i. 
t. 
prin. 
number. 
lette. 


Each time through the loop, Python selects the next tuple in the list and assigns the ele


ments to lette. 
and number. The output of this loop is: 0. 
1. 
2. 


If you combine zip, fo. 
and tuple assignment, you get a useful idiom for traversing two 
(or more) sequences at the same time. For example, has_matc. 
takes two sequences, t. 
and t2, and returns Tru. 
if there is an index . 
such that t1[i. 
=. 
t2[i]: 

de. 
has_match(t1. 
t2). 
fo. 
x. 
. 
i. 
zip(t1. 
t2). 
if. 
==y. 
retur. 
Tru. 
retur. 
Fals. 


If you need to traverse the elements of a sequence and their indices, you can use the built-in 
function enumerate: fo. 
index. 
elemen. 
i. 
enumerate('abc'). 
prin. 
index. 
elemen. 



12.6. Dictionaries and tuples 
The output of this loop is: 

0. 
1. 
2. 


Again. 

12.6 Dictionaries and tuples 
Dictionaries have a method called item. 
that returns a list of tuples, where each tuple is a 
key-value pair. 

>>>d. 
{'a':0. 
'b':1. 
'c':2. 
>>. 
. 
. 
d.items(. 
>>. 
prin. 
. 
[('a'. 
0). 
('c'. 
2). 
('b'. 
1). 


As you should expect from a dictionary, the items are in no particular order. In Python 3, item. 
returns an iterator, but for many purposes, iterators behave like lists. 

Going in the other direction, you can use a list of tuples to initialize a new dictionary: 

>>>t. 
[('a'. 
0). 
('c'. 
2). 
('b'. 
1). 
>>. 
. 
. 
dict(t. 
>>. 
prin. 
. 
{'a'. 
0. 
'c'. 
2. 
'b'. 
1. 


Combining dic. 
with zi. 
yields a concise way to create a dictionary: 

>>. 
. 
. 
dict(zip('abc'. 
range(3)). 
>>. 
prin. 
. 
{'a'. 
0. 
'c'. 
2. 
'b'. 
1. 


The dictionary method updat. 
also takes a list of tuples and adds them, as key-value pairs, 
to an existing dictionary. 

Combining items, tuple assignment and for, you get the idiom for traversing the keys and 
values of a dictionary: 

fo. 
key. 
va. 
i. 
d.items(). 
prin. 
val. 
ke. 


The output of this loop is: 

0. 
2. 
1. 


Again. 

It is common to use tuples as keys in dictionaries (primarily because you can�t use lists). For 
example, a telephone directory might map from last-name, first-name pairs to telephone 
numbers. Assuming that we have defined last, firs. 
and number, we could write: 

directory[last,first. 
. 
numbe. 


The expression in brackets is a tuple. We could use tuple assignment to traverse this dictionary.
 


Chapter 12. Tuples 

01
�Cleese�
�John�
tuple
Figure 12.1: State diagram. 

(�Cleese�, �John�)�08700 100 222�
�08700 100 222�
�08700 100 222�
�08700 100 222�
�08700 100 222�
(�Chapman�, �Graham�)(�Idle�, �Eric�)(�Jones�, �Terry�)(�Gilliam�, �Terry�)(�Palin�, �Michael�)�08700 100 222�
dict
Figure 12.2: State diagram. 

fo. 
last. 
firs. 
i. 
directory. 


prin. 
first. 
last. 
directory[last,first. 


This loop traverses the keys in directory, which are tuples. It assigns the elements of each 
tuple to las. 
and first, then prints the name and corresponding telephone number. 

There are two ways to represent tuples in a state diagram. The more detailed version 
shows the indices and elements just as they appear in a list. For example, the tuple ('Cleese'. 
'John'. 
would appear as in Figure 12.1. 

But in a larger diagram you might want to leave out the details. For example, a diagram of 
the telephone directory might appear as in Figure 12.2. 

Here the tuples are shown using Python syntax as a graphical shorthand. 

The telephone number in the diagram is the complaints line for the BBC, so please don�t 
call it. 

12.7 Comparing tuples 
The relational operators work with tuples and other sequences; Python starts by comparing 
the first element from each sequence. If they are equal, it goes on to the next elements, and 
so on, until it finds elements that differ. Subsequent elements are not considered (even if 
they are really big). 

>>>(0. 
1,2. 
<(0,3,4. 


Tru. 


>>. 
(0. 
1. 
2000000. 
. 
(0. 
3. 
4. 


Tru. 


The sor. 
function works the same way. It sorts primarily by first element, but in the case 
of a tie, it sorts by second element, and so on. 

This feature lends itself to a pattern called DSU for 


12.8. Sequences of sequences 
Decorate a sequence by building a list of tuples with one or more sort keys preceding the 
elements from the sequence, 

Sort the list of tuples, and 

Undecorate by extracting the sorted elements of the sequence. 

For example, suppose you have a list of words and you want to sort them from longest to 
shortest: 

de. 
sort_by_length(words). 


t. 
[. 


fo. 
wor. 
i. 
words. 


t.append((len(word). 
word). 


t.sort(reverse=True. 


re. 
. 
[. 


fo. 
length. 
wor. 
i. 
t. 


res.append(word. 


retur. 
re. 


The first loop builds a list of tuples, where each tuple is a word preceded by its length. 

sor. 
compares the first element, length, first, and only considers the second element to 
break ties. The keyword argument reverse=Tru. 
tells sor. 
to go in decreasing order. 

The second loop traverses the list of tuples and builds a list of words in descending order 
of length. 

Exercise 12.2. In this example, ties are broken by comparing words, so words with the same length 
appear in reverse alphabetical order. For other applications you might want to break ties at random.
 Modify this example so that words with the same length appear in random order. Hint: 
see the rando. 
function in the rando. 
module. Solution: http. 
/. 
thinkpython. 
com. 
code. 
unstable. 
sort. 
p. 
. 

12.8 Sequences of sequences 
I have focused on lists of tuples, but almost all of the examples in this chapter also work 
with lists of lists, tuples of tuples, and tuples of lists. To avoid enumerating the possible 
combinations, it is sometimes easier to talk about sequences of sequences. 

In many contexts, the different kinds of sequences (strings, lists and tuples) can be used 
interchangeably. So how and why do you choose one over the others? 

To start with the obvious, strings are more limited than other sequences because the elements
 have to be characters. They are also immutable. If you need the ability to change the 
characters in a string (as opposed to creating a new string), you might want to use a list of 
characters instead. 

Lists are more common than tuples, mostly because they are mutable. But there are a few 
cases where you might prefer tuples: 

1. In some contexts, like a retur. 
statement, it is syntactically simpler to create a tuple 
than a list. In other contexts, you might prefer a list. 

Chapter 12. Tuples 

2. If you want to use a sequence as a dictionary key, you have to use an immutable type 
like a tuple or string. 
3. If you are passing a sequence as an argument to a function, using tuples reduces the 
potential for unexpected behavior due to aliasing. 
Because tuples are immutable, they don�t provide methods like sor. 
and reverse, which 
modify existing lists. But Python provides the built-in functions sorte. 
and reversed, 
which take any sequence as a parameter and return a new list with the same elements in a 
different order. 

12.9 Debugging 
Lists, dictionaries and tuples are known generically as data structures; in this chapter we 
are starting to see compound data structures, like lists of tuples, and dictionaries that contain
 tuples as keys and lists as values. Compound data structures are useful, but they are 
prone to what I call shape errors; that is, errors caused when a data structure has the wrong 
type, size or composition. For example, if you are expecting a list with one integer and I 
give you a plain old integer (not in a list), it won�t work. 

To help debug these kinds of errors, I have written a module called structshap. 
that 
provides a function, also called structshape, that takes any kind of data structure as 
an argument and returns a string that summarizes its shape. You can download it from 

http://thinkpython.com/code/structshape.p. 


Here�s the result for a simple list: 

>>. 
fro. 
structshap. 
impor. 
structshap. 


>>. 
. 
. 
[1,2,3. 


>>. 
prin. 
structshape(t. 


lis. 
o. 
. 
in. 


A fancier program might write �list of 3 ints,� but it was easier not to deal with plurals. 
Here�s a list of lists: 

>>. 
t. 
. 
[[1,2]. 
[3,4]. 
[5,6]. 


>>. 
prin. 
structshape(t2. 


lis. 
o. 
. 
lis. 
o. 
. 
in. 


If the elements of the list are not the same type, structshap. 
groups them, in order, by 
type: 

>>. 
t. 
. 
[1. 
2. 
3. 
4.0. 
'5'. 
'6'. 
[7]. 
[8]. 
9. 


>>. 
prin. 
structshape(t3. 


lis. 
o. 
(. 
int. 
float. 
. 
str. 
. 
lis. 
o. 
int. 
int. 


Here�s a list of tuples: 

>>. 
. 
. 
'abc. 


>>. 
l. 
. 
zip(t. 
s. 


>>. 
prin. 
structshape(lt. 


lis. 
o. 
. 
tupl. 
o. 
(int. 
str. 


And here�s a dictionary with 3 items that map integers to strings. 

>>. 
. 
. 
dict(lt. 


>>. 
prin. 
structshape(d. 


dic. 
o. 
. 
int->st. 


If you are having trouble keeping track of your data structures, structshap. 
can help. 


12.10. Glossary 
12.10 Glossary 
tuple: An immutable sequence of elements. 

tuple assignment: An assignment with a sequence on the right side and a tuple of variables
 on the left. The right side is evaluated and then its elements are assigned to the 
variables on the left. 

gather: The operation of assembling a variable-length argument tuple. 

scatter: The operation of treating a sequence as a list of arguments. 

DSU: Abbreviation of �decorate-sort-undecorate,� a pattern that involves building a list 
of tuples, sorting, and extracting part of the result. 

data structure: A collection of related values, often organized in lists, dictionaries, tuples, 
etc. 

shape (of a data structure): A summary of the type, size and composition of a data structure.
 

12.11 Exercises 
Exercise 12.3. Write a function called most_frequen. 
that takes a string and prints the letters
 in decreasing order of frequency. Find text samples from several different languages and see 
how letter frequency varies between languages. Compare your results with the tables at http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Letter. 
frequencie. 
. Solution: http. 
/. 
thinkpython. 
com. 


code. 
most. 
frequent. 
p. 
. 
Exercise 12.4. More anagrams! 

1. Write a program that reads a word list from a file (see Section 9.1) and prints all the sets of 
words that are anagrams. 
Here is an example of what the output might look like: 

['deltas'. 
'desalt'. 
'lasted'. 
'salted'. 
'slated'. 
'staled'. 


['retainers'. 
'ternaries'. 


['generating'. 
'greatening'. 


['resmelts'. 
'smelters'. 
'termless'. 


Hint: you might want to build a dictionary that maps from a set of letters to a list of words 
that can be spelled with those letters. The question is, how can you represent the set of letters 
in a way that can be used as a key? 

2. Modify the previous program so that it prints the largest set of anagrams first, followed by the 
second largest set, and so on. 
3. In Scrabble a �bingo� is when you play all seven tiles in your rack, along with a letter on 
the board, to form an eight-letter word. What set of 8 letters forms the most possible bingos? 
Hint: there are seven. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
anagram. 
sets. 
p. 
. 


Chapter 12. Tuples 

Exercise 12.5. Two words form a �metathesis pair� if you can transform one into the other by 
swapping two letters; for example, �converse� and �conserve.� Write a program that finds all of 
the metathesis pairs in the dictionary. Hint: don�t test all pairs of words, and don�t test all possible 
swaps. Solution: http. 
/. 
thinkpython. 
com. 
code. 
metathesis. 
p. 
. Credit: This exercise is 
inspired by an example at http. 
/. 
puzzlers. 
or. 
. 
Exercise 12.6. Here�s another Car Talk Puzzler (http. 
/. 
www. 
cartalk. 
com. 
content. 
puzzler. 
): 

What is the longest English word, that remains a valid English word, as you remove its 

letters one at a time? 
Now, letters can be removed from either end, or the middle, but you can�t rearrange any 
of the letters. Every time you drop a letter, you wind up with another English word. If 
you do that, you�re eventually going to wind up with one letter and that too is going 
to be an English word�one that�s found in the dictionary. I want to know what�s the 
longest word and how many letters does it have? 

I�m going to give you a little modest example: Sprite. Ok? You start off with sprite, 
you take a letter off, one from the interior of the word, take the r away, and we�re left 
with the word spite, then we take the e off the end, we�re left with spit, we take the s off, 
we�re left with pit, it, and I. 

Write a program to find all words that can be reduced in this way, and then find the longest one. 

This exercise is a little more challenging than most, so here are some suggestions: 

1. You might want to write a function that takes a word and computes a list of all the words that 
can be formed by removing one letter. These are the �children� of the word. 
2. Recursively, a word is reducible if any of its children are reducible. As a base case, you can 
consider the empty string reducible. 
3. The wordlist I provided, words.txt, doesn�t contain single letter words. So you might want 
to add �I�, �a�, and the empty string. 
4. To improve the performance of your program, you might want to memoize the words that are 
known to be reducible. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
reducible. 
p. 
. 


Chapter 13 

Case study: data structure 
selection 

13.1 Word frequency analysis 
As usual, you should at least attempt the following exercises before you read my solutions. 

Exercise 13.1. Write a program that reads a file, breaks each line into words, strips whitespace and 
punctuation from the words, and converts them to lowercase. 

Hint: The strin. 
module provides strings named whitespace, which contains space, tab, newline, 
etc., and punctuatio. 
which contains the punctuation characters. Let�s see if we can make Python 
swear: 

>>. 
impor. 
strin. 


>>. 
prin. 
string.punctuatio. 


!"#$%&'()*+,-./:;<=>?@[\]^_`{|}. 


Also, you might consider using the string methods strip, replac. 
and translate. 
Exercise 13.2. Go to Project Gutenberg (http. 
/. 
gutenberg. 
or. 
) and download your favorite 
out-of-copyright book in plain text format. 


Modify your program from the previous exercise to read the book you downloaded, skip over the 
header information at the beginning of the file, and process the rest of the words as before. 


Then modify the program to count the total number of words in the book, and the number of times 
each word is used. 


Print the number of different words used in the book. Compare different books by different authors, 
written in different eras. Which author uses the most extensive vocabulary? 
Exercise 13.3. Modify the program from the previous exercise to print the 20 most frequently-used 
words in the book. 
Exercise 13.4. Modify the previous program to read a word list (see Section 9.1) and then print all 
the words in the book that are not in the word list. How many of them are typos? How many of 
them are common words that should be in the word list, and how many of them are really obscure? 



Chapter 13. Case study: data structure selection 

13.2 Random numbers 
Given the same inputs, most computer programs generate the same outputs every time, 
so they are said to be deterministic. Determinism is usually a good thing, since we expect 
the same calculation to yield the same result. For some applications, though, we want the 
computer to be unpredictable. Games are an obvious example, but there are more. 

Making a program truly nondeterministic turns out to be not so easy, but there are ways 
to make it at least seem nondeterministic. One of them is to use algorithms that generate 
pseudorandom numbers. Pseudorandom numbers are not truly random because they are 
generated by a deterministic computation, but just by looking at the numbers it is all but 
impossible to distinguish them from random. 

The rando. 
module provides functions that generate pseudorandom numbers (which I 
will simply call �random� from here on). 

The function rando. 
returns a random float between 0.0 and 1.0 (including 0.0 but not 1.0). 
Each time you call random, you get the next number in a long series. To see a sample, run 
this loop: 

impor. 
rando. 


fo. 
. 
i. 
range(10). 


. 
. 
random.random(. 


prin. 
. 


The function randin. 
takes parameters lo. 
and hig. 
and returns an integer between lo. 
and hig. 
(including both). 

>>. 
random.randint(5. 
10. 
. 
>>. 
random.randint(5. 
10. 
. 


To choose an element from a sequence at random, you can use choice: 

>>>t. 
[1. 
2. 
3. 
>>. 
random.choice(t. 
. 
>>. 
random.choice(t. 
. 


The rando. 
module also provides functions to generate random values from continuous 
distributions including Gaussian, exponential, gamma, and a few more. 

Exercise 13.5. Write a function named choose_from_his. 
that takes a histogram as defined in 
Section 11.1 and returns a random value from the histogram, chosen with probability in proportion 
to frequency. For example, for this histogram: 

>>>t. 
['a'. 
'a'. 
'b'. 
>>. 
his. 
. 
histogram(t. 
>>. 
prin. 
his. 
{'a'. 
2. 
'b'. 
1. 


your function should return 'a. 
with probability 2/3 and 'b. 
with probability 1/3. 


13.3. Word histogram 
13.3 Word histogram 
You should attempt the previous exercises before you go on. You can download my solution
 from http://thinkpython.com/code/analyze_book.py. You will also need http. 
//thinkpython.com/code/emma.txt. 

Here is a program that reads a file and builds a histogram of the words in the file: 

impor. 
strin. 


de. 
process_file(filename). 
his. 
. 
dict(. 
f. 
. 
open(filename. 
fo. 
lin. 
i. 
fp. 


process_line(line. 
hist. 
retur. 
his. 


de. 
process_line(line. 
hist). 
lin. 
. 
line.replace('-'. 
''. 


fo. 
wor. 
i. 
line.split(). 
wor. 
. 
word.strip(string.punctuatio. 
. 
string.whitespace. 
wor. 
. 
word.lower(. 


hist[word. 
. 
hist.get(word. 
0. 
. 
. 


his. 
. 
process_file('emma.txt'. 
This program reads emma.txt, which contains the text of Emma by Jane Austen. 


process_fil. 
loops through the lines of the file, passing them one at a time to process_line. The histogram his. 
is being used as an accumulator. 

process_lin. 
uses the string method replac. 
to replace hyphens with spaces before using spli. 
to break the line into a list of strings. It traverses the list of words and uses stri. 
and lowe. 
to remove punctuation and convert to lower case. (It is a shorthand to say that 
strings are �converted;� remember that string are immutable, so methods like stri. 
and lowe. 
return new strings.) 

Finally, process_lin. 
updates the histogram by creating a new item or incrementing an 
existing one. 

To count the total number of words in the file, we can add up the frequencies in the histogram:
 

de. 
total_words(hist). 
retur. 
sum(hist.values(). 


The number of different words is just the number of items in the dictionary: 

de. 
different_words(hist). 
retur. 
len(hist. 


Here is some code to print the results: 

prin. 
'Tota. 
numbe. 
o. 
words:'. 
total_words(hist. 
prin. 
'Numbe. 
o. 
differen. 
words:'. 
different_words(hist. 



Chapter 13. Case study: data structure selection 

And the results: 

Tota. 
numbe. 
o. 
words. 
16108. 
Numbe. 
o. 
differen. 
words. 
721. 


13.4 Most common words 
To find the most common words, we can apply the DSU pattern; most_commo. 
takes a 
histogram and returns a list of word-frequency tuples, sorted in reverse order by frequency: 

de. 
most_common(hist). 
t. 
[. 
fo. 
key. 
valu. 
i. 
hist.items(). 


t.append((value. 
key). 


t.sort(reverse=True. 
retur. 
. 


Here is a loop that prints the ten most common words: 

. 
. 
most_common(hist. 
prin. 
'Th. 
mos. 
commo. 
word. 
are:. 
fo. 
freq. 
wor. 
i. 
t[0:10]. 


prin. 
word. 
'\t'. 
fre. 


And here are the results from Emma: 

Th. 
mos. 
commo. 
word. 
are. 
t. 
524. 
th. 
520. 
an. 
489. 
o. 
429. 
. 
319. 
. 
313. 
i. 
252. 
he. 
248. 
wa. 
240. 
sh. 
236. 


13.5 Optional parameters 
We have seen built-in functions and methods that take a variable number of arguments. It 
is possible to write user-defined functions with optional arguments, too. For example, here 
is a function that prints the most common words in a histogram 

de. 
print_most_common(hist. 
num=10). 
. 
. 
most_common(hist. 
prin. 
'Th. 
mos. 
commo. 
word. 
are:. 
fo. 
freq. 
wor. 
i. 
t[:num]. 


prin. 
word. 
'\t'. 
fre. 
The first parameter is required; the second is optional. The default value of nu. 
is 10. 

If you only provide one argument: 


13.6. Dictionary subtraction 
print_most_common(hist. 


nu. 
gets the default value. If you provide two arguments: 
print_most_common(hist. 
20. 


nu. 
gets the value of the argument instead. In other words, the optional argument overrides
 the default value. 
If a function has both required and optional parameters, all the required parameters have 
to come first, followed by the optional ones. 

13.6 Dictionary subtraction 
Finding the words from the book that are not in the word list from words.tx. 
is a problem 
you might recognize as set subtraction; that is, we want to find all the words from one set 
(the words in the book) that are not in another set (the words in the list). 

subtrac. 
takes dictionaries d. 
and d. 
and returns a new dictionary that contains all the 
keys from d. 
that are not in d2. Since we don�t really care about the values, we set them all 
to None. 

de. 
subtract(d1. 
d2). 


re. 
. 
dict(. 


fo. 
ke. 
i. 
d1. 


i. 
ke. 
no. 
i. 
d2. 


res[key. 
. 
Non. 


retur. 
re. 


To find the words in the book that are not in words.txt, we can use process_fil. 
to build 
a histogram for words.txt, and then subtract: 

word. 
. 
process_file('words.txt'. 


dif. 
. 
subtract(hist. 
words. 


prin. 
"Th. 
word. 
i. 
th. 
boo. 
tha. 
aren'. 
i. 
th. 
wor. 
lis. 
are:. 


fo. 
wor. 
i. 
diff.keys(). 


prin. 
word. 


Here are some of the results from Emma: 

Th. 
word. 
i. 
th. 
boo. 
tha. 
aren'. 
i. 
th. 
wor. 
lis. 
are. 


rencontr. 
jane'. 
blanch. 
woodhouse. 
disingenuousnes. 


friend'. 
venic. 
apartmen. 
... 


Some of these words are names and possessives. Others, like �rencontre,� are no longer in 
common use. But a few are common words that should really be in the list! 

Exercise 13.6. Python provides a data structure called se. 
that provides many common set operations.
 Read the documentation at http. 
/. 
docs. 
python. 
org. 
2. 
library. 
stdtypes. 
html. 
types. 
se. 
and write a program that uses set subtraction to find words in the book that are not in 
the word list. Solution: http. 
/. 
thinkpython. 
com. 
code. 
analyze. 
book2. 
p. 
. 

13.7 Random words 
To choose a random word from the histogram, the simplest algorithm is to build a list with 
multiple copies of each word, according to the observed frequency, and then choose from 
the list: 


Chapter 13. Case study: data structure selection 

de. 
random_word(h). 


t. 
[. 


fo. 
word. 
fre. 
i. 
h.items(). 


t.extend([word. 
. 
freq. 


retur. 
random.choice(t. 


The expression [word. 
. 
fre. 
creates a list with fre. 
copies of the string word. The exten. 
method is similar to appen. 
except that the argument is a sequence. 

Exercise 13.7. This algorithm works, but it is not very efficient; each time you choose a random 
word, it rebuilds the list, which is as big as the original book. An obvious improvement is to build 
the list once and then make multiple selections, but the list is still big. 

An alternative is: 

1. Use key. 
to get a list of the words in the book. 
2. Build a list that contains the cumulative sum of the word frequencies (see Exercise 10.3). The 
last item in this list is the total number of words in the book, n. 
3. Choose a random number from 1 to n. Use a bisection search (See Exercise 10.11) to find the 
index where the random number would be inserted in the cumulative sum. 
4. Use the index to find the corresponding word in the word list. 
Write a program that uses this algorithm to choose a random word from the book. Solution: http. 
/. 
thinkpython. 
com. 
code. 
analyze. 
book3. 
p. 
. 

13.8 Markov analysis 
If you choose words from the book at random, you can get a sense of the vocabulary, you 
probably won�t get a sentence: 

thi. 
th. 
smal. 
regar. 
harrie. 
whic. 
knightley'. 
i. 
mos. 
thing. 


A series of random words seldom makes sense because there is no relationship between 
successive words. For example, in a real sentence you would expect an article like �the� to 
be followed by an adjective or a noun, and probably not a verb or adverb. 

One way to measure these kinds of relationships is Markov analysis, which characterizes, 
for a given sequence of words, the probability of the word that comes next. For example, 
the song Eric, the Half a Bee begins: 

Half a bee, philosophically, 
Must, ipso facto, half not be. 
But half the bee has got to be 
Vis a vis, its entity. D�you see? 


But can a bee be said to be 
Or not to be an entire bee 
When half the bee is not a bee 
Due to some ancient injury? 



13.9. Data structures 
In this text, the phrase �half the� is always followed by the word �bee,� but the phrase �the 
bee� might be followed by either �has� or �is�. 

The result of Markov analysis is a mapping from each prefix (like �half the� and �the bee�) 
to all possible suffixes (like �has� and �is�). 

Given this mapping, you can generate a random text by starting with any prefix and choosing
 at random from the possible suffixes. Next, you can combine the end of the prefix and 
the new suffix to form the next prefix, and repeat. 

For example, if you start with the prefix �Half a,� then the next word has to be �bee,� 
because the prefix only appears once in the text. The next prefix is �a bee,� so the next 
suffix might be �philosophically,� �be� or �due.� 

In this example the length of the prefix is always two, but you can do Markov analysis with 
any prefix length. The length of the prefix is called the �order� of the analysis. 

Exercise 13.8. Markov analysis: 

1. Write a program to read a text from a file and perform Markov analysis. The result should be 
a dictionary that maps from prefixes to a collection of possible suffixes. The collection might 
be a list, tuple, or dictionary; it is up to you to make an appropriate choice. You can test your 
program with prefix length two, but you should write the program in a way that makes it easy 
to try other lengths. 
2. Add a function to the previous program to generate random text based on the Markov analysis. 
Here is an example from Emma with prefix length 2: 
He was very clever, be it sweetness or be angry, ashamed or only amused, at such 
a stroke. She had never thought of Hannah till you were never meant for me?" "I 
cannot make speeches, Emma:" he soon cut it all himself. 

For this example, I left the punctuation attached to the words. The result is almost syntactically
 correct, but not quite. Semantically, it almost makes sense, but not quite. 
What happens if you increase the prefix length? Does the random text make more sense? 

3. Once your program is working, you might want to try a mash-up: if you analyze text from 
two or more books, the random text you generate will blend the vocabulary and phrases from 
the sources in interesting ways. 
Credit: This case study is based on an example from Kernighan and Pike, The Practice of Programming,
 Addison-Wesley, 1999. 

You should attempt this exercise before you go on; then you can can download my 
solution from http://thinkpython.com/code/markov.py. You will also need http:/. 


thinkpython.com/code/emma.txt. 

13.9 Data structures 
Using Markov analysis to generate random text is fun, but there is also a point to this 
exercise: data structure selection. In your solution to the previous exercises, you had to 
choose: 

� How to represent the prefixes. 

Chapter 13. Case study: data structure selection 

� How to represent the collection of possible suffixes. 
� How to represent the mapping from each prefix to the collection of possible suffixes. 
Ok, the last one is the easy; the only mapping type we have seen is a dictionary, so it is the 
natural choice. 

For the prefixes, the most obvious options are string, list of strings, or tuple of strings. For 
the suffixes, one option is a list; another is a histogram (dictionary). 

How should you choose? The first step is to think about the operations you will need to 
implement for each data structure. For the prefixes, we need to be able to remove words 
from the beginning and add to the end. For example, if the current prefix is �Half a,� and 
the next word is �bee,� you need to be able to form the next prefix, �a bee.� 

Your first choice might be a list, since it is easy to add and remove elements, but we also 
need to be able to use the prefixes as keys in a dictionary, so that rules out lists. With tuples, 
you can�t append or remove, but you can use the addition operator to form a new tuple: 

de. 
shift(prefix. 
word). 


retur. 
prefix[1:. 
. 
(word,. 


shif. 
takes a tuple of words, prefix, and a string, word, and forms a new tuple that has 
all the words in prefi. 
except the first, and wor. 
added to the end. 

For the collection of suffixes, the operations we need to perform include adding a new 
suffix (or increasing the frequency of an existing one), and choosing a random suffix. 

Adding a new suffix is equally easy for the list implementation or the histogram. Choosing 
a random element from a list is easy; choosing from a histogram is harder to do efficiently 
(see Exercise 13.7). 

So far we have been talking mostly about ease of implementation, but there are other factors
 to consider in choosing data structures. One is run time. Sometimes there is a theoretical
 reason to expect one data structure to be faster than other; for example, I mentioned that 
the i. 
operator is faster for dictionaries than for lists, at least when the number of elements 
is large. 

But often you don�t know ahead of time which implementation will be faster. One option is 
to implement both of them and see which is better. This approach is called benchmarking. 
A practical alternative is to choose the data structure that is easiest to implement, and then 
see if it is fast enough for the intended application. If so, there is no need to go on. If not, 
there are tools, like the profil. 
module, that can identify the places in a program that take 
the most time. 

The other factor to consider is storage space. For example, using a histogram for the collection
 of suffixes might take less space because you only have to store each word once, no 
matter how many times it appears in the text. In some cases, saving space can also make 
your program run faster, and in the extreme, your program might not run at all if you run 
out of memory. But for many applications, space is a secondary consideration after run 
time. 

One final thought: in this discussion, I have implied that we should use one data structure 
for both analysis and generation. But since these are separate phases, it would also be possible
 to use one structure for analysis and then convert to another structure for generation. 
This would be a net win if the time saved during generation exceeded the time spent in 
conversion. 


13.10. Debugging 
13.10 Debugging 
When you are debugging a program, and especially if you are working on a hard bug, 
there are four things to try: 

reading: Examine your code, read it back to yourself, and check that it says what you 
meant to say. 

running: Experiment by making changes and running different versions. Often if you dis


play the right thing at the right place in the program, the problem becomes obvious, 

but sometimes you have to spend some time to build scaffolding. 

ruminating: Take some time to think! What kind of error is it: syntax, runtime, semantic? 
What information can you get from the error messages, or from the output of the 
program? What kind of error could cause the problem you�re seeing? What did you 
change last, before the problem appeared? 

retreating: At some point, the best thing to do is back off, undoing recent changes, until 

you get back to a program that works and that you understand. Then you can start 

rebuilding. 

Beginning programmers sometimes get stuck on one of these activities and forget the others.
 Each activity comes with its own failure mode. 

For example, reading your code might help if the problem is a typographical error, but 
not if the problem is a conceptual misunderstanding. If you don�t understand what your 
program does, you can read it 100 times and never see the error, because the error is in 
your head. 

Running experiments can help, especially if you run small, simple tests. But if you run 
experiments without thinking or reading your code, you might fall into a pattern I call 
�random walk programming,� which is the process of making random changes until the 
program does the right thing. Needless to say, random walk programming can take a long 
time. 

You have to take time to think. Debugging is like an experimental science. You should have 
at least one hypothesis about what the problem is. If there are two or more possibilities, try 
to think of a test that would eliminate one of them. 

Taking a break helps with the thinking. So does talking. If you explain the problem to 
someone else (or even yourself), you will sometimes find the answer before you finish 
asking the question. 

But even the best debugging techniques will fail if there are too many errors, or if the code 
you are trying to fix is too big and complicated. Sometimes the best option is to retreat, 
simplifying the program until you get to something that works and that you understand. 

Beginning programmers are often reluctant to retreat because they can�t stand to delete a 
line of code (even if it�s wrong). If it makes you feel better, copy your program into another 
file before you start stripping it down. Then you can paste the pieces back in a little bit at a 
time. 

Finding a hard bug requires reading, running, ruminating, and sometimes retreating. If 
you get stuck on one of these activities, try the others. 


Chapter 13. Case study: data structure selection 

13.11 Glossary 
deterministic: Pertaining to a program that does the same thing each time it runs, given 
the same inputs. 

pseudorandom: Pertaining to a sequence of numbers that appear to be random, but are 
generated by a deterministic program. 

default value: The value given to an optional parameter if no argument is provided. 

override: To replace a default value with an argument. 

benchmarking: The process of choosing between data structures by implementing alternatives
 and testing them on a sample of the possible inputs. 

13.12 Exercises 
Exercise 13.9. The �rank� of a word is its position in a list of words sorted by frequency: the most 
common word has rank 1, the second most common has rank 2, etc. 

Zipf�s law describes a relationship between the ranks and frequencies of words in natural languages 
(http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Zipf. 
s. 
la. 
). Specifically, it predicts that the frequency, 

f , of the word with rank r is: 

f = 
cr..s 

where s and c are parameters that depend on the language and the text. If you take the logarithm of 
both sides of this equation, you get: 

log f = 
log c . 
s log r 
So if you plot log f versus log r, you should get a straight line with slope ..s and intercept log c. 

Write a program that reads a text from a file, counts word frequencies, and prints one line for each 
word, in descending order of frequency, with log f and log r. Use the graphing program of your 
choice to plot the results and check whether they form a straight line. Can you estimate the value of 
s? 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
zipf. 
p. 
. To make the plots, you might have to 
install matplotlib (see http. 
/. 
matplotlib. 
sourceforge. 
net. 
). 


Chapter 14 

Files 

14.1 Persistence 
Most of the programs we have seen so far are transient in the sense that they run for a short 
time and produce some output, but when they end, their data disappears. If you run the 
program again, it starts with a clean slate. 

Other programs are persistent: they run for a long time (or all the time); they keep at least 
some of their data in permanent storage (a hard drive, for example); and if they shut down 
and restart, they pick up where they left off. 

Examples of persistent programs are operating systems, which run pretty much whenever 
a computer is on, and web servers, which run all the time, waiting for requests to come in 
on the network. 

One of the simplest ways for programs to maintain their data is by reading and writing 
text files. We have already seen programs that read text files; in this chapter we will see 
programs that write them. 

An alternative is to store the state of the program in a database. In this chapter I will present 
a simple database and a module, pickle, that makes it easy to store program data. 

14.2 Reading and writing 
A text file is a sequence of characters stored on a permanent medium like a hard drive, 
flash memory, or CD-ROM. We saw how to open and read a file in Section 9.1. 

To write a file, you have to open it with mode 'w. 
as a second parameter: 

>>. 
fou. 
. 
open('output.txt'. 
'w'. 


>>. 
prin. 
fou. 


<ope. 
fil. 
'output.txt'. 
mod. 
'w. 
a. 
0xb7eb2410. 


If the file already exists, opening it in write mode clears out the old data and starts fresh, 
so be careful! If the file doesn�t exist, a new one is created. 

The writ. 
method puts data into the file. 


Chapter 14. Files 

>>. 
line. 
. 
"Thi. 
here'. 
th. 
wattle,\n. 
>>. 
fout.write(line1. 


Again, the file object keeps track of where it is, so if you call writ. 
again, it adds the new 
data to the end. 

>>. 
line. 
. 
"th. 
emble. 
o. 
ou. 
land.\n. 
>>. 
fout.write(line2. 


When you are done writing, you have to close the file. 

>>. 
fout.close(. 


14.3 Format operator 
The argument of writ. 
has to be a string, so if we want to put other values in a file, we 
have to convert them to strings. The easiest way to do that is with str: 

>>>x. 
5. 
>>. 
f.write(str(x). 


An alternative is to use the format operator, %. When applied to integers, . 
is the modulus 
operator. But when the first operand is a string, . 
is the format operator. 

The first operand is the format string, which contains one or more format sequences, 
which specify how the second operand is formatted. The result is a string. 

For example, the format sequence '%d. 
means that the second operand should be formatted
 as an integer (. 
stands for �decimal�): 

>>. 
camel. 
. 
4. 
>>. 
'%d. 
. 
camel. 


'42. 


The result is the string '42', which is not to be confused with the integer value 42. 

A format sequence can appear anywhere in the string, so you can embed a value in a 
sentence: 

>>. 
camel. 
. 
4. 
>>. 
'. 
hav. 
spotte. 
%. 
camels.. 
. 
camel. 
'. 
hav. 
spotte. 
4. 
camels.. 


If there is more than one format sequence in the string, the second argument has to be a 
tuple. Each format sequence is matched with an element of the tuple, in order. 

The following example uses '%d. 
to format an integer, '%g. 
to format a floating-point number
 (don�t ask why), and '%s. 
to format a string: 

>>. 
'I. 
%. 
year. 
. 
hav. 
spotte. 
%. 
%s.. 
. 
(3. 
0.1. 
'camels'. 
'I. 
. 
year. 
. 
hav. 
spotte. 
0.. 
camels.. 


The number of elements in the tuple has to match the number of format sequences in the 
string. Also, the types of the elements have to match the format sequences: 

>>. 
'%. 
%d%d. 
. 
(1. 
2. 
TypeError. 
no. 
enoug. 
argument. 
fo. 
forma. 
strin. 
>>. 
'%d. 
. 
'dollars. 
TypeError. 
illega. 
argumen. 
typ. 
fo. 
built-i. 
operatio. 



14.4. Filenames and paths 
In the first example, there aren�t enough elements; in the second, the element is the wrong 
type. 

The format operator is powerful, but it can be difficult to use. You can read more about it 
at http://docs.python.org/2/library/stdtypes.html#string. 
formatting. 

14.4 Filenames and paths 
Files are organized into directories (also called �folders�). Every running program has a 
�current directory,� which is the default directory for most operations. For example, when 
you open a file for reading, Python looks for it in the current directory. 

The o. 
module provides functions for working with files and directories (�os� stands for 
�operating system�). os.getcw. 
returns the name of the current directory: 

>>. 
impor. 
o. 
>>. 
cw. 
. 
os.getcwd(. 
>>. 
prin. 
cw. 
/home/dinsdal. 


cw. 
stands for �current working directory.� The result in this example is /home/dinsdale, 
which is the home directory of a user named dinsdale. 

A string like cw. 
that identifies a file is called a path.A relative path starts from the current 
directory; an absolute path starts from the topmost directory in the file system. 

The paths we have seen so far are simple filenames, so they are relative to the current 
directory. To find the absolute path to a file, you can use os.path.abspath: 

>>. 
os.path.abspath('memo.txt'. 
'/home/dinsdale/memo.txt. 


os.path.exist. 
checks whether a file or directory exists: 

>>. 
os.path.exists('memo.txt'. 
Tru. 
If it exists, os.path.isdi. 
checks whether it�s a directory: >>. 
os.path.isdir('memo.txt'. 


Fals. 
>>. 
os.path.isdir('music'. 
Tru. 


Similarly, os.path.isfil. 
checks whether it�s a file. 

os.listdi. 
returns a list of the files (and other directories) in the given directory: >>. 
os.listdir(cwd. 
['music'. 
'photos'. 
'memo.txt'. 


To demonstrate these functions, the following example �walks� through a directory, prints 
the names of all the files, and calls itself recursively on all the directories. 

de. 
walk(dirname). 
fo. 
nam. 
i. 
os.listdir(dirname). 
pat. 
. 
os.path.join(dirname. 
name. 



Chapter 14. Files 

i. 
os.path.isfile(path). 


prin. 
pat. 


else. 


walk(path. 


os.path.joi. 
takes a directory and a file name and joins them into a complete path. 
Exercise 14.1. The o. 
module provides a function called wal. 
that is similar to this one but more 
versatile. Read the documentation and use it to print the names of the files in a given directory and 
its subdirectories. 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
walk. 
p. 
. 

14.5 Catching exceptions 
A lot of things can go wrong when you try to read and write files. If you try to open a file 
that doesn�t exist, you get an IOError: 

>>. 
fi. 
. 
open('bad_file'. 


IOError. 
[Errn. 
2. 
N. 
suc. 
fil. 
o. 
directory. 
'bad_file. 


If you don�t have permission to access a file: 

>>. 
fou. 
. 
open('/etc/passwd'. 
'w'. 


IOError. 
[Errn. 
13. 
Permissio. 
denied. 
'/etc/passwd. 


And if you try to open a directory for reading, you get 

>>. 
fi. 
. 
open('/home'. 


IOError. 
[Errn. 
21. 
I. 
. 
director. 


To avoid these errors, you could use functions like os.path.exist. 
and os.path.isfile, 
but it would take a lot of time and code to check all the possibilities (if �Errn. 
21� is any 
indication, there are at least 21 things that can go wrong). 

It is better to go ahead and try�and deal with problems if they happen�which is exactly 
what the tr. 
statement does. The syntax is similar to an i. 
statement: 

try. 


fi. 
. 
open('bad_file'. 


fo. 
lin. 
i. 
fin. 


prin. 
lin. 


fin.close(. 


except. 


prin. 
'Somethin. 
wen. 
wrong.. 


Python starts by executing the tr. 
clause. If all goes well, it skips the excep. 
clause and 
proceeds. If an exception occurs, it jumps out of the tr. 
clause and executes the excep. 
clause. 

Handling an exception with a tr. 
statement is called catching an exception. In this example,
 the excep. 
clause prints an error message that is not very helpful. In general, catching 
an exception gives you a chance to fix the problem, or try again, or at least end the program 
gracefully. 

Exercise 14.2. Write a function called se. 
that takes as arguments a pattern string, a replacement 
string, and two filenames; it should read the first file and write the contents into the second file 
(creating it if necessary). If the pattern string appears anywhere in the file, it should be replaced 
with the replacement string. 


14.6. Databases 
If an error occurs while opening, reading, writing or closing files, your program should catch the 
exception, print an error message, and exit. Solution: http. 
/. 
thinkpython. 
com. 
code. 
sed. 
p. 
. 

14.6 Databases 
A database is a file that is organized for storing data. Most databases are organized like a 
dictionary in the sense that they map from keys to values. The biggest difference is that the 
database is on disk (or other permanent storage), so it persists after the program ends. 

The module anydb. 
provides an interface for creating and updating database files. As an 
example, I�ll create a database that contains captions for image files. 

Opening a database is similar to opening other files: 

>>. 
impor. 
anydb. 


>>. 
d. 
. 
anydbm.open('captions.db'. 
'c'. 


The mode 'c. 
means that the database should be created if it doesn�t already exist. The 
result is a database object that can be used (for most operations) like a dictionary. If you 
create a new item, anydb. 
updates the database file. 

>>. 
db['cleese.png']. 
'Phot. 
o. 
Joh. 
Cleese.. 


When you access one of the items, anydb. 
reads the file: 

>>. 
prin. 
db['cleese.png'. 


Phot. 
o. 
Joh. 
Cleese. 


If you make another assignment to an existing key, anydb. 
replaces the old value: 

>>. 
db['cleese.png']. 
'Phot. 
o. 
Joh. 
Clees. 
doin. 
. 
sill. 
walk.. 


>>. 
prin. 
db['cleese.png'. 


Phot. 
o. 
Joh. 
Clees. 
doin. 
. 
sill. 
walk. 


Many dictionary methods, like key. 
and items, also work with database objects. So does 
iteration with a fo. 
statement. 

fo. 
ke. 
i. 
db. 


prin. 
ke. 


As with other files, you should close the database when you are done: 

>>. 
db.close(. 


14.7 Pickling 
A limitation of anydb. 
is that the keys and values have to be strings. If you try to use any 
other type, you get an error. 

The pickl. 
module can help. It translates almost any type of object into a string suitable 
for storage in a database, and then translates strings back into objects. 

pickle.dump. 
takes an object as a parameter and returns a string representation (dump. 
is 
short for �dump string�): 


Chapter 14. Files 

>>. 
impor. 
pickl. 


>>>t. 
[1. 
2. 
3. 


>>. 
pickle.dumps(t. 


'(lp0\nI1\naI2\naI3\na.. 


The format isn�t obvious to human readers; it is meant to be easy for pickl. 
to interpret. pickle.load. 
(�load string�) reconstitutes the object: 

>>>t. 
=[1,2,3. 


>>. 
. 
. 
pickle.dumps(t1. 


>>. 
t. 
. 
pickle.loads(s. 


>>. 
prin. 
t. 


[1. 
2. 
3. 


Although the new object has the same value as the old, it is not (in general) the same object: 

>>>t. 
=. 
t. 


Tru. 


>>>t. 
i. 
t. 


Fals. 


In other words, pickling and then unpickling has the same effect as copying the object. 

You can use pickl. 
to store non-strings in a database. In fact, this combination is so common
 that it has been encapsulated in a module called shelve. 

Exercise 14.3. If you download my solution to Exercise 12.4 from http. 
/. 
thinkpython. 
com. 
code. 
anagram. 
sets. 
p. 
, you�ll see that it creates a dictionary that maps from a sorted string of 
letters to the list of words that can be spelled with those letters. For example, 'opst. 
maps to the 
list ['opts'. 
'post'. 
'pots'. 
'spot'. 
'stop'. 
'tops']. 

Write a module that imports anagram_set. 
and provides two new functions: store_anagram. 
should store the anagram dictionary in a �shelf;� read_anagram. 
should look up a word and return 
a list of its anagrams. Solution: http. 
/. 
thinkpython. 
com. 
code. 
anagram. 
db. 
p. 


14.8 Pipes 
Most operating systems provide a command-line interface, also known as a shell. Shells 
usually provide commands to navigate the file system and launch applications. For example,
 in Unix you can change directories with cd, display the contents of a directory with ls, 
and launch a web browser by typing (for example) firefox. 

Any program that you can launch from the shell can also be launched from Python using 
a pipe. A pipe is an object that represents a running program. 

For example, the Unix command l. 
-. 
normally displays the contents of the current directory
 (in long format). You can launch l. 
with os.popen1: 

>>. 
cm. 
. 
'l. 
-l. 


>>. 
f. 
. 
os.popen(cmd. 


The argument is a string that contains a shell command. The return value is an object that 
behaves just like an open file. You can read the output from the l. 
process one line at a 
time with readlin. 
or get the whole thing at once with read: 

1is deprecated now, which means we are supposed to stop using it and start using the subprocess

pope. 
module. But for simple cases, I find subproces. 
more complicated than necessary. So I am going to keep using pope. 
until they take it away. 


14.9. Writing modules 
>>. 
re. 
. 
fp.read(. 


When you are done, you close the pipe like a file: 

>>. 
sta. 
. 
fp.close(. 
>>. 
prin. 
sta. 
Non. 


The return value is the final status of the l. 
process; Non. 
means that it ended normally 
(with no errors). 

For example, most Unix systems provide a command called md5su. 
that reads the contents 
of a file and computes a �checksum.� You can read about MD5 at http://en.wikipedia. 
org/wiki/Md5. This command provides an efficient way to check whether two files have 
the same contents. The probability that different contents yield the same checksum is very 
small (that is, unlikely to happen before the universe collapses). 

You can use a pipe to run md5su. 
from Python and get the result: >>. 
filenam. 
. 
'book.tex. 
>>. 
cm. 
. 
'md5su. 
. 
. 
filenam. 
>>. 
f. 
. 
os.popen(cmd. 
>>. 
re. 
. 
fp.read(. 
>>. 
sta. 
. 
fp.close(. 
>>. 
prin. 
re. 
1e0033f0ed0656636de0d75144ba32e. 
book.te. 
>>. 
prin. 
sta. 
Non. 


Exercise 14.4. In a large collection of MP3 files, there may be more than one copy of the same song, 
stored in different directories or with different file names. The goal of this exercise is to search for 
duplicates. 

1. Write a program that searches a directory and all of its subdirectories, recursively, and returns 
a list of complete paths for all files with a given suffix (like .mp3). Hint: os.pat. 
provides 
several useful functions for manipulating file and path names. 
2. To recognize duplicates, you can use md5su. 
to compute a �checksum� for each files. If two 
files have the same checksum, they probably have the same contents. 
3. To double-check, you can use the Unix command diff. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
find. 
duplicates. 
p. 
. 

14.9 Writing modules 
Any file that contains Python code can be imported as a module. For example, suppose 
you have a file named wc.p. 
with the following code: 

de. 
linecount(filename). 
coun. 
. 
. 
fo. 
lin. 
i. 
open(filename). 


coun. 
+. 
. 
retur. 
coun. 


prin. 
linecount('wc.py'. 



Chapter 14. Files 

If you run this program, it reads itself and prints the number of lines in the file, which is 7. 
You can also import it like this: 

>>. 
impor. 
w. 


. 


Now you have a module object wc: 

>>. 
prin. 
w. 


<modul. 
'wc. 
fro. 
'wc.py'. 


That provides a function called linecount: 

>>. 
wc.linecount('wc.py'. 


. 


So that�s how you write modules in Python. 

The only problem with this example is that when you import the module it executes the 
test code at the bottom. Normally when you import a module, it defines new functions but 
it doesn�t execute them. 

Programs that will be imported as modules often use the following idiom: 

i. 
__name_. 
=. 
'__main__'. 


prin. 
linecount('wc.py'. 


__name_. 
is a built-in variable that is set when the program starts. If the program is running
 as a script, __name_. 
has the value __main__; in that case, the test code is executed. 
Otherwise, if the module is being imported, the test code is skipped. 

Exercise 14.5. Type this example into a file named wc.p. 
and run it as a script. Then run the 
Python interpreter and impor. 
wc. What is the value of __name_. 
when the module is being 
imported? 

Warning: If you import a module that has already been imported, Python does nothing. It does not 
re-read the file, even if it has changed. 

If you want to reload a module, you can use the built-in function reload, but it can be tricky, so 
the safest thing to do is restart the interpreter and then import the module again. 

14.10 Debugging 
When you are reading and writing files, you might run into problems with whitespace. 
These errors can be hard to debug because spaces, tabs and newlines are normally invisible: 

>>. 
. 
. 
'. 
2\. 
3\. 
4. 


>>. 
prin. 
. 


1. 
. 


. 


The built-in function rep. 
can help. It takes any object as an argument and returns a string 
representation of the object. For strings, it represents whitespace characters with backslash 
sequences: 

>>. 
prin. 
repr(s. 


'. 
2\. 
3\. 
4. 



14.11. Glossary 
This can be helpful for debugging. 

One other problem you might run into is that different systems use different characters to 
indicate the end of a line. Some systems use a newline, represented \n. Others use a return 
character, represented \r. Some use both. If you move files between different systems, 
these inconsistencies might cause problems. 

For most systems, there are applications to convert from one format to another. You can 
find them (and read more about this issue) at http://en.wikipedia.org/wiki/Newline. 
Or, of course, you could write one yourself. 

14.11 Glossary 
persistent: Pertaining to a program that runs indefinitely and keeps at least some of its 
data in permanent storage. 

format operator: An operator, %, that takes a format string and a tuple and generates a 
string that includes the elements of the tuple formatted as specified by the format 
string. 

format string: A string, used with the format operator, that contains format sequences. 
format sequence: A sequence of characters in a format string, like %d, that specifies how a 

value should be formatted. 
text file: A sequence of characters stored in permanent storage like a hard drive. 
directory: A named collection of files, also called a folder. 
path: A string that identifies a file. 
relative path: A path that starts from the current directory. 
absolute path: A path that starts from the topmost directory in the file system. 
catch: To prevent an exception from terminating a program using the tr. 
and excep. 
state


ments. 
database: A file whose contents are organized like a dictionary with keys that correspond 
to values. 

14.12 Exercises 
Exercise 14.6. The urlli. 
module provides methods for manipulating URLs and downloading 
information from the web. The following example downloads and prints a secret message from thinkpython.com: 

impor. 
urlli. 


con. 
. 
urllib.urlopen('http://thinkpython.com/secret.html'. 


fo. 
lin. 
i. 
conn. 


prin. 
line.strip(. 


Run this code and follow the instructions you see there. Solution: http. 
/. 
thinkpython. 
com. 
code. 
zip. 
code. 
p. 
. 


Chapter 14. Files 


Chapter 15 
Classes and objects 

Code examples from this chapter are available from http://thinkpython.com/code. 
Point1.py; solutions to the exercises are available from http://thinkpython.com/code. 
Point1_soln.py. 

15.1 User-defined types 
We have used many of Python�s built-in types; now we are going to define a new type. As 
an example, we will create a type called Poin. 
that represents a point in two-dimensional 
space. 

In mathematical notation, points are often written in parentheses with a comma separating 
the coordinates. For example, (0, 0) 
represents the origin, and (x, y) 
represents the point x 
units to the right and y units up from the origin. 

There are several ways we might represent points in Python: 

� We could store the coordinates separately in two variables, . 
and y. 
� We could store the coordinates as elements in a list or tuple. 
� We could create a new type to represent points as objects. 
Creating a new type is (a little) more complicated than the other options, but it has advantages
 that will be apparent soon. 

A user-defined type is also called a class. A class definition looks like this: 

clas. 
Point(object). 


"""Represent. 
. 
poin. 
i. 
2-. 
space."". 


This header indicates that the new class is a Point, which is a kind of object, which is a 
built-in type. 

The body is a docstring that explains what the class is for. You can define variables and 
functions inside a class definition, but we will get back to that later. 

Defining a class named Poin. 
creates a class object. 


Chapter 15. Classes and objects 

xy3.04.0blankPoint
Figure 15.1: Object diagram. 

>>. 
prin. 
Poin. 


<clas. 
'__main__.Point'. 


Because Poin. 
is defined at the top level, its �full name� is __main__.Point. 

The class object is like a factory for creating objects. To create a Point, you call Poin. 
as if it 
were a function. 

>>. 
blan. 
. 
Point(. 


>>. 
prin. 
blan. 


<__main__.Poin. 
instanc. 
a. 
0xb7e9d3ac. 


The return value is a reference to a Point object, which we assign to blank. Creating a new 
object is called instantiation, and the object is an instance of the class. 

When you print an instance, Python tells you what class it belongs to and where it is stored 
in memory (the prefix 0. 
means that the following number is in hexadecimal). 

15.2 Attributes 
You can assign values to an instance using dot notation: 

>>. 
blank.. 
. 
3.. 


>>. 
blank.. 
. 
4.. 


This syntax is similar to the syntax for selecting a variable from a module, such as math.p. 
or string.whitespace. In this case, though, we are assigning values to named elements of 
an object. These elements are called attributes. 

As a noun, �AT-trib-ute� is pronounced with emphasis on the first syllable, as opposed to 
�a-TRIB-ute,� which is a verb. 

The following diagram shows the result of these assignments. A state diagram that shows 
an object and its attributes is called an object diagram; see Figure 15.1. 

The variable blan. 
refers to a Point object, which contains two attributes. Each attribute 
refers to a floating-point number. 

You can read the value of an attribute using the same syntax: 

>>. 
prin. 
blank.. 


4.. 


>>. 
. 
. 
blank.. 


>>. 
prin. 
. 


3.. 


The expression blank.. 
means, �Go to the object blan. 
refers to and get the value of x.� 
In this case, we assign that value to a variable named x. There is no conflict between the 
variable . 
and the attribute x. 

You can use dot notation as part of any expression. For example: 


15.3. Rectangles 
>>. 
prin. 
'(%g. 
%g). 
. 
(blank.x. 
blank.y. 
(3.0. 
4.0. 
>>. 
distanc. 
. 
math.sqrt(blank.x**. 
. 
blank.y**2. 
>>. 
prin. 
distanc. 
5.. 


You can pass an instance as an argument in the usual way. For example: 

de. 
print_point(p). 


prin. 
'(%g. 
%g). 
. 
(p.x. 
p.y. 
print_poin. 
takes a point as an argument and displays it in mathematical notation. To 
invoke it, you can pass blan. 
as an argument: 

>>. 
print_point(blank. 


(3.0. 
4.0. 
Inside the function, . 
is an alias for blank, so if the function modifies p, blan. 
changes. 
Exercise 15.1. Write a function called distance_between_point. 
that takes two Points as arguments
 and returns the distance between them. 


15.3 Rectangles 
Sometimes it is obvious what the attributes of an object should be, but other times you have 
to make decisions. For example, imagine you are designing a class to represent rectangles. 
What attributes would you use to specify the location and size of a rectangle? You can ignore
 angle; to keep things simple, assume that the rectangle is either vertical or horizontal. 

There are at least two possibilities: 

� You could specify one corner of the rectangle (or the center), the width, and the 
height. 
� You could specify two opposing corners. 
At this point it is hard to say whether either is better than the other, so we�ll implement the 
first one, just as an example. 
Here is the class definition: 

clas. 
Rectangle(object). 
"""Represent. 
. 
rectangle. 


attributes. 
width. 
height. 
corner. 


"". 
The docstring lists the attributes: widt. 
and heigh. 
are numbers; corne. 
is a Point object 
that specifies the lower-left corner. 

To represent a rectangle, you have to instantiate a Rectangle object and assign values to the 
attributes: 

bo. 
. 
Rectangle(. 
box.widt. 
. 
100.. 
box.heigh. 
. 
200.. 



Chapter 15. Classes and objects 

y0.0x0.0width100.0corner200.0PointRectangleboxheight
Figure 15.2: Object diagram. 

box.corne. 
. 
Point(. 
box.corner.. 
. 
0.. 
box.corner.. 
. 
0.. 


The expression box.corner.. 
means, �Go to the object bo. 
refers to and select the attribute 
named corner; then go to that object and select the attribute named x.� 

Figure 15.2 shows the state of this object. An object that is an attribute of another object is 
embedded. 

15.4 Instances as return values 
Functions can return instances. For example, find_cente. 
takes a Rectangl. 
as an argument
 and returns a Poin. 
that contains the coordinates of the center of the Rectangle: 

de. 
find_center(rect). 


. 
. 
Point(. 


p.. 
. 
rect.corner.. 
. 
rect.width/2.. 


p.. 
. 
rect.corner.. 
. 
rect.height/2.. 


retur. 
. 


Here is an example that passes bo. 
as an argument and assigns the resulting Point to center: 

>>. 
cente. 
. 
find_center(box. 
>>. 
print_point(center. 
(50.0. 
100.0. 


15.5 Objects are mutable 
You can change the state of an object by making an assignment to one of its attributes. For 
example, to change the size of a rectangle without changing its position, you can modify 
the values of widt. 
and height: 

box.widt. 
. 
box.widt. 
. 
5. 


box.heigh. 
. 
box.widt. 
. 
10. 
You can also write functions that modify objects. For example, grow_rectangl. 
takes a 
Rectangle object and two numbers, dwidt. 
and dheight, and adds the numbers to the 
width and height of the rectangle: 

de. 
grow_rectangle(rect. 
dwidth. 
dheight). 


rect.widt. 
+. 
dwidt. 


rect.heigh. 
+. 
dheigh. 



15.6. Copying 
Here is an example that demonstrates the effect: 

>>. 
prin. 
box.widt. 
100.. 
>>. 
prin. 
box.heigh. 
200.. 
>>. 
grow_rectangle(box. 
50. 
100. 
>>. 
prin. 
box.widt. 
150.. 
>>. 
prin. 
box.heigh. 
300.. 


Inside the function, rec. 
is an alias for box, so if the function modifies rect, bo. 
changes. 
Exercise 15.2. Write a function named move_rectangl. 
that takes a Rectangle and two numbers 
named d. 
and dy. It should change the location of the rectangle by adding d. 
to the . 
coordinate of corne. 
and adding d. 
to the . 
coordinate of corner. 

15.6 Copying 
Aliasing can make a program difficult to read because changes in one place might have 
unexpected effects in another place. It is hard to keep track of all the variables that might 
refer to a given object. 

Copying an object is often an alternative to aliasing. The cop. 
module contains a function 
called cop. 
that can duplicate any object: 

>>. 
p. 
. 
Point(. 
>>. 
p1.. 
. 
3.. 
>>. 
p1.. 
. 
4.. 


>>. 
impor. 
cop. 
>>. 
p. 
. 
copy.copy(p1. 


p. 
and p. 
contain the same data, but they are not the same Point. 

>>. 
print_point(p1. 
(3.0. 
4.0. 
>>. 
print_point(p2. 
(3.0. 
4.0. 
>>>p. 
i. 
p. 
Fals. 
>>>p. 
=. 
p. 
Fals. 


The i. 
operator indicates that p. 
and p. 
are not the same object, which is what we expected. 
But you might have expected =. 
to yield Tru. 
because these points contain the same data. 
In that case, you will be disappointed to learn that for instances, the default behavior of the =. 
operator is the same as the i. 
operator; it checks object identity, not object equivalence. 
This behavior can be changed�we�ll see how later. 

If you use copy.cop. 
to duplicate a Rectangle, you will find that it copies the Rectangle 
object but not the embedded Point. 


Chapter 15. Classes and objects 

y0.0x0.0widthheight100.0corner200.0box100.0200.0widthheightcornerbox2
Figure 15.3: Object diagram. 

>>. 
box. 
. 
copy.copy(box. 
>>. 
box. 
i. 
bo. 
Fals. 
>>. 
box2.corne. 
i. 
box.corne. 
Tru. 


Figure 15.3 shows what the object diagram looks like. This operation is called a shallow 
copy because it copies the object and any references it contains, but not the embedded 
objects. 

For most applications, this is not what you want. In this example, invoking grow_rectangl. 
on one of the Rectangles would not affect the other, but invoking move_rectangl. 
on either would affect both! This behavior is confusing and error-prone. 

Fortunately, the cop. 
module contains a method named deepcop. 
that copies not only the 
object but also the objects it refers to, and the objects they refer to, and so on. You will not 
be surprised to learn that this operation is called a deep copy. 

>>. 
box. 
. 
copy.deepcopy(box. 
>>. 
box. 
i. 
bo. 
Fals. 
>>. 
box3.corne. 
i. 
box.corne. 
Fals. 


box. 
and bo. 
are completely separate objects. 
Exercise 15.3. Write a version of move_rectangl. 
that creates and returns a new Rectangle 
instead of modifying the old one. 


15.7 Debugging 
When you start working with objects, you are likely to encounter some new exceptions. If 

you try to access an attribute that doesn�t exist, you get an AttributeError: >>. 
. 
. 
Point(. 
>>. 
prin. 
p.. 
AttributeError. 
Poin. 
instanc. 
ha. 
n. 
attribut. 
'z. 


If you are not sure what type an object is, you can ask: 

>>. 
type(p. 
<typ. 
'__main__.Point'. 


If you are not sure whether an object has a particular attribute, you can use the built-in 

function hasattr: >>. 
hasattr(p. 
'x'. 
Tru. 
>>. 
hasattr(p. 
'z'. 
Fals. 



15.8. Glossary 
The first argument can be any object; the second argument is a string that contains the name 
of the attribute. 

15.8 Glossary 
class: A user-defined type. A class definition creates a new class object. 

class object: An object that contains information about a user-defined type. The class object
 can be used to create instances of the type. 

instance: An object that belongs to a class. 

attribute: One of the named values associated with an object. 

embedded (object): An object that is stored as an attribute of another object. 

shallow copy: To copy the contents of an object, including any references to embedded 
objects; implemented by the cop. 
function in the cop. 
module. 

deep copy: To copy the contents of an object as well as any embedded objects, and any 

objects embedded in them, and so on; implemented by the deepcop. 
function in the 

cop. 
module. 

object diagram: A diagram that shows objects, their attributes, and the values of the attributes.
 

15.9 Exercises 
Exercise 15.4. Swampy (see Chapter 4) provides a module named World, which defines a user-
defined type also called World. You can import it like this: 

fro. 
swampy.Worl. 
impor. 
Worl. 


Or, depending on how you installed Swampy, like this: 

fro. 
Worl. 
impor. 
Worl. 


The following code creates a World object and calls the mainloo. 
method, which waits for the user. 

worl. 
. 
World(. 


world.mainloop(. 


A window should appear with a title bar and an empty square. We will use this window to draw 
Points, Rectangles and other shapes. Add the following lines before calling mainloo. 
and run the 
program again. 

canva. 
. 
world.ca(width=500. 
height=500. 
background='white'. 


bbo. 
. 
[[-150,-100]. 
[150. 
100]. 


canvas.rectangle(bbox. 
outline='black'. 
width=2. 
fill='green4'. 


You should see a green rectangle with a black outline. The first line creates a Canvas, which appears 
in the window as a white square. The Canvas object provides methods like rectangl. 
for drawing 
various shapes. 

bbo. 
is a list of lists that represents the �bounding box� of the rectangle. The first pair of coordinates 
is the lower-left corner of the rectangle; the second pair is the upper-right corner. 

You can draw a circle like this: 


Chapter 15. Classes and objects 

canvas.circle([-25,0]. 
70. 
outline=None. 
fill='red'. 


The first parameter is the coordinate pair for the center of the circle; the second parameter is the 
radius. 

If you add this line to the program, the result should resemble the national flag of Bangladesh (see http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Gallery. 
of. 
sovereign. 
state. 
flag. 
). 

1. Write a function called draw_rectangl. 
that takes a Canvas and a Rectangle as arguments 
and draws a representation of the Rectangle on the Canvas. 
2. Add an attribute named colo. 
to your Rectangle objects and modify draw_rectangl. 
so 
that it uses the color attribute as the fill color. 
3. Write a function called draw_poin. 
that takes a Canvas and a Point as arguments and draws 
a representation of the Point on the Canvas. 
4. Define a new class called Circle with appropriate attributes and instantiate a few Circle objects.
 Write a function called draw_circl. 
that draws circles on the canvas. 
5. Write a program that draws the national flag of the Czech Republic. Hint: you can draw a 
polygon like this: 
point. 
. 
[[-150,-100]. 
[150. 
100]. 
[150. 
-100]. 


canvas.polygon(points. 
fill='blue'. 


I have written a small program that lists the available colors; you can download it from http. 
/. 
thinkpython. 
com. 
code. 
color. 
list. 
p. 
. 


Chapter 16 

Classes and functions 

Code examples from this chapter are available from http://thinkpython.com/code. 
Time1.py. 

16.1 Time 
As another example of a user-defined type, we�ll define a class called Tim. 
that records the 
time of day. The class definition looks like this: 

clas. 
Time(object). 


"""Represent. 
th. 
tim. 
o. 
day. 


attributes. 
hour. 
minute. 
secon. 


"". 


We can create a new Tim. 
object and assign attributes for hours, minutes, and seconds: 

tim. 
. 
Time(. 


time.hou. 
. 
1. 


time.minut. 
. 
5. 


time.secon. 
. 
3. 


The state diagram for the Tim. 
object looks like Figure 16.1. 
Exercise 16.1. Write a function called print_tim. 
that takes a Time object and prints it in the 
form hour:minute:second. Hint: the format sequence '%.2d. 
prints an integer using at least 
two digits, including a leading zero if necessary. 
Exercise 16.2. Write a boolean function called is_afte. 
that takes two Time objects, t. 
and t2, 
and returns Tru. 
if t. 
follows t. 
chronologically and Fals. 
otherwise. Challenge: don�t use an i. 
statement. 


16.2 Pure functions 
In the next few sections, we�ll write two functions that add time values. They demonstrate 
two kinds of functions: pure functions and modifiers. They also demonstrate a development
 plan I�ll call prototype and patch, which is a way of tackling a complex problem by 
starting with a simple prototype and incrementally dealing with the complications. 


Chapter 16. Classes and functions 

5930hourminutesecond11Timetime
Figure 16.1: Object diagram. 

Here is a simple prototype of add_time: 

de. 
add_time(t1. 
t2). 


su. 
. 
Time(. 


sum.hou. 
. 
t1.hou. 
. 
t2.hou. 


sum.minut. 
. 
t1.minut. 
. 
t2.minut. 


sum.secon. 
. 
t1.secon. 
. 
t2.secon. 


retur. 
su. 


The function creates a new Tim. 
object, initializes its attributes, and returns a reference to 
the new object. This is called a pure function because it does not modify any of the objects 
passed to it as arguments and it has no effect, like displaying a value or getting user input, 
other than returning a value. 

To test this function, I�ll create two Time objects: star. 
contains the start time of a movie, 
like Monty Python and the Holy Grail, and duratio. 
contains the run time of the movie, 
which is one hour 35 minutes. 

add_tim. 
figures out when the movie will be done. 

>>. 
star. 
. 
Time(. 
>>. 
start.hou. 
. 
. 
>>. 
start.minut. 
. 
4. 
>>. 
start.secon. 
. 
. 


>>. 
duratio. 
. 
Time(. 
>>. 
duration.hou. 
. 
. 
>>. 
duration.minut. 
. 
3. 
>>. 
duration.secon. 
. 
. 


>>. 
don. 
. 
add_time(start. 
duration. 
>>. 
print_time(done. 
10:80:0. 


The result, 10:80:0. 
might not be what you were hoping for. The problem is that this 
function does not deal with cases where the number of seconds or minutes adds up to 
more than sixty. When that happens, we have to �carry� the extra seconds into the minute 
column or the extra minutes into the hour column. 

Here�s an improved version: 

de. 
add_time(t1. 
t2). 


su. 
. 
Time(. 


sum.hou. 
. 
t1.hou. 
. 
t2.hou. 


sum.minut. 
. 
t1.minut. 
. 
t2.minut. 


sum.secon. 
. 
t1.secon. 
. 
t2.secon. 



16.3. Modifiers 
i. 
sum.secon. 
>. 
60. 


sum.secon. 
-. 
6. 


sum.minut. 
+. 
. 


i. 
sum.minut. 
>. 
60. 


sum.minut. 
-. 
6. 


sum.hou. 
+. 
. 


retur. 
su. 


Although this function is correct, it is starting to get big. We will see a shorter alternative 
later. 

16.3 Modifiers 
Sometimes it is useful for a function to modify the objects it gets as parameters. In that case, 
the changes are visible to the caller. Functions that work this way are called modifiers. 

increment, which adds a given number of seconds to a Tim. 
object, can be written naturally 
as a modifier. Here is a rough draft: 

de. 
increment(time. 
seconds). 


time.secon. 
+. 
second. 


i. 
time.secon. 
>. 
60. 


time.secon. 
-. 
6. 


time.minut. 
+. 
. 


i. 
time.minut. 
>. 
60. 


time.minut. 
-. 
6. 


time.hou. 
+. 
. 


The first line performs the basic operation; the remainder deals with the special cases we 
saw before. 

Is this function correct? What happens if the parameter second. 
is much greater than sixty? 

In that case, it is not enough to carry once; we have to keep doing it until time.secon. 
is 
less than sixty. One solution is to replace the i. 
statements with whil. 
statements. That 
would make the function correct, but not very efficient. 

Exercise 16.3. Write a correct version of incremen. 
that doesn�t contain any loops. 

Anything that can be done with modifiers can also be done with pure functions. In fact, 
some programming languages only allow pure functions. There is some evidence that 
programs that use pure functions are faster to develop and less error-prone than programs 
that use modifiers. But modifiers are convenient at times, and functional programs tend to 
be less efficient. 

In general, I recommend that you write pure functions whenever it is reasonable and resort 
to modifiers only if there is a compelling advantage. This approach might be called a 
functional programming style. 
Exercise 16.4. Write a �pure� version of incremen. 
that creates and returns a new Time object 
rather than modifying the parameter. 


Chapter 16. Classes and functions 

16.4 Prototyping versus planning 
The development plan I am demonstrating is called �prototype and patch.� For each function,
 I wrote a prototype that performed the basic calculation and then tested it, patching 
errors along the way. 

This approach can be effective, especially if you don�t yet have a deep understanding 
of the problem. But incremental corrections can generate code that is unnecessarily 
complicated�since it deals with many special cases�and unreliable�since it is hard to 
know if you have found all the errors. 

An alternative is planned development, in which high-level insight into the problem can 
make the programming much easier. In this case, the insight is that a Time object is really 
a three-digit number in base 60 (see http://en.wikipedia.org/wiki/Sexagesimal.)! The secon. 
attribute is the �ones column,� the minut. 
attribute is the �sixties column,� and the hou. 
attribute is the �thirty-six hundreds column.� 

When we wrote add_tim. 
and increment, we were effectively doing addition in base 60, 
which is why we had to carry from one column to the next. 

This observation suggests another approach to the whole problem�we can convert Time 
objects to integers and take advantage of the fact that the computer knows how to do 
integer arithmetic. 

Here is a function that converts Times to integers: 

de. 
time_to_int(time). 


minute. 
. 
time.hou. 
. 
6. 
. 
time.minut. 


second. 
. 
minute. 
. 
6. 
. 
time.secon. 


retur. 
second. 


And here is the function that converts integers to Times (recall that divmo. 
divides the first 
argument by the second and returns the quotient and remainder as a tuple). 

de. 
int_to_time(seconds). 


tim. 
. 
Time(. 


minutes. 
time.secon. 
. 
divmod(seconds. 
60. 


time.hour. 
time.minut. 
. 
divmod(minutes. 
60. 


retur. 
tim. 


You might have to think a bit, and run some tests, to convince yourself that these functions 
are correct. One way to test them is to check that time_to_int(int_to_time(x). 
=. 
. 
for 
many values of x. This is an example of a consistency check. 

Once you are convinced they are correct, you can use them to rewrite add_time: 

de. 
add_time(t1. 
t2). 


second. 
. 
time_to_int(t1. 
. 
time_to_int(t2. 


retur. 
int_to_time(seconds. 


This version is shorter than the original, and easier to verify. 

Exercise 16.5. Rewrite incremen. 
using time_to_in. 
and int_to_time. 

In some ways, converting from base 60 to base 10 and back is harder than just dealing with 
times. Base conversion is more abstract; our intuition for dealing with time values is better. 

But if we have the insight to treat times as base 60 numbers and make the investment of 
writing the conversion functions (time_to_in. 
and int_to_time), we get a program that 
is shorter, easier to read and debug, and more reliable. 


16.5. Debugging 
It is also easier to add features later. For example, imagine subtracting two Times to find 
the duration between them. The naive approach would be to implement subtraction with 
borrowing. Using the conversion functions would be easier and more likely to be correct. 

Ironically, sometimes making a problem harder (or more general) makes it easier (because 
there are fewer special cases and fewer opportunities for error). 

16.5 Debugging 
A Time object is well-formed if the values of minut. 
and secon. 
are between 0 and 60 
(including 0 but not 60) and if hou. 
is positive. hou. 
and minut. 
should be integral values, 
but we might allow secon. 
to have a fraction part. 

Requirements like these are called invariants because they should always be true. To put 
it a different way, if they are not true, then something has gone wrong. 

Writing code to check your invariants can help you detect errors and find their causes. For 
example, you might have a function like valid_tim. 
that takes a Time object and returns Fals. 
if it violates an invariant: 

de. 
valid_time(time). 


i. 
time.hou. 
. 
. 
o. 
time.minut. 
. 
. 
o. 
time.secon. 
. 
0. 


retur. 
Fals. 


i. 
time.minut. 
>. 
6. 
o. 
time.secon. 
>. 
60. 


retur. 
Fals. 


retur. 
Tru. 


Then at the beginning of each function you could check the arguments to make sure they 
are valid: 

de. 
add_time(t1. 
t2). 


i. 
no. 
valid_time(t1. 
o. 
no. 
valid_time(t2). 


rais. 
ValueError. 
'invali. 
Tim. 
objec. 
i. 
add_time. 


second. 
. 
time_to_int(t1. 
. 
time_to_int(t2. 


retur. 
int_to_time(seconds. 


Or you could use an asser. 
statement, which checks a given invariant and raises an exception
 if it fails: 

de. 
add_time(t1. 
t2). 


asser. 
valid_time(t1. 
an. 
valid_time(t2. 


second. 
. 
time_to_int(t1. 
. 
time_to_int(t2. 


retur. 
int_to_time(seconds. 


asser. 
statements are useful because they distinguish code that deals with normal conditions
 from code that checks for errors. 

16.6 Glossary 
prototype and patch: A development plan that involves writing a rough draft of a program,
 testing, and correcting errors as they are found. 

planned development: A development plan that involves high-level insight into the problem
 and more planning than incremental development or prototype development. 


Chapter 16. Classes and functions 

pure function: A function that does not modify any of the objects it receives as arguments. 
Most pure functions are fruitful. 

modifier: A function that changes one or more of the objects it receives as arguments. Most 
modifiers are fruitless. 

functional programming style: A style of program design in which the majority of functions
 are pure. 

invariant: A condition that should always be true during the execution of a program. 

16.7 Exercises 
Code examples from this chapter are available from http://thinkpython.com/code. 
Time1.py; solutions to these exercises are available from http://thinkpython.com/code. 
Time1_soln.py. 
Exercise 16.6. Write a function called mul_tim. 
that takes a Time object and a number and returns 
a new Time object that contains the product of the original Time and the number. 

Then use mul_tim. 
to write a function that takes a Time object that represents the finishing time 
in a race, and a number that represents the distance, and returns a Time object that represents the 
average pace (time per mile). 
Exercise 16.7. The datetim. 
module provides dat. 
and tim. 
objects that are similar to the Date 
and Time objects in this chapter, but they provide a rich set of methods and operators. Read the 
documentation at http. 
/. 
docs. 
python. 
org. 
2. 
library. 
datetime. 
htm. 
. 

1. Use the datetim. 
module to write a program that gets the current date and prints the day of 
the week. 
2. Write a program that takes a birthday as input and prints the user�s age and the number of 
days, hours, minutes and seconds until their next birthday. 
3. For two people born on different days, there is a day when one is twice as old as the other. 
That�s their Double Day. Write a program that takes two birthdays and computes their Double 
Day. 
4. For a little more challenge, write the more general version that computes the day when one 
person is n times older than the other. 

Chapter 17 
Classes and methods 

Code examples from this chapter are available from http://thinkpython.com/code. 
Time2.py. 

17.1 Object-oriented features 
Python is an object-oriented programming language, which means that it provides features
 that support object-oriented programming. 

It is not easy to define object-oriented programming, but we have already seen some of its 
characteristics: 

� Programs are made up of object definitions and function definitions, and most of the 
computation is expressed in terms of operations on objects. 
� Each object definition corresponds to some object or concept in the real world, and 
the functions that operate on that object correspond to the ways real-world objects 
interact. 
For example, the Tim. 
class defined in Chapter 16 corresponds to the way people record 
the time of day, and the functions we defined correspond to the kinds of things people do 
with times. Similarly, the Poin. 
and Rectangl. 
classes correspond to the mathematical 
concepts of a point and a rectangle. 

So far, we have not taken advantage of the features Python provides to support object-
oriented programming. These features are not strictly necessary; most of them provide 
alternative syntax for things we have already done. But in many cases, the alternative is 
more concise and more accurately conveys the structure of the program. 

For example, in the Tim. 
program, there is no obvious connection between the class definition
 and the function definitions that follow. With some examination, it is apparent that 
every function takes at least one Tim. 
object as an argument. 

This observation is the motivation for methods; a method is a function that is associated 
with a particular class. We have seen methods for strings, lists, dictionaries and tuples. In 
this chapter, we will define methods for user-defined types. 

Methods are semantically the same as functions, but there are two syntactic differences: 


Chapter 17. Classes and methods 

� Methods are defined inside a class definition in order to make the relationship between
 the class and the method explicit. 
� The syntax for invoking a method is different from the syntax for calling a function. 
In the next few sections, we will take the functions from the previous two chapters and 
transform them into methods. This transformation is purely mechanical; you can do it 
simply by following a sequence of steps. If you are comfortable converting from one form 
to another, you will be able to choose the best form for whatever you are doing. 

17.2 Printing objects 
In Chapter 16, we defined a class named Tim. 
and in Exercise 16.1, you wrote a function 
named print_time: clas. 
Time(object). 
"""Represent. 
th. 
tim. 
o. 
day."". 


de. 
print_time(time). 
prin. 
'%.2d:%.2d:%.2d. 
. 
(time.hour. 
time.minute. 
time.second. 


To call this function, you have to pass a Tim. 
object as an argument: >>. 
star. 
. 
Time(. 
>>. 
start.hou. 
. 
. 
>>. 
start.minut. 
. 
4. 
>>. 
start.secon. 
. 
0. 
>>. 
print_time(start. 
09:45:0. 


To make print_tim. 
a method, all we have to do is move the function definition inside the 
class definition. Notice the change in indentation. 

clas. 
Time(object). 
de. 
print_time(time). 


prin. 
'%.2d:%.2d:%.2d. 
. 
(time.hour. 
time.minute. 
time.second. 
Now there are two ways to call print_time. The first (and less common) way is to use 
function syntax: 

>>. 
Time.print_time(start. 


09:45:0. 
In this use of dot notation, Tim. 
is the name of the class, and print_tim. 
is the name of the 
method. star. 
is passed as a parameter. 

The second (and more concise) way is to use method syntax: 

>>. 
start.print_time(. 


09:45:0. 
In this use of dot notation, print_tim. 
is the name of the method (again), and star. 
is 
the object the method is invoked on, which is called the subject. Just as the subject of 
a sentence is what the sentence is about, the subject of a method invocation is what the 
method is about. 

Inside the method, the subject is assigned to the first parameter, so in this case star. 
is 
assigned to time. 


17.3. Another example 
By convention, the first parameter of a method is called self, so it would be more common 
to write print_tim. 
like this: 

clas. 
Time(object). 


de. 
print_time(self). 


prin. 
'%.2d:%.2d:%.2d. 
. 
(self.hour. 
self.minute. 
self.second. 


The reason for this convention is an implicit metaphor: 

� The syntax for a function call, print_time(start), suggests that the function is the 
active agent. It says something like, �Hey print_time! Here�s an object for you to 
print.� 
� In object-oriented programming, the objects are the active agents. A method invocation
 like start.print_time(. 
says �Hey start! Please print yourself.� 
This change in perspective might be more polite, but it is not obvious that it is useful. In the 
examples we have seen so far, it may not be. But sometimes shifting responsibility from the 
functions onto the objects makes it possible to write more versatile functions, and makes it 
easier to maintain and reuse code. 

Exercise 17.1. Rewrite time_to_in. 
(from Section 16.4) as a method. It is probably not appropriate
 to rewrite int_to_tim. 
as a method; what object you would invoke it on? 

17.3 Another example 
Here�s a version of incremen. 
(from Section 16.3) rewritten as a method: 

. 
insid. 
clas. 
Time. 


de. 
increment(self. 
seconds). 


second. 
+. 
self.time_to_int(. 


retur. 
int_to_time(seconds. 


This version assumes that time_to_in. 
is written as a method, as in Exercise 17.1. Also, 
note that it is a pure function, not a modifier. 

Here�s how you would invoke increment: 

>>. 
start.print_time(. 


09:45:0. 


>>. 
en. 
. 
start.increment(1337. 


>>. 
end.print_time(. 


10:07:1. 


The subject, start, gets assigned to the first parameter, self. The argument, 1337, gets 
assigned to the second parameter, seconds. 

This mechanism can be confusing, especially if you make an error. For example, if you 
invoke incremen. 
with two arguments, you get: 

>>. 
en. 
. 
start.increment(1337. 
460. 


TypeError. 
increment(. 
take. 
exactl. 
. 
argument. 
(. 
given. 


The error message is initially confusing, because there are only two arguments in parentheses.
 But the subject is also considered an argument, so all together that�s three. 


Chapter 17. Classes and methods 

17.4 A more complicated example 
is_afte. 
(from Exercise 16.2) is slightly more complicated because it takes two Time objects
 as parameters. In this case it is conventional to name the first parameter sel. 
and the 
second parameter other: 

. 
insid. 
clas. 
Time. 


de. 
is_after(self. 
other). 
retur. 
self.time_to_int(. 
. 
other.time_to_int(. 


To use this method, you have to invoke it on one object and pass the other as an argument: 

>>. 
end.is_after(start. 
Tru. 


One nice thing about this syntax is that it almost reads like English: �end is after start?� 

17.5 The init method 
The init method (short for �initialization�) is a special method that gets invoked when an 
object is instantiated. Its full name is __init_. 
(two underscore characters, followed by init, and then two more underscores). An init method for the Tim. 
class might look like 
this: 

. 
insid. 
clas. 
Time. 


de. 
__init__(self. 
hour=0. 
minute=0. 
second=0). 


self.hou. 
. 
hou. 


self.minut. 
. 
minut. 


self.secon. 
. 
secon. 


It is common for the parameters of __init_. 
to have the same names as the attributes. The 
statement 

self.hou. 
. 
hou. 
stores the value of the parameter hou. 
as an attribute of self. 
The parameters are optional, so if you call Tim. 
with no arguments, you get the default 
values. 

>>. 
tim. 
. 
Time(. 
>>. 
time.print_time(. 
00:00:0. 


If you provide one argument, it overrides hour: >>. 
tim. 
. 
Tim. 
(9. 


>>. 
time.print_time(. 
09:00:0. 
If you provide two arguments, they override hou. 
and minute. >>. 
tim. 
. 
Time(9. 
45. 


>>. 
time.print_time(. 
09:45:0. 


And if you provide three arguments, they override all three default values. 

Exercise 17.2. Write an init method for the Poin. 
class that takes . 
and . 
as optional parameters 
and assigns them to the corresponding attributes. 


17.6. The __str_. 
method 
17.6 The __str_. 
method 
__str_. 
is a special method, like __init__, that is supposed to return a string representation
 of an object. 

For example, here is a st. 
method for Time objects: 

. 
insid. 
clas. 
Time. 


de. 
__str__(self). 
retur. 
'%.2d:%.2d:%.2d. 
. 
(self.hour. 
self.minute. 
self.second. 


When you prin. 
an object, Python invokes the st. 
method: 

>>. 
tim. 
. 
Time(9. 
45. 
>>. 
prin. 
tim. 
09:45:0. 


When I write a new class, I almost always start by writing __init__, which makes it easier 
to instantiate objects, and __str__, which is useful for debugging. 
Exercise 17.3. Write a st. 
method for the Poin. 
class. Create a Point object and print it. 


17.7 Operator overloading 
By defining other special methods, you can specify the behavior of operators on user-
defined types. For example, if you define a method named __add_. 
for the Tim. 
class, 
you can use the . 
operator on Time objects. 

Here is what the definition might look like: 

. 
insid. 
clas. 
Time. 


de. 
__add__(self. 
other). 


second. 
. 
self.time_to_int(. 
. 
other.time_to_int(. 


retur. 
int_to_time(seconds. 


And here is how you could use it: 

>>. 
star. 
. 
Time(9. 
45. 
>>. 
duratio. 
. 
Time(1. 
35. 
>>. 
prin. 
star. 
. 
duratio. 
11:20:0. 


When you apply the . 
operator to Time objects, Python invokes __add__. When you print 
the result, Python invokes __str__. So there is quite a lot happening behind the scenes! 


Changing the behavior of an operator so that it works with user-defined types is called operator
 overloading. For every operator in Python there is a corresponding special method, 
like __add__. For more details, see http://docs.python.org/2/reference/datamodel. 
html#specialnames. 
Exercise 17.4. Write an ad. 
method for the Point class. 



Chapter 17. Classes and methods 

17.8 Type-based dispatch 
In the previous section we added two Time objects, but you also might want to add an 
integer to a Time object. The following is a version of __add_. 
that checks the type of othe. 
and invokes either add_tim. 
or increment: 

. 
insid. 
clas. 
Time. 


de. 
__add__(self. 
other). 
i. 
isinstance(other. 
Time). 
retur. 
self.add_time(other. 
else. 
retur. 
self.increment(other. 


de. 
add_time(self. 
other). 
second. 
. 
self.time_to_int(. 
. 
other.time_to_int(. 
retur. 
int_to_time(seconds. 


de. 
increment(self. 
seconds). 
second. 
+. 
self.time_to_int(. 
retur. 
int_to_time(seconds. 


The built-in function isinstanc. 
takes a value and a class object, and returns Tru. 
if the 
value is an instance of the class. 

If othe. 
is a Time object, __add_. 
invokes add_time. Otherwise it assumes that the parameter
 is a number and invokes increment. This operation is called a type-based dispatch 
because it dispatches the computation to different methods based on the type of the arguments.
 

Here are examples that use the . 
operator with different types: >>. 
star. 
. 
Time(9. 
45. 
>>. 
duratio. 
. 
Time(1. 
35. 
>>. 
prin. 
star. 
. 
duratio. 
11:20:0. 
>>. 
prin. 
star. 
. 
133. 
10:07:1. 


Unfortunately, this implementation of addition is not commutative. If the integer is the 
first operand, you get 

>>. 
prin. 
133. 
. 
star. 
TypeError. 
unsupporte. 
operan. 
type(s. 
fo. 
+. 
'int. 
an. 
'instance. 


The problem is, instead of asking the Time object to add an integer, Python is asking an 
integer to add a Time object, and it doesn�t know how to do that. But there is a clever 
solution for this problem: the special method __radd__, which stands for �right-side add.� 
This method is invoked when a Time object appears on the right side of the . 
operator. 
Here�s the definition: 

. 
insid. 
clas. 
Time. 


de. 
__radd__(self. 
other). 
retur. 
self.__add__(other. 


And here�s how it�s used: 


17.9. Polymorphism 
>>. 
prin. 
133. 
. 
star. 
10:07:1. 
Exercise 17.5. Write an ad. 
method for Points that works with either a Point object or a tuple: 

� If the second operand is a Point, the method should return a new Point whose x coordinate is 
the sum of the x coordinates of the operands, and likewise for the y coordinates. 
� If the second operand is a tuple, the method should add the first element of the tuple to the x 
coordinate and the second element to the y coordinate, and return a new Point with the result. 
17.9 Polymorphism 
Type-based dispatch is useful when it is necessary, but (fortunately) it is not always necessary.
 Often you can avoid it by writing functions that work correctly for arguments with 
different types. 

Many of the functions we wrote for strings will actually work for any kind of sequence. 
For example, in Section 11.1 we used histogra. 
to count the number of times each letter 
appears in a word. 

de. 
histogram(s). 
. 
. 
dict(. 
fo. 
. 
ins. 


if. 
no. 
i. 
d. 
d[c. 
. 
. 
else. 
d[c. 
. 
d[c]+. 
retur. 
. 


This function also works for lists, tuples, and even dictionaries, as long as the elements of 
. 
are hashable, so they can be used as keys in d. 

>>>t. 
['spam'. 
'egg'. 
'spam'. 
'spam'. 
'bacon'. 
'spam'. 
>>. 
histogram(t. 
{'bacon'. 
1. 
'egg'. 
1. 
'spam'. 
4. 


Functions that can work with several types are called polymorphic. Polymorphism can 
facilitate code reuse. For example, the built-in function sum, which adds the elements of a 
sequence, works as long as the elements of the sequence support addition. 

Since Time objects provide an ad. 
method, they work with sum: 

>>. 
t. 
. 
Time(7. 
43. 
>>. 
t. 
. 
Time(7. 
41. 
>>. 
t. 
. 
Time(7. 
37. 
>>. 
tota. 
. 
sum([t1. 
t2. 
t3]. 
>>. 
prin. 
tota. 
23:01:0. 


In general, if all of the operations inside a function work with a given type, then the function
 works with that type. 

The best kind of polymorphism is the unintentional kind, where you discover that a function
 you already wrote can be applied to a type you never planned for. 


Chapter 17. Classes and methods 

17.10 Debugging 
It is legal to add attributes to objects at any point in the execution of a program, but if you 
are a stickler for type theory, it is a dubious practice to have objects of the same type with 
different attribute sets. It is usually a good idea to initialize all of an object�s attributes in 
the init method. 

If you are not sure whether an object has a particular attribute, you can use the built-in 
function hasatt. 
(see Section 15.7). 

Another way to access the attributes of an object is through the special attribute __dict__, 
which is a dictionary that maps attribute names (as strings) and values: 

>>. 
. 
. 
Point(3. 
4. 


>>. 
prin. 
p.__dict_. 


{'y'. 
4. 
'x'. 
3. 


For purposes of debugging, you might find it useful to keep this function handy: 

de. 
print_attributes(obj). 


fo. 
att. 
i. 
obj.__dict__. 


prin. 
attr. 
getattr(obj. 
attr. 


print_attribute. 
traverses the items in the object�s dictionary and prints each attribute 
name and its corresponding value. 

The built-in function getatt. 
takes an object and an attribute name (as a string) and returns 
the attribute�s value. 

17.11 Interface and implementation 
One of the goals of object-oriented design is to make software more maintainable, which 
means that you can keep the program working when other parts of the system change, and 
modify the program to meet new requirements. 

A design principle that helps achieve that goal is to keep interfaces separate from implementations.
 For objects, that means that the methods a class provides should not depend 
on how the attributes are represented. 

For example, in this chapter we developed a class that represents a time of day. Methods 
provided by this class include time_to_int, is_after, and add_time. 

We could implement those methods in several ways. The details of the implementation 
depend on how we represent time. In this chapter, the attributes of a Tim. 
object are hour, minute, and second. 

As an alternative, we could replace these attributes with a single integer representing the 
number of seconds since midnight. This implementation would make some methods, like is_after, easier to write, but it makes some methods harder. 

After you deploy a new class, you might discover a better implementation. If other parts 
of the program are using your class, it might be time-consuming and error-prone to change 
the interface. 

But if you designed the interface carefully, you can change the implementation without 
changing the interface, which means that other parts of the program don�t have to change. 


17.12. Glossary 
Keeping the interface separate from the implementation means that you have to hide the 
attributes. Code in other parts of the program (outside the class definition) should use 
methods to read and modify the state of the object. They should not access the attributes directly.
 This principle is called information hiding; see http://en.wikipedia.org/wiki. 
Information_hiding. 

Exercise 17.6. Download the code from this chapter (http. 
/. 
thinkpython. 
com. 
code. 
Time2. 
p. 
). Change the attributes of Tim. 
to be a single integer representing seconds since midnight.
 Then modify the methods (and the function int_to_time) to work with the new implementation.
 You should not have to modify the test code in main. When you are done, the output should 
be the same as before. Solution: http. 
/. 
thinkpython. 
com. 
code. 
Time2. 
soln. 
p. 


17.12 Glossary 
object-oriented language: A language that provides features, such as user-defined classes 
and method syntax, that facilitate object-oriented programming. 

object-oriented programming: A style of programming in which data and the operations 
that manipulate it are organized into classes and methods. 

method: A function that is defined inside a class definition and is invoked on instances of 
that class. 

subject: The object a method is invoked on. 

operator overloading: Changing the behavior of an operator like . 
so it works with a user-
defined type. 

type-based dispatch: A programming pattern that checks the type of an operand and invokes
 different functions for different types. 

polymorphic: Pertaining to a function that can work with more than one type. 

information hiding: The principle that the interface provided by an object should not depend
 on its implementation, in particular the representation of its attributes. 

17.13 Exercises 
Exercise 17.7. This exercise is a cautionary tale about one of the most common, and difficult to 
find, errors in Python. Write a definition for a class named Kangaro. 
with the following methods: 

1. An __init_. 
method that initializes an attribute named pouch_content. 
to an empty list. 
2. A 
method named put_in_pouc. 
that takes an object of any type and adds it to pouch_contents. 
3. A __str_. 
method that returns a string representation of the Kangaroo object and the contents
 of the pouch. 
Test your code by creating two Kangaro. 
objects, assigning them to variables named kang. 
and roo, and then adding ro. 
to the contents of kanga�s pouch. 


Chapter 17. Classes and methods 

Download http. 
/. 
thinkpython. 
com. 
code. 
BadKangaroo. 
p. 
. It contains a solution to the 
previous problem with one big, nasty bug. Find and fix the bug. 


If you get stuck, you can download http. 
/. 
thinkpython. 
com. 
code. 
GoodKangaroo. 
p. 
, 
which explains the problem and demonstrates a solution. 
Exercise 17.8. Visual is a Python module that provides 3-D graphics. It is not always included 
in a Python installation, so you might have to install it from your software repository or, if it�s not 
there, from http. 
/. 
vpython. 
or. 
. 


The following example creates a 3-D space that is 256 units wide, long and high, and sets the 
�center� to be the point (128, 128, 128). Then it draws a blue sphere. 


fro. 
visua. 
impor. 
. 


scene.rang. 
. 
(256. 
256. 
256. 


scene.cente. 
. 
(128. 
128. 
128. 


colo. 
. 
(0.1. 
0.1. 
0.9. 
. 
mostl. 
blu. 


sphere(pos=scene.center. 
radius=128. 
color=color. 


colo. 
is an RGB tuple; that is, the elements are Red-Green-Blue levels between 0.0 and 1.0 (see http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
RGB. 
color. 
mode. 
). 

If you run this code, you should see a window with a black background and a blue sphere. If you 
drag the middle button up and down, you can zoom in and out. You can also rotate the scene by 
dragging the right button, but with only one sphere in the world, it is hard to tell the difference. 

The following loop creates a cube of spheres: 

. 
. 
range(0. 
256. 
51. 


fo. 
. 
i. 
t. 


fo. 
. 
int. 


fo. 
. 
i. 
t. 


pos=x,y. 
. 


sphere(pos=pos. 
radius=10. 
color=color. 


1. Put this code in a script and make sure it works for you. 
2. Modify the program so that each sphere in the cube has the color that corresponds to its 
position in RGB space. Notice that the coordinates are in the range 0�255, but the RGB 
tuples are in the range 0.0�1.0. 
3. Download 
http. 
/. 
thinkpython. 
com. 
code. 
color. 
list. 
p. 
and use the function read_color. 
to generate a list of the available colors on your system, their names and RGB 
values. For each named color draw a sphere in the position that corresponds to its RGB values. 
You can see my solution at http. 
/. 
thinkpython. 
com. 
code. 
color. 
space. 
p. 
. 


Chapter 18 
Inheritance 

In this chapter I present classes to represent playing cards, decks of cards, and poker hands. 
If you don�t play poker, you can read about it at http://en.wikipedia.org/wiki/Poker, 
but you don�t have to; I�ll tell you what you need to know for the exercises. Code examples 
from this chapter are available from http://thinkpython.com/code/Card.py. 

If you are not familiar with Anglo-American playing cards, you can read about them at http://en.wikipedia.org/wiki/Playing_cards. 

18.1 Card objects 
There are fifty-two cards in a deck, each of which belongs to one of four suits and one of 
thirteen ranks. The suits are Spades, Hearts, Diamonds, and Clubs (in descending order in 
bridge). The ranks are Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, and King. Depending on 
the game that you are playing, an Ace may be higher than King or lower than 2. 

If we want to define a new object to represent a playing card, it is obvious what the attributes
 should be: ran. 
and suit. It is not as obvious what type the attributes should be. 
One possibility is to use strings containing words like 'Spade. 
for suits and 'Queen. 
for 
ranks. One problem with this implementation is that it would not be easy to compare cards 
to see which had a higher rank or suit. 

An alternative is to use integers to encode the ranks and suits. In this context, �encode� 
means that we are going to define a mapping between numbers and suits, or between 
numbers and ranks. This kind of encoding is not meant to be a secret (that would be 
�encryption�). 

For example, this table shows the suits and the corresponding integer codes: 

Spades 7
> 
3 
Hearts 7
> 
2 
Diamonds 7
> 
1 
Clubs 7
> 
0 


This code makes it easy to compare cards; because higher suits map to higher numbers, we 
can compare suits by comparing their codes. 


Chapter 18. Inheritance 

The mapping for ranks is fairly obvious; each of the numerical ranks maps to the corresponding
 integer, and for face cards: 

Jack 7
> 
11 

Queen 7
> 
12 

King 7
> 
13 

I am using the 7
> 
symbol to make it clear that these mappings are not part of the Python 
program. They are part of the program design, but they don�t appear explicitly in the code. 

The class definition for Car. 
looks like this: 

clas. 
Card(object). 


"""Represent. 
. 
standar. 
playin. 
card."". 


de. 
__init__(self. 
suit=0. 
rank=2). 


self.sui. 
. 
sui. 


self.ran. 
. 
ran. 


As usual, the init method takes an optional parameter for each attribute. The default card 
is the 2 of Clubs. 

To create a Card, you call Car. 
with the suit and rank of the card you want. 

queen_of_diamond. 
. 
Card(1. 
12. 


18.2 Class attributes 
In order to print Card objects in a way that people can easily read, we need a mapping 
from the integer codes to the corresponding ranks and suits. A natural way to do that is 
with lists of strings. We assign these lists to class attributes: 

. 
insid. 
clas. 
Card. 


suit_name. 
. 
['Clubs'. 
'Diamonds'. 
'Hearts'. 
'Spades'. 


rank_name. 
. 
[None. 
'Ace'. 
'2'. 
'3'. 
'4'. 
'5'. 
'6'. 
'7'. 


'8'. 
'9'. 
'10'. 
'Jack'. 
'Queen'. 
'King'. 


de. 
__str__(self). 


retur. 
'%. 
o. 
%s. 
. 
(Card.rank_names[self.rank]. 


Card.suit_names[self.suit]. 


Variables like suit_name. 
and rank_names, which are defined inside a class but outside 
of any method, are called class attributes because they are associated with the class object Card. 

This term distinguishes them from variables like sui. 
and rank, which are called instance 
attributes because they are associated with a particular instance. 

Both kinds of attribute are accessed using dot notation. For example, in __str__, sel. 
is a Card object, and self.ran. 
is its rank. Similarly, Car. 
is a class object, and Card.rank_name. 
is a list of strings associated with the class. 

Every card has its own sui. 
and rank, but there is only one copy of suit_name. 
and rank_names. 


18.3. Comparing cards 
listsuit_nameslistrank_namesCardtype111suitrankcard1Card
Figure 18.1: Object diagram. 

Putting it all together, the expression Card.rank_names[self.rank. 
means �use the attribute
 ran. 
from the object sel. 
as an index into the list rank_name. 
from the class Card, 
and select the appropriate string.� 

The first element of rank_name. 
is Non. 
because there is no card with rank zero. By including
 Non. 
as a place-keeper, we get a mapping with the nice property that the index 2 maps 
to the string '2', and so on. To avoid this tweak, we could have used a dictionary instead 
of a list. 

With the methods we have so far, we can create and print cards: 

>>. 
card. 
. 
Card(2. 
11. 


>>. 
prin. 
card. 


Jac. 
o. 
Heart. 


Figure 18.1 is a diagram of the Car. 
class object and one Card instance. Car. 
is a class 
object, so it has type type. card. 
has type Card. (To save space, I didn�t draw the contents 
of suit_name. 
and rank_names). 

18.3 Comparing cards 
For built-in types, there are relational operators (<, >, ==, etc.) that compare values and determine
 when one is greater than, less than, or equal to another. For user-defined types, we 
can override the behavior of the built-in operators by providing a method named __cmp__. 

__cmp_. 
takes two parameters, sel. 
and other, and returns a positive number if the first 
object is greater, a negative number if the second object is greater, and 0 if they are equal to 
each other. 

The correct ordering for cards is not obvious. For example, which is better, the 3 of Clubs 
or the 2 of Diamonds? One has a higher rank, but the other has a higher suit. In order to 
compare cards, you have to decide whether rank or suit is more important. 

The answer might depend on what game you are playing, but to keep things simple, we�ll 
make the arbitrary choice that suit is more important, so all of the Spades outrank all of the 
Diamonds, and so on. 

With that decided, we can write __cmp__: 


Chapter 18. Inheritance 

. 
insid. 
clas. 
Card. 


de. 
__cmp__(self. 
other). 
. 
chec. 
th. 
suit. 
i. 
self.sui. 
. 
other.suit. 
retur. 
. 
i. 
self.sui. 
. 
other.suit. 
retur. 
-. 


. 
suit. 
ar. 
th. 
same... 
chec. 
rank. 
i. 
self.ran. 
. 
other.rank. 
retur. 
. 
i. 
self.ran. 
. 
other.rank. 
retur. 
-. 


. 
rank. 
ar. 
th. 
same... 
it'. 
. 
ti. 
retur. 
. 


You can write this more concisely using tuple comparison: 

. 
insid. 
clas. 
Card. 


de. 
__cmp__(self. 
other). 
t. 
. 
self.suit. 
self.ran. 
t. 
. 
other.suit. 
other.ran. 
retur. 
cmp(t1. 
t2. 


The built-in function cm. 
has the same interface as the method __cmp__: it takes two values 
and returns a positive number if the first is larger, a negative number if the second is larger, 
and 0 if they are equal. 

In Python 3, cm. 
no longer exists, and the __cmp_. 
method is not supported. Instead you 
should provide __lt__, which returns Tru. 
if sel. 
is less than other. You can implement __lt_. 
using tuples and the . 
operator. 
Exercise 18.1. Write a __cmp_. 
method for Time objects. Hint: you can use tuple comparison, but 
you also might consider using integer subtraction. 

18.4 Decks 
Now that we have Cards, the next step is to define Decks. Since a deck is made up of cards, 
it is natural for each Deck to contain a list of cards as an attribute. 

The following is a class definition for Deck. The init method creates the attribute card. 
and 
generates the standard set of fifty-two cards: 

clas. 
Deck(object). 


de. 
__init__(self). 
self.card. 
. 
[. 
fo. 
sui. 
i. 
range(4). 


fo. 
ran. 
i. 
range(1. 
14). 
car. 
. 
Card(suit. 
rank. 
self.cards.append(card. 


The easiest way to populate the deck is with a nested loop. The outer loop enumerates the 
suits from 0 to 3. The inner loop enumerates the ranks from 1 to 13. Each iteration creates 
a new Card with the current suit and rank, and appends it to self.cards. 


18.5. Printing the deck 
18.5 Printing the deck 
Here is a __str_. 
method for Deck: #insid. 
clas. 
Deck. 


de. 
__str__(self). 
re. 
. 
[. 
fo. 
car. 
i. 
self.cards. 


res.append(str(card). 
retur. 
'\n'.join(res. 


This method demonstrates an efficient way to accumulate a large string: building a list of 
strings and then using join. The built-in function st. 
invokes the __str_. 
method on each 
card and returns the string representation. 

Since we invoke joi. 
on a newline character, the cards are separated by newlines. Here�s 
what the result looks like: 

>>. 
dec. 
. 
Deck(. 
>>. 
prin. 
dec. 
Ac. 
o. 
Club. 
. 
o. 
Club. 
. 
o. 
Club. 
... 
1. 
o. 
Spade. 
Jac. 
o. 
Spade. 
Quee. 
o. 
Spade. 
Kin. 
o. 
Spade. 


Even though the result appears on 52 lines, it is one long string that contains newlines. 

18.6 Add, remove, shuffle and sort 
To deal cards, we would like a method that removes a card from the deck and returns it. 
The list method po. 
provides a convenient way to do that: 

#insid. 
clas. 
Deck. 


de. 
pop_card(self). 


retur. 
self.cards.pop(. 
Since po. 
removes the last card in the list, we are dealing from the bottom of the deck. In 
real life �bottom dealing� is frowned upon, but in this context it�s ok. 

To add a card, we can use the list method append: #insid. 
clas. 
Deck. 


de. 
add_card(self. 
card). 
self.cards.append(card. 


A method like this that uses another function without doing much real work is sometimes 
called a veneer. The metaphor comes from woodworking, where it is common to glue a 
thin layer of good quality wood to the surface of a cheaper piece of wood. 


Chapter 18. Inheritance 

In this case we are defining a �thin� method that expresses a list operation in terms that are 
appropriate for decks. 

As another example, we can write a Deck method named shuffl. 
using the function shuffl. 
from the rando. 
module: 

. 
insid. 
clas. 
Deck. 


de. 
shuffle(self). 


random.shuffle(self.cards. 


Don�t forget to import random. 
Exercise 18.2. Write a Deck method named sor. 
that uses the list method sor. 
to sort the cards 
in a Deck. sor. 
uses the __cmp_. 
method we defined to determine sort order. 


18.7 Inheritance 
The language feature most often associated with object-oriented programming is inheritance.
 Inheritance is the ability to define a new class that is a modified version of an 
existing class. 

It is called �inheritance� because the new class inherits the methods of the existing class. 
Extending this metaphor, the existing class is called the parent and the new class is called 
the child. 

As an example, let�s say we want a class to represent a �hand,� that is, the set of cards held 
by one player. A hand is similar to a deck: both are made up of a set of cards, and both 
require operations like adding and removing cards. 

A hand is also different from a deck; there are operations we want for hands that don�t 
make sense for a deck. For example, in poker we might compare two hands to see which 
one wins. In bridge, we might compute a score for a hand in order to make a bid. 

This relationship between classes�similar, but different�lends itself to inheritance. 

The definition of a child class is like other class definitions, but the name of the parent class 
appears in parentheses: 

clas. 
Hand(Deck). 


"""Represent. 
. 
han. 
o. 
playin. 
cards."". 


This definition indicates that Han. 
inherits from Deck; that means we can use methods like pop_car. 
and add_car. 
for Hands as well as Decks. 

Han. 
also inherits __init_. 
from Deck, but it doesn�t really do what we want: instead of 
populating the hand with 52 new cards, the init method for Hands should initialize card. 
with an empty list. 

If we provide an init method in the Han. 
class, it overrides the one in the Dec. 
class: 

. 
insid. 
clas. 
Hand. 


de. 
__init__(self. 
label=''). 


self.card. 
. 
[. 


self.labe. 
. 
labe. 



18.8. Class diagrams 
So when you create a Hand, Python invokes this init method: 

>>. 
han. 
. 
Hand('ne. 
hand'. 


>>. 
prin. 
hand.card. 


[. 


>>. 
prin. 
hand.labe. 


ne. 
han. 


But the other methods are inherited from Deck, so we can use pop_car. 
and add_car. 
to 
deal a card: 

>>. 
dec. 
. 
Deck(. 


>>. 
car. 
. 
deck.pop_card(. 


>>. 
hand.add_card(card. 


>>. 
prin. 
han. 


Kin. 
o. 
Spade. 


A natural next step is to encapsulate this code in a method called move_cards: 

#insid. 
clas. 
Deck. 


de. 
move_cards(self. 
hand. 
num). 


fo. 
. 
i. 
range(num). 


hand.add_card(self.pop_card(). 


move_card. 
takes two arguments, a Hand object and the number of cards to deal. It modifies
 both sel. 
and hand, and returns None. 

In some games, cards are moved from one hand to another, or from a hand back to the 
deck. You can use move_card. 
for any of these operations: sel. 
can be either a Deck or a 
Hand, and hand, despite the name, can also be a Deck. 
Exercise 18.3. Write a Deck method called deal_hand. 
that takes two parameters, the number of 
hands and the number of cards per hand, and that creates new Hand objects, deals the appropriate 
number of cards per hand, and returns a list of Hand objects. 

Inheritance is a useful feature. Some programs that would be repetitive without inheritance 
can be written more elegantly with it. Inheritance can facilitate code reuse, since you can 
customize the behavior of parent classes without having to modify them. In some cases, 
the inheritance structure reflects the natural structure of the problem, which makes the 
program easier to understand. 

On the other hand, inheritance can make programs difficult to read. When a method is 
invoked, it is sometimes not clear where to find its definition. The relevant code may 
be scattered among several modules. Also, many of the things that can be done using 
inheritance can be done as well or better without it. 

18.8 Class diagrams 
So far we have seen stack diagrams, which show the state of a program, and object diagrams,
 which show the attributes of an object and their values. These diagrams represent 
a snapshot in the execution of a program, so they change as the program runs. 

They are also highly detailed; for some purposes, too detailed. A class diagram is a more 
abstract representation of the structure of a program. Instead of showing individual objects,
 it shows classes and the relationships between them. 


Chapter 18. Inheritance 

HandDeck*
Card
Figure 18.2: Class diagram. 

There are several kinds of relationship between classes: 

� Objects in one class might contain references to objects in another class. For example, 
each Rectangle contains a reference to a Point, and each Deck contains references to 
many Cards. This kind of relationship is called HAS-A, as in, �a Rectangle has a 
Point.� 
� One class might inherit from another. This relationship is called IS-A, as in, �a Hand 
is a kind of a Deck.� 
� One class might depend on another in the sense that changes in one class would 
require changes in the other. 
A class diagram is a graphical representation of these relationships. For example, Figure
 18.2 shows the relationships between Card, Dec. 
and Hand. 

The arrow with a hollow triangle head represents an IS-A relationship; in this case it indicates
 that Hand inherits from Deck. 

The standard arrow head represents a HAS-A relationship; in this case a Deck has references
 to Card objects. 

The star (*) near the arrow head is a multiplicity; it indicates how many Cards a Deck has. 
A multiplicity can be a simple number, like 52, a range, like 5... 
or a star, which indicates 
that a Deck can have any number of Cards. 

A more detailed diagram might show that a Deck actually contains a list of Cards, but 
built-in types like list and dict are usually not included in class diagrams. 

Exercise 18.4. Read TurtleWorld.py, World.p. 
and Gui.p. 
and draw a class diagram that 
shows the relationships among the classes defined there. 

18.9 Debugging 
Inheritance can make debugging a challenge because when you invoke a method on an 
object, you might not know which method will be invoked. 

Suppose you are writing a function that works with Hand objects. You would like it to 
work with all kinds of Hands, like PokerHands, BridgeHands, etc. If you invoke a method 
like shuffle, you might get the one defined in Deck, but if any of the subclasses override 
this method, you�ll get that version instead. 

Any time you are unsure about the flow of execution through your program, the simplest
 solution is to add print statements at the beginning of the relevant methods. If 


18.10. Data encapsulation 
Deck.shuffl. 
prints a message that says something like Runnin. 
Deck.shuffle, then as 
the program runs it traces the flow of execution. 

As an alternative, you could use this function, which takes an object and a method name 
(as a string) and returns the class that provides the definition of the method: 

de. 
find_defining_class(obj. 
meth_name). 


fo. 
t. 
i. 
type(obj).mro(). 


i. 
meth_nam. 
i. 
ty.__dict__. 


retur. 
t. 


Here�s an example: 

>>. 
han. 
. 
Hand(. 


>>. 
prin. 
find_defining_class(hand. 
'shuffle'. 


<clas. 
'Card.Deck'. 


So the shuffl. 
method for this Hand is the one in Deck. 

find_defining_clas. 
uses the mr. 
method to get the list of class objects (types) that will 
be searched for methods. �MRO� stands for �method resolution order.� 

Here�s a program design suggestion: whenever you override a method, the interface of the 
new method should be the same as the old. It should take the same parameters, return the 
same type, and obey the same preconditions and postconditions. If you obey this rule, you 
will find that any function designed to work with an instance of a superclass, like a Deck, 
will also work with instances of subclasses like a Hand or PokerHand. 

If you violate this rule, your code will collapse like (sorry) a house of cards. 

18.10 Data encapsulation 
Chapter 16 demonstrates a development plan we might call �object-oriented design.� We 
identified objects we needed�Time, Poin. 
and Rectangle�and defined classes to represent
 them. In each case there is an obvious correspondence between the object and some 
entity in the real world (or at least a mathematical world). 

But sometimes it is less obvious what objects you need and how they should interact. In 
that case you need a different development plan. In the same way that we discovered 
function interfaces by encapsulation and generalization, we can discover class interfaces 
by data encapsulation. 

Markov analysis, from Section 13.8, provides a good example. If you download my 
code from http://thinkpython.com/code/markov.py, you�ll see that it uses two global 
variables�suffix_ma. 
and prefix�that are read and written from several functions. 

suffix_ma. 
. 
{. 


prefi. 
. 
(. 


Because these variables are global we can only run one analysis at a time. If we read two 
texts, their prefixes and suffixes would be added to the same data structures (which makes 
for some interesting generated text). 

To run multiple analyses, and keep them separate, we can encapsulate the state of each 
analysis in an object. Here�s what that looks like: 


Chapter 18. Inheritance 

clas. 
Markov(object). 


de. 
__init__(self). 
self.suffix_ma. 
. 
{. 
self.prefi. 
. 
(. 


Next, we transform the functions into methods. For example, here�s process_word: de. 
process_word(self. 
word. 
order=2). 
i. 
len(self.prefix. 
. 
order. 
self.prefi. 
+. 
(word,. 
retur. 


try. 
self.suffix_map[self.prefix].append(word. 


excep. 
KeyError. 
. 
i. 
ther. 
i. 
n. 
entr. 
fo. 
thi. 
prefix. 
mak. 
on. 
self.suffix_map[self.prefix. 
. 
[word. 


self.prefi. 
. 
shift(self.prefix. 
word. 


Transforming a program like this�changing the design without changing the function�is 
another example of refactoring (see Section 4.7). 

This example suggests a development plan for designing objects and methods: 

1. Start by writing functions that read and write global variables (when necessary). 
2. Once you get the program working, look for associations between global variables 
and the functions that use them. 
3. Encapsulate related variables as attributes of an object. 
4. Transform the associated functions into methods of the new class. 
Exercise 18.5. Download my code from Section 13.8 (http. 
/. 
thinkpython. 
com. 
code. 
markov. 
p. 
), and follow the steps described above to encapsulate the global variables as attributes 
of a new class called Markov. Solution: http. 
/. 
thinkpython. 
com. 
code. 
Markov. 
p. 
(note 
the capital M). 

18.11 Glossary 
encode: To represent one set of values using another set of values by constructing a mapping
 between them. 

class attribute: An attribute associated with a class object. Class attributes are defined 
inside a class definition but outside any method. 

instance attribute: An attribute associated with an instance of a class. 

veneer: A method or function that provides a different interface to another function without
 doing much computation. 

inheritance: The ability to define a new class that is a modified version of a previously 
defined class. 


18.12. Exercises 
parent class: The class from which a child class inherits. 

child class: A new class created by inheriting from an existing class; also called a �subclass.�
 

IS-A relationship: The relationship between a child class and its parent class. 

HAS-A relationship: The relationship between two classes where instances of one class 
contain references to instances of the other. 

class diagram: A diagram that shows the classes in a program and the relationships between
 them. 

multiplicity: A notation in a class diagram that shows, for a HAS-A relationship, how 
many references there are to instances of another class. 

18.12 Exercises 
Exercise 18.6. The following are the possible hands in poker, in increasing order of value (and 
decreasing order of probability): 

pair: two cards with the same rank 
two pair: two pairs of cards with the same rank 
three of a kind: three cards with the same rank 
straight: five cards with ranks in sequence (aces can be high or low, so Ace-2-3-4-. 
is a straight 

and so is 10-Jack-Queen-King-Ace, but Queen-King-Ace-2-. 
is not.) 

flush: five cards with the same suit 
full house: three cards with one rank, two cards with another 
four of a kind: four cards with the same rank 
straight flush: five cards in sequence (as defined above) and with the same suit 

The goal of these exercises is to estimate the probability of drawing these various hands. 

1. Download the following files from http. 
/. 
thinkpython. 
com. 
cod. 
: 
Card.p. 
: A complete version of the Card, Dec. 
and Han. 
classes in this chapter. PokerHand.p. 
: An incomplete implementation of a class that represents a poker hand, and 
some code that tests it. 

2. If you run PokerHand.py, it deals seven 7-card poker hands and checks to see if any of them 
contains a flush. Read this code carefully before you go on. 
3. Add methods to PokerHand.p. 
named has_pair, has_twopair, etc. that return True or 
False according to whether or not the hand meets the relevant criteria. Your code should 
work correctly for �hands� that contain any number of cards (although 5 and 7 are the most 
common sizes). 
4. Write a method named classif. 
that figures out the highest-value classification for a hand 
and sets the labe. 
attribute accordingly. For example, a 7-card hand might contain a flush 
and a pair; it should be labeled �flush�. 

Chapter 18. Inheritance 

5. When you are convinced that your classification methods are working, the next step is to estimate
 the probabilities of the various hands. Write a function in PokerHand.p. 
that shuffles 
a deck of cards, divides it into hands, classifies the hands, and counts the number of times 
various classifications appear. 
6. Print a table of the classifications and their probabilities. Run your program with larger and 
larger numbers of hands until the output values converge to a reasonable degree of accuracy.
 Compare your results to the values at http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Hand. 
ranking. 
. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
PokerHandSoln. 
p. 
. 
Exercise 18.7. This exercise uses TurtleWorld from Chapter 4. You will write code that makes 
Turtles play tag. If you are not familiar with the rules of tag, see http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Tag. 
. 
game. 
. 


1. Download http. 
/. 
thinkpython. 
com. 
code. 
Wobbler. 
p. 
and run it. You should see a 
TurtleWorld with three Turtles. If you press the Ru. 
button, the Turtles wander at random. 
2. Read the code and make sure you understand how it works. The Wobble. 
class inherits from 
Turtle, which means that the Turtl. 
methods lt, rt, f. 
and b. 
work on Wobblers. 
The ste. 
method gets invoked by TurtleWorld. It invokes steer, which turns the Turtle 
in the desired direction, wobble, which makes a random turn in proportion to the Turtle�s 
clumsiness, and move, which moves forward a few pixels, depending on the Turtle�s speed. 

3. Create a file named Tagger.py. Import everything from Wobbler, then define a class named Tagge. 
that inherits from Wobbler. Call make_worl. 
passing the Tagge. 
class object as an 
argument. 
4. Adda stee. 
method to Tagge. 
to override the one in Wobbler. As a starting place, write a 
version that always points the Turtle toward the origin. Hint: use the math function atan. 
and the Turtle attributes x, . 
and heading. 
5. Modify stee. 
so that the Turtles stay in bounds. For debugging, you might want to use the Ste. 
button, which invokes ste. 
once on each Turtle. 
6. Modify stee. 
so that each Turtle points toward its nearest neighbor. Hint: Turtles have an 
attribute, world, that is a reference to the TurtleWorld they live in, and the TurtleWorld has 
an attribute, animals, that is a list of all Turtles in the world. 
7. Modify stee. 
so the Turtles play tag. You can add methods to Tagge. 
and you can override stee. 
and __init__, but you may not modify or override step, wobbl. 
or move. Also, stee. 
is allowed to change the heading of the Turtle but not the position. 
Adjust the rules and your stee. 
method for good quality play; for example, it should be 
possible for the slow Turtle to tag the faster Turtles eventually. 

Solution: http. 
/. 
thinkpython. 
com. 
code. 
Tagger. 
p. 
. 


Chapter 19 

Case study: Tkinter 

19.1 GUI 
Most of the programs we have seen so far are text-based, but many programs use graphical 
user interfaces, also known as GUIs. 

Python provides several choices for writing GUI-based programs, including wxPython, 
Tkinter, and Qt. Each has pros and cons, which is why Python has not converged on a 
standard. 

The one I will present in this chapter is Tkinter because I think it is the easiest to get started 
with. Most of the concepts in this chapter apply to the other GUI modules, too. 

There are several books and web pages about Tkinter. One of the best online resources is 
An Introduction to Tkinter by Fredrik Lundh. 

I have written a module called Gui.p. 
that comes with Swampy. It provides a simplified 
interface to the functions and classes in Tkinter. The examples in this chapter are based on 
this module. 

Here is a simple example that creates and displays a Gui: 

To create a GUI, you have to import Gu. 
from Swampy: 

fro. 
swampy.Gu. 
impor. 
. 


Or, depending on how you installed Swampy, like this: 

fro. 
Gu. 
impor. 
. 


Then instantiate a Gui object: 

. 
. 
Gui(. 


g.title('Gui'. 


g.mainloop(. 


When you run this code, a window should appear with an empty gray square and the 
title Gui. mainloo. 
runs the event loop, which waits for the user to do something and 


Chapter 19. Case study: Tkinter 

responds accordingly. It is an infinite loop; it runs until the user closes the window, or 
presses Control-C, or does something that causes the program to quit. 

This Gui doesn�t do much because it doesn�t have any widgets. Widgets are the elements 
that make up a GUI; they include: 

Button: A widget, containing text or an image, that performs an action when pressed. 

Canvas: A region that can display lines, rectangles, circles and other shapes. 

Entry: A region where users can type text. 

Scrollbar: A widget that controls the visible part of another widget. 

Frame: A container, often invisible, that contains other widgets. 

The empty gray square you see when you create a Gui is a Frame. When you create a new 
widget, it is added to this Frame. 

19.2 Buttons and callbacks 
The method b. 
creates a Button widget: 

butto. 
. 
g.bu(text='Pres. 
me.'. 


The return value from b. 
is a Button object. The button that appears in the Frame is a 
graphical representation of this object; you can control the button by invoking methods on 
it. 

b. 
takes up to 32 parameters that control the appearance and function of the button. These 
parameters are called options. Instead of providing values for all 32 options, you can use 
keyword arguments, like text='Pres. 
me.', to specify only the options you need and use 
the default values for the rest. 
When you add a widget to the Frame, it gets �shrink-wrapped;� that is, the Frame shrinks 
to the size of the Button. If you add more widgets, the Frame grows to accommodate them. 

The method l. 
creates a Label widget: 

labe. 
. 
g.la(text='Pres. 
th. 
button.'. 


By default, Tkinter stacks the widgets top-to-bottom and centers them. We�ll see how to 
override that behavior soon. 

If you press the button, you will see that it doesn�t do much. That�s because you haven�t 
�wired it up;� that is, you haven�t told it what to do! 

The option that controls the behavior of a button is command. The value of comman. 
is a 
function that gets executed when the button is pressed. For example, here is a function 
that creates a new Label: 

de. 
make_label(). 


g.la(text='Than. 
you.'. 


Now we can create a button with this function as its command: 


19.3. Canvas widgets 
button. 
. 
g.bu(text='No. 
pres. 
me!'. 
command=make_label. 


When you press this button, it should execute make_labe. 
and a new label should appear. 

The value of the comman. 
option is a function object, which is known as a callback because 
after you call b. 
to create the button, the flow of execution �calls back� when the user 
presses the button. 

This kind of flow is characteristic of event-driven programming. User actions, like button
 presses and key strokes, are called events. In event-driven programming, the flow of 
execution is determined by user actions rather than by the programmer. 

The challenge of event-driven programming is to construct a set of widgets and callbacks 
that work correctly (or at least generate appropriate error messages) for any sequence of 
user actions. 

Exercise 19.1. Write a program that creates a GUI with a single button. When the button is 
pressed it should create a second button. When that button is pressed, it should create a label that 
says, �Nice job!�. 

What happens if you press the buttons more than once? Solution: http. 
/. 
thinkpython. 
com. 
code. 
button. 
demo. 
p. 


19.3 Canvas widgets 
One of the most versatile widgets is the Canvas, which creates a region for drawing lines, 
circles and other shapes. If you did Exercise 15.4 you are already familiar with canvases. 

The method c. 
creates a new Canvas: 

canva. 
. 
g.ca(width=500. 
height=500. 


widt. 
and heigh. 
are the dimensions of the canvas in pixels. 

After you create a widget, you can still change the values of the options with the confi. 
method. For example, the b. 
option changes the background color: 

canvas.config(bg='white'. 


The value of b. 
is a string that names a color. The set of legal color names is different for 
different implementations of Python, but all implementations provide at least: 

whit. 
blac. 


re. 
gree. 
blu. 


cya. 
yello. 
magent. 


Shapes on a Canvas are called items. For example, the Canvas method circl. 
draws (you 
guessed it) a circle: 

ite. 
. 
canvas.circle([0,0]. 
100. 
fill='red'. 


The first argument is a coordinate pair that specifies the center of the circle; the second is 
the radius. 

Gui.p. 
provides a standard Cartesian coordinate system with the origin at the center of 
the Canvas and the positive y axis pointing up. This is different from some other graphics 
systems where the origin is in the upper left corner, with the y axis pointing down. 

The fil. 
option specifies that the circle should be filled in with red. 

The return value from circl. 
is an Item object that provides methods for modifying the 
item on the canvas. For example, you can use confi. 
to change any of the circle�s options: 


Chapter 19. Case study: Tkinter 

item.config(fill='yellow'. 
outline='orange'. 
width=10. 


widt. 
is the thickness of the outline in pixels; outlin. 
is the color. 

Exercise 19.2. Write a program that creates a Canvas and a Button. When the user presses the 
Button, it should draw a circle on the canvas. 

19.4 Coordinate sequences 
The rectangl. 
method takes a sequence of coordinates that specify opposite corners of the 
rectangle. This example draws a green rectangle with the lower left corner at the origin 
and the upper right corner at (200, 100): 

canvas.rectangle([[0. 
0]. 
[200. 
100]]. 


fill='blue'. 
outline='orange'. 
width=10. 


This way of specifying corners is called a bounding box because the two points bound the 
rectangle. 

ova. 
takes a bounding box and draws an oval within the specified rectangle: 

canvas.oval([[0. 
0]. 
[200. 
100]]. 
outline='orange'. 
width=10. 


lin. 
takes a sequence of coordinates and draws a line that connects the points. This example
 draws two legs of a triangle: 

canvas.line([[0. 
100]. 
[100. 
200]. 
[200. 
100]]. 
width=10. 


polygo. 
takes the same arguments, but it draws the last leg of the polygon (if necessary) 
and fills it in: 

canvas.polygon([[0. 
100]. 
[100. 
200]. 
[200. 
100]]. 


fill='red'. 
outline='orange'. 
width=10. 


19.5 More widgets 
Tkinter provides two widgets that let users type text: an Entry, which is a single line, and 
a Text widget, which has multiple lines. 

e. 
creates a new Entry: 
entr. 
. 
g.en(text='Defaul. 
text.'. 


The tex. 
option allows you to put text into the entry when it is created. The ge. 
method 
returns the contents of the Entry (which may have been changed by the user): 

>>. 
entry.get(. 


'Defaul. 
text.. 


t. 
creates a Text widget: 
tex. 
. 
g.te(width=100. 
height=5. 


widt. 
and heigh. 
are the dimensions of the widget in characters and lines. 

inser. 
puts text into the Text widget: 

text.insert(END. 
'. 
lin. 
o. 
text.'. 



19.6. Packing widgets 
EN. 
is a special index that indicates the last character in the Text widget. 
You can also specify a character using a dotted index, like 1.1, which has the line number
 before the dot and the column number after. The following example adds the letters 'nother. 
after the first character of the first line. 

>>. 
text.insert(1.1. 
'nother'. 


The ge. 
method reads the text in the widget; it takes a start and end index as arguments. 
The following example returns all the text in the widget, including the newline character: 

>>. 
text.get(0.0. 
END. 


'Anothe. 
lin. 
o. 
text.\n. 


The delet. 
method removes text from the widget; the following example deletes all but 
the first two characters: 

>>. 
text.delete(1.2. 
END. 


>>. 
text.get(0.0. 
END. 


'An\n. 


Exercise 19.3. Modify your solution to Exercise 19.2 by adding an Entry widget and a second 
button. When the user presses the second button, it should read a color name from the Entry and 
use it to change the fill color of the circle. Use confi. 
to modify the existing circle; don�t create a 
new one. 

Your program should handle the case where the user tries to change the color of a circle that hasn�t 
been created, and the case where the color name is invalid. 

You can see my solution at http. 
/. 
thinkpython. 
com. 
code. 
circle. 
demo. 
p. 
. 

19.6 Packing widgets 
So far we have been stacking widgets in a single column, but in most GUIs the layout is 
more complicated. For example, Figure 19.1 shows a simplified version of TurtleWorld (see 
Chapter 4). 

This section presents the code that creates this GUI, broken into a series of 
steps. You can download the complete example from http://thinkpython.com/code. 
SimpleTurtleWorld.py. 

At the top level, this GUI contains two widgets�a Canvas and a Frame�arranged in a 
row. So the first step is to create the row. 

clas. 
SimpleTurtleWorld(TurtleWorld). 


"""Thi. 
clas. 
i. 
identica. 
t. 
TurtleWorld. 
bu. 
th. 
cod. 
tha. 


lay. 
ou. 
th. 
GU. 
i. 
simplifie. 
fo. 
explanator. 
purposes."". 


de. 
setup(self). 


self.row(. 


... 


setu. 
is the function that creates and arranges the widgets. Arranging widgets in a GUI is 
called packing. 

ro. 
creates a row Frame and makes it the �current Frame.� Until this Frame is closed or 
another Frame is created, all subsequent widgets are packed in a row. 
Here is the code that creates the Canvas and the column Frame that hold the other widgets: 


Chapter 19. Case study: Tkinter 


Figure 19.1: Class diagram. 

self.canva. 
. 
self.ca(width=400. 
height=400. 
bg='white'. 
self.col(. 


The first widget in the column is a grid Frame, which contains four buttons arranged twoby-
two: 

self.gr(cols=2. 
self.bu(text='Prin. 
canvas'. 
command=self.canvas.dump. 
self.bu(text='Quit'. 
command=self.quit. 
self.bu(text='Mak. 
Turtle'. 
command=self.make_turtle. 
self.bu(text='Clear'. 
command=self.clear. 
self.endgr(. 


g. 
creates the grid; the argument is the number of columns. Widgets in the grid are laid 
out left-to-right, top-to-bottom. 
The first button uses self.canvas.dum. 
as a callback; the second uses self.quit. These 
are bound methods, which means they are associated with a particular object. When they 
are invoked, they are invoked on the object. 

The next widget in the column is a row Frame that contains a Button and an Entry: 

self.row([0,1]. 
pady=30. 
self.bu(text='Ru. 
file'. 
command=self.run_file. 
self.en_fil. 
. 
self.en(text='snowflake.py'. 
width=5. 
self.endrow(. 


The first argument to ro. 
is a list of weights that determines how extra space is allocated 
between widgets. The list [0,1. 
means that all extra space is allocated to the second widget,
 which is the Entry. If you run this code and resize the window, you will see that the 
Entry grows and the Button doesn�t. 

The option pad. 
�pads� this row in the y direction, adding 30 pixels of space above and 
below. 


19.7. Menus and Callables 
endro. 
ends this row of widgets, so subsequent widgets are packed in the column Frame. Gui.p. 
keeps a stack of Frames: 

� When you use row, co. 
or g. 
to create a Frame, it goes on top of the stack and becomes 
the current Frame. 
� When you use endrow, endco. 
or endg. 
to close a Frame, it gets popped off the stack 
and the previous Frame on the stack becomes the current Frame. 
The method run_fil. 
reads the contents of the Entry, uses it as a filename, reads the contents
 and passes it to run_code. self.inte. 
is an Interpreter object that knows how to take 
a string and execute it as Python code. 

de. 
run_file(self). 
filenam. 
. 
self.en_file.get(. 
f. 
. 
open(filename. 
sourc. 
. 
fp.read(. 
self.inter.run_code(source. 
filename. 


The last two widgets are a Text widget and a Button: 

self.te_cod. 
. 
self.te(width=25. 
height=10. 
self.te_code.insert(END. 
'world.clear()\n'. 
self.te_code.insert(END. 
'bo. 
. 
Turtle(world)\n'. 


self.bu(text='Ru. 
code'. 
command=self.run_text. 


run_tex. 
is similar to run_fil. 
except that it takes the code from the Text widget instead 
of from a file: 

de. 
run_text(self). 
sourc. 
. 
self.te_code.get(1.0. 
END. 
self.inter.run_code(source. 
'<user-provide. 
code>'. 


Unfortunately, the details of widget layout are different in other languages, and in different 
Python modules. Tkinter alone provides three different mechanisms for arranging widgets. 
These mechanisms are called geometry managers. The one I demonstrated in this section 
is the �grid� geometry manager; the others are called �pack� and �place�. 

Fortunately, most of the concepts in this section apply to other GUI modules and other 
languages. 

19.7 Menus and Callables 
A Menubutton is a widget that looks like a button, but when pressed it pops up a menu. 
After the user selects an item, the menu disappears. 

Here is code that creates a color selection Menubutton (you can download it from http. 
//thinkpython.com/code/menubutton_demo.py): 

. 
. 
Gui(. 
g.la('Selec. 
. 
color:'. 
color. 
. 
['red'. 
'green'. 
'blue'. 
m. 
. 
g.mb(text=colors[0]. 



Chapter 19. Case study: Tkinter 

m. 
creates the Menubutton. Initially, the text on the button is the name of the default color. 
The following loop creates one menu item for each color: 
fo. 
colo. 
i. 
colors. 


g.mi(mb. 
text=color. 
command=Callable(set_color. 
color). 


The first argument of m. 
is the Menubutton these items are associated with. 

The comman. 
option is a Callable object, which is something new. So far we have seen 
functions and bound methods used as callbacks, which works fine if you don�t have to 
pass any arguments to the function. Otherwise you have to construct a Callable object that 
contains a function, like set_color, and its arguments, like color. 

The Callable object stores a reference to the function and the arguments as attributes. Later, 
when the user clicks on a menu item, the callback calls the function and passes the stored 
arguments. 

Here is what set_colo. 
might look like: 

de. 
set_color(color). 


mb.config(text=color. 


prin. 
colo. 


When the user selects a menu item and set_colo. 
is called, it configures the Menubutton 
to display the newly-selected color. It also print the color; if you try this example, you can 
confirm that set_colo. 
is called when you select an item (and not called when you create 
the Callable object). 

19.8 Binding 
A binding is an association between a widget, an event and a callback: when an event (like 
a button press) happens on a widget, the callback is invoked. 

Many widgets have default bindings. For example, when you press a button, the default 
binding changes the relief of the button to make it look depressed. When you release the 
button, the binding restores the appearance of the button and invokes the callback specified 
with the comman. 
option. 

You can use the bin. 
method to override these default bindings or to add new ones. For 
example, this code creates a binding for a canvas (you can download the code in this section 
from http://thinkpython.com/code/draggable_demo.py): 

ca.bind('<ButtonPress-1>'. 
make_circle. 


The first argument is an event string; this event is triggered when the user presses 
the left mouse button. Other mouse events include ButtonMotion, ButtonReleas. 
and Double-Button. 

The second argument is an event handler. An event handler is a function or bound method, 
like a callback, but an important difference is that an event handler takes an Event object 
as a parameter. Here is an example: 

de. 
make_circle(event). 


po. 
. 
ca.canvas_coords([event.x. 
event.y]. 


ite. 
. 
ca.circle(pos. 
5. 
fill='red'. 



19.8. Binding 
The Event object contains information about the type of event and details like the coordinates
 of the mouse pointer. In this example the information we need is the location of the 
mouse click. These values are in �pixel coordinates,� which are defined by the underlying 
graphical system. The method canvas_coord. 
translates them to �Canvas coordinates,� 
which are compatible with Canvas methods like circle. 

For Entry widgets, it is common to bind the <Return. 
event, which is triggered when the 
user presses the Retur. 
or Ente. 
key. For example, the following code creates a Button and 
an Entry. 

b. 
. 
g.bu('Mak. 
tex. 
item:'. 
make_text. 


e. 
. 
g.en(. 


en.bind('<Return>'. 
make_text. 


make_tex. 
is called when the Button is pressed or when the user hits Retur. 
while typing 
in the Entry. To make this work, we need a function that can be called as a command (with 
no arguments) or as an event handler (with an Event as an argument): 

de. 
make_text(event=None). 


tex. 
. 
en.get(. 


ite. 
. 
ca.text([0,0]. 
text. 


make_tex. 
gets the contents of the Entry and displays it as a Text item in the Canvas. 

It is also possible to create bindings for Canvas items. The following is a class definition 
for Draggable, which is a child class of Ite. 
that provides bindings that implement dragand-
drop capability. 

clas. 
Draggable(Item). 


de. 
__init__(self. 
item). 


self.canva. 
. 
item.canva. 


self.ta. 
. 
item.ta. 


self.bind('<Button-3>'. 
self.select. 


self.bind('<B3-Motion>'. 
self.drag. 


self.bind('<Release-3>'. 
self.drop. 


The init method takes an Item as a parameter. It copies the attributes of the Item and then 
creates bindings for three events: a button press, button motion, and button release. 

The event handler selec. 
stores the coordinates of the current event and the original color 
of the item, then changes the color to yellow: 

de. 
select(self. 
event). 


self.drag. 
. 
event.. 


self.drag. 
. 
event.. 


self.fil. 
. 
self.cget('fill'. 


self.config(fill='yellow'. 


cge. 
stands for �get configuration;� it takes the name of an option as a string and returns 
the current value of that option. 

dra. 
computes how far the object has moved relative to the starting place, updates the 
stored coordinates, and then moves the item. 

de. 
drag(self. 
event). 


d. 
. 
event.. 
. 
self.drag. 



Chapter 19. Case study: Tkinter 

d. 
. 
event.. 
. 
self.drag. 


self.drag. 
. 
event.. 


self.drag. 
. 
event.. 


self.move(dx. 
dy. 


This computation is done in pixel coordinates; there is no need to convert to Canvas coordinates.
 

Finally, dro. 
restores the original color of the item: 

de. 
drop(self. 
event). 


self.config(fill=self.fill. 


You can use the Draggabl. 
class to add drag-and-drop capability to an existing item. For 
example, here is a modified version of make_circl. 
that uses circl. 
to create an Item and Draggabl. 
to make it draggable: 

de. 
make_circle(event). 


po. 
. 
ca.canvas_coords([event.x. 
event.y]. 


ite. 
. 
ca.circle(pos. 
5. 
fill='red'. 


ite. 
. 
Draggable(item. 


This example demonstrates one of the benefits of inheritance: you can modify the capabilities
 of a parent class without modifying its definition. This is particularly useful if you 
want to change behavior defined in a module you did not write. 

19.9 Debugging 
One of the challenges of GUI programming is keeping track of which things happen while 
the GUI is being built and which things happen later in response to user events. 

For example, when you are setting up a callback, it is a common error to call the function 
rather than passing a reference to it: 

de. 
the_callback(). 


prin. 
'Called.. 


g.bu(text='Thi. 
i. 
wrong!'. 
command=the_callback(). 


If you run this code, you will see that it calls the_callbac. 
immediately, and then creates 
the button. When you press the button, it does nothing because the return value from the_callbac. 
is None. Usually you do not want to invoke a callback while you are setting 
up the GUI; it should only be invoked later in response to a user event. 

Another challenge of GUI programming is that you don�t have control of the flow of execution.
 Which parts of the program execute and their order are determined by user actions. 
That means that you have to design your program to work correctly for any possible sequence
 of events. 

For example, the GUI in Exercise 19.3 has two widgets: one creates a Circle item and the 
other changes the color of the Circle. If the user creates the circle and then changes its color, 
there�s no problem. But what if the user changes the color of a circle that doesn�t exist yet? 
Or creates more than one circle? 


19.10. Glossary 
As the number of widgets grows, it is increasingly difficult to imagine all possible sequences
 of events. One way to manage this complexity is to encapsulate the state of the 
system in an object and then consider: 

� What are the possible states? In the Circle example, we might consider two states: 
before and after the user creates the first circle. 
� In each state, what events can occur? In the example, the user can press either of the 
buttons, or quit. 
� For each state-event pair, what is the desired outcome? Since there are two states and 
two buttons, there are four state-event pairs to consider. 
� What can cause a transition from one state to another? In this case, there is a transition 
when the user creates the first circle. 
You might also find it useful to define, and check, invariants that should hold regardless of 
the sequence of events. 

This approach to GUI programming can help you write correct code without taking the 
time to test every possible sequence of user events! 

19.10 Glossary 
GUI: A graphical user interface. 
widget: One of the elements that makes up a GUI, including buttons, menus, text entry 


fields, etc. 

option: A value that controls the appearance or function of a widget. 

keyword argument: An argument that indicates the parameter name as part of the func


tion call. 
callback: A function associated with a widget that is called when the user performs an 

action. 

bound method: A method associated with a particular instance. 

event-driven programming: A style of programming in which the flow of execution is 

determined by user actions. 

event: A user action, like a mouse click or key press, that causes a GUI to respond. 

event loop: An infinite loop that waits for user actions and responds. 

item: A graphical element on a Canvas widget. 

bounding box: A rectangle that encloses a set of items, usually specified by two opposing 

corners. 

pack: To arrange and display the elements of a GUI. 

geometry manager: A system for packing widgets. 

binding: An association between a widget, an event, and an event handler. The event 

handler is called when the event occurs in the widget. 


Chapter 19. Case study: Tkinter 

19.11 Exercises 
Exercise 19.4. For this exercise, you will write an image viewer. Here is a simple example: 

. 
. 
Gui(. 


canva. 
. 
g.ca(width=300. 


phot. 
. 
PhotoImage(file='danger.gif'. 


canvas.image([0,0]. 
image=photo. 


g.mainloop(. 


PhotoImag. 
reads a file and returns a PhotoImag. 
object that Tkinter can display. Canvas.imag. 
puts the image on the canvas, centered on the given coordinates. You can also put images on labels, 
buttons, and some other widgets: 

g.la(image=photo. 


g.bu(image=photo. 


PhotoImage can only handle a few image formats, like GIF and PPM, but we can use the Python 
Imaging Library (PIL) to read other files. 

The name of the PIL module is Image, but Tkinter defines an object with the same name. To avoid 
the conflict, you can use import...a. 
like this: 

impor. 
Imag. 
a. 
PI. 


impor. 
ImageT. 


The first line imports Imag. 
and gives it the local name PIL. The second line imports ImageTk, 
which can translate a PIL image into a Tkinter PhotoImage. Here�s an example: 

imag. 
. 
PIL.open('allen.png'. 


photo. 
. 
ImageTk.PhotoImage(image. 


g.la(image=photo2. 


1. Download image_demo.py, danger.gi. 
and allen.pn. 
from http. 
/. 
thinkpython. 
com. 
cod. 
. Run image_demo.py. You might have to install PI. 
and ImageTk. They 
are probably in your software repository, but if not you can get them from http. 
/. 
pythonware. 
com. 
products. 
pi. 
. 
2. In image_demo.p. 
change the name of the second PhotoImage from photo. 
to phot. 
and 
run the program again. You should see the second PhotoImage but not the first. 
The problem is that when you reassign phot. 
it overwrites the reference to the first PhotoImage,
 which then disappears. The same thing happens if you assign a PhotoImage to a local 
variable; it disappears when the function ends. 

To avoid this problem, you have to store a reference to each PhotoImage you want to keep. You 
can use a global variable, or store PhotoImages in a data structure or as an attribute of an 
object. 

This behavior can be frustrating, which is why I am warning you (and why the example image 
says �Danger!�). 

3. Starting with this example, write a program that takes the name of a directory and loops 
through all the files, displaying any files that PIL recognizes as images. You can use a tr. 
statement to catch the files PIL doesn�t recognize. 
When the user clicks on the image, the program should display the next one. 


19.11. Exercises 
4. PIL provides a variety of methods for manipulating images. 
You can read about them at http. 
/. 
pythonware. 
com. 
library. 
pil. 
handboo. 
. As a challenge, choose a few of 
these methods and provide a GUI for applying them to images. 
Solution: http. 
/. 
thinkpython. 
com. 
code. 
ImageBrowser. 
p. 
. 
Exercise 19.5. A vector graphics editor is a program that allows users to draw and edit shapes on 
the screen and generate output files in vector graphics formats like Postscript and SVG. 


Write a simple vector graphics editor using Tkinter. At a minimum, it should allow users to draw 
lines, circles and rectangles, and it should use Canvas.dum. 
to generate a Postscript description of 
the contents of the Canvas. 


As a challenge, you could allow users to select and resize items on the Canvas. 
Exercise 19.6. Use Tkinter to write a basic web browser. It should have a Text widget where the 
user can enter a URL and a Canvas to display the contents of the page. 


You can use the urlli. 
module to download files (see Exercise 14.6) and the HTMLParse. 
module 
to parse the HTML tags (see http. 
/. 
docs. 
python. 
org. 
2. 
library. 
htmlparser. 
htm. 
). 


At a minimum your browser should handle plain text and hyperlinks. As a challenge you could 
handle background colors, text formatting tags and images. 



Chapter 19. Case study: Tkinter 


Appendix A 

Debugging 

Different kinds of errors can occur in a program, and it is useful to distinguish among them 
in order to track them down more quickly: 

� Syntax errors are produced by Python when it is translating the source code into 
byte code. They usually indicate that there is something wrong with the syntax of 
the program. Example: Omitting the colon at the end of a de. 
statement yields the 
somewhat redundant message SyntaxError. 
invali. 
syntax. 
� Runtime errors are produced by the interpreter if something goes wrong while the 
program is running. Most runtime error messages include information about where 
the error occurred and what functions were executing. Example: An infinite recursion
 eventually causes the runtime error �maximum recursion depth exceeded.� 
� Semantic errors are problems with a program that runs without producing error messages
 but doesn�t do the right thing. Example: An expression may not be evaluated 
in the order you expect, yielding an incorrect result. 
The first step in debugging is to figure out which kind of error you are dealing with. Although
 the following sections are organized by error type, some techniques are applicable 
in more than one situation. 

A.1 Syntax errors 
Syntax errors are usually easy to fix once you figure out what they are. Unfortunately, 
the error messages are often not helpful. The most common messages are SyntaxError. 
invali. 
synta. 
and SyntaxError. 
invali. 
token, neither of which is very informative.
 

On the other hand, the message does tell you where in the program the problem occurred. 
Actually, it tells you where Python noticed a problem, which is not necessarily where the 
error is. Sometimes the error is prior to the location of the error message, often on the 
preceding line. 


Appendix A. Debugging 

If you are building the program incrementally, you should have a good idea about where 
the error is. It will be in the last line you added. 

If you are copying code from a book, start by comparing your code to the book�s code 
very carefully. Check every character. At the same time, remember that the book might be 
wrong, so if you see something that looks like a syntax error, it might be. 

Here are some ways to avoid the most common syntax errors: 

1. Make sure you are not using a Python keyword for a variable name. 
2. Check that you have a colon at the end of the header of every compound statement, 
including for, while, if, and de. 
statements. 
3. Make sure that any strings in the code have matching quotation marks. 
4. If you have multiline strings with triple quotes (single or double), make sure you 
have terminated the string properly. An unterminated string may cause an invali. 
toke. 
error at the end of your program, or it may treat the following part of the 
program as a string until it comes to the next string. In the second case, it might not 
produce an error message at all! 
5. An unclosed opening operator�(, {, or [�makes Python continue with the next line 
as part of the current statement. Generally, an error occurs almost immediately in the 
next line. 
6. Check for the classic . 
instead of =. 
inside a conditional. 
7. Check the indentation to make sure it lines up the way it is supposed to. 
Python 
can handle space and tabs, but if you mix them it can cause problems. The best way 
to avoid this problem is to use a text editor that knows about Python and generates 
consistent indentation. 
If nothing works, move on to the next section... 

A.1.1 I keep making changes and it makes no difference. 
If the interpreter says there is an error and you don�t see it, that might be because you and 
the interpreter are not looking at the same code. Check your programming environment to 
make sure that the program you are editing is the one Python is trying to run. 

If you are not sure, try putting an obvious and deliberate syntax error at the beginning of 
the program. Now run it again. If the interpreter doesn�t find the new error, you are not 
running the new code. 

There are a few likely culprits: 

� You edited the file and forgot to save the changes before running it again. 
Some 
programming environments do this for you, but some don�t. 
� You changed the name of the file, but you are still running the old name. 
� Something in your development environment is configured incorrectly. 

A.2. Runtime errors 
� If you are writing a module and using import, make sure you don�t give your module 
the same name as one of the standard Python modules. 
� If you are using impor. 
to read a module, remember that you have to restart the 
interpreter or use reloa. 
to read a modified file. If you import the module again, it 
doesn�t do anything. 
If you get stuck and you can�t figure out what is going on, one approach is to start again 
with a new program like �Hello, World!,� and make sure you can get a known program to 
run. Then gradually add the pieces of the original program to the new one. 

A.2 Runtime errors 
Once your program is syntactically correct, Python can compile it and at least start running 
it. What could possibly go wrong? 

A.2.1 My program does absolutely nothing. 
This problem is most common when your file consists of functions and classes but does 
not actually invoke anything to start execution. This may be intentional if you only plan to 
import this module to supply classes and functions. 

If it is not intentional, make sure that you are invoking a function to start execution, or 
execute one from the interactive prompt. Also see the �Flow of Execution� section below. 

A.2.2 My program hangs. 
If a program stops and seems to be doing nothing, it is �hanging.� Often that means that it 
is caught in an infinite loop or infinite recursion. 

� If there is a particular loop that you suspect is the problem, add a prin. 
statement 
immediately before the loop that says �entering the loop� and another immediately 
after that says �exiting the loop.� 
Run the program. If you get the first message and not the second, you�ve got an 
infinite loop. Go to the �Infinite Loop� section below. 

� Most of the time, an infinite recursion will cause the program to run for a while and 
then produce a �RuntimeError: Maximum recursion depth exceeded� error. If that 
happens, go to the �Infinite Recursion� section below. 
If you are not getting this error but you suspect there is a problem with a recursive 
method or function, you can still use the techniques in the �Infinite Recursion� section.
 

� If neither of those steps works, start testing other loops and other recursive functions 
and methods. 
� If that doesn�t work, then it is possible that you don�t understand the flow of execution
 in your program. Go to the �Flow of Execution� section below. 

Appendix A. Debugging 

Infinite Loop 

If you think you have an infinite loop and you think you know what loop is causing the 
problem, add a prin. 
statement at the end of the loop that prints the values of the variables 
in the condition and the value of the condition. 

For example: 

while. 
. 
. 
andy. 
. 
. 


. 
d. 
somethin. 
t. 
. 


. 
d. 
somethin. 
t. 
. 


prin. 
"x. 
". 
. 


prin. 
"y. 
". 
. 


prin. 
"condition. 
". 
(. 
. 
. 
an. 
. 
. 
0. 


Now when you run the program, you will see three lines of output for each time through 
the loop. The last time through the loop, the condition should be false. If the loop keeps 
going, you will be able to see the values of . 
and y, and you might figure out why they are 
not being updated correctly. 

Infinite Recursion 

Most of the time, an infinite recursion will cause the program to run for a while and then 
produce a Maximu. 
recursio. 
dept. 
exceede. 
error. 

If you suspect that a function or method is causing an infinite recursion, start by checking 
to make sure that there is a base case. In other words, there should be some condition that 
will cause the function or method to return without making a recursive invocation. If not, 
then you need to rethink the algorithm and identify a base case. 

If there is a base case but the program doesn�t seem to be reaching it, add a prin. 
statement 
at the beginning of the function or method that prints the parameters. Now when you 
run the program, you will see a few lines of output every time the function or method is 
invoked, and you will see the parameters. If the parameters are not moving toward the 
base case, you will get some ideas about why not. 

Flow of Execution 

If you are not sure how the flow of execution is moving through your program, add prin. 
statements to the beginning of each function with a message like �entering function foo,� 
where fo. 
is the name of the function. 

Now when you run the program, it will print a trace of each function as it is invoked. 

A.2.3 When I run the program I get an exception. 
If something goes wrong during runtime, Python prints a message that includes the name 
of the exception, the line of the program where the problem occurred, and a traceback. 

The traceback identifies the function that is currently running, and then the function that 
invoked it, and then the function that invoked that, and so on. In other words, it traces the 


A.2. Runtime errors 
sequence of function invocations that got you to where you are. It also includes the line 
number in your file where each of these calls occurs. 

The first step is to examine the place in the program where the error occurred and see if 
you can figure out what happened. These are some of the most common runtime errors: 

NameError: You are trying to use a variable that doesn�t exist in the current environment. 
Remember that local variables are local. You cannot refer to them from outside the 
function where they are defined. 

TypeError: There are several possible causes: 

� You are trying to use a value improperly. 
Example: indexing a string, list, or 
tuple with something other than an integer. 
� There is a mismatch between the items in a format string and the items passed 
for conversion. This can happen if either the number of items does not match or 
an invalid conversion is called for. 
� You are passing the wrong number of arguments to a function or method. For 
methods, look at the method definition and check that the first parameter is self. Then look at the method invocation; make sure you are invoking the 
method on an object with the right type and providing the other arguments 
correctly. 
KeyError: You are trying to access an element of a dictionary using a key that the dictionary
 does not contain. 

AttributeError: You are trying to access an attribute or method that does not exist. Check 
the spelling! You can use di. 
to list the attributes that do exist. 

If an AttributeError indicates that an object has NoneType, that means that it is None. 
One common cause is forgetting to return a value from a function; if you get to the 
end of a function without hitting a retur. 
statement, it returns None. Another common
 cause is using the result from a list method, like sort, that returns None. 

IndexError: The index you are using to access a list, string, or tuple is greater than its 
length minus one. Immediately before the site of the error, add a prin. 
statement to 
display the value of the index and the length of the array. Is the array the right size? 
Is the index the right value? 

The Python debugger (pdb) is useful for tracking down Exceptions because it allows you 
to examine the state of the program immediately before the error. You can read about pd. 
at http://docs.python.org/2/library/pdb.html. 

A.2.4 I added so many prin. 
statements I get inundated with output. 
One of the problems with using prin. 
statements for debugging is that you can end up 
buried in output. There are two ways to proceed: simplify the output or simplify the 
program. 

To simplify the output, you can remove or comment out prin. 
statements that aren�t helping,
 or combine them, or format the output so it is easier to understand. 


Appendix A. Debugging 

To simplify the program, there are several things you can do. First, scale down the problem 
the program is working on. For example, if you are searching a list, search a small list. If 
the program takes input from the user, give it the simplest input that causes the problem. 

Second, clean up the program. Remove dead code and reorganize the program to make 
it as easy to read as possible. For example, if you suspect that the problem is in a deeply 
nested part of the program, try rewriting that part with simpler structure. If you suspect a 
large function, try splitting it into smaller functions and testing them separately. 

Often the process of finding the minimal test case leads you to the bug. If you find that 
a program works in one situation but not in another, that gives you a clue about what is 
going on. 

Similarly, rewriting a piece of code can help you find subtle bugs. If you make a change 
that you think shouldn�t affect the program, and it does, that can tip you off. 

A.3 Semantic errors 
In some ways, semantic errors are the hardest to debug, because the interpreter provides 
no information about what is wrong. Only you know what the program is supposed to do. 

The first step is to make a connection between the program text and the behavior you are 
seeing. You need a hypothesis about what the program is actually doing. One of the things 
that makes that hard is that computers run so fast. 

You will often wish that you could slow the program down to human speed, and with 
some debuggers you can. But the time it takes to insert a few well-placed prin. 
statements 
is often short compared to setting up the debugger, inserting and removing breakpoints, 
and �stepping� the program to where the error is occurring. 

A.3.1 My program doesn�t work. 
You should ask yourself these questions: 

� Is there something the program was supposed to do but which doesn�t seem to be 
happening? Find the section of the code that performs that function and make sure 
it is executing when you think it should. 
� Is something happening that shouldn�t? Find code in your program that performs 
that function and see if it is executing when it shouldn�t. 
� Is a section of code producing an effect that is not what you expected? Make sure that 
you understand the code in question, especially if it involves invocations to functions 
or methods in other Python modules. Read the documentation for the functions you 
invoke. Try them out by writing simple test cases and checking the results. 
In order to program, you need to have a mental model of how programs work. If you write 
a program that doesn�t do what you expect, very often the problem is not in the program; 
it�s in your mental model. 


A.3. Semantic errors 
The best way to correct your mental model is to break the program into its components 
(usually the functions and methods) and test each component independently. Once you 
find the discrepancy between your model and reality, you can solve the problem. 

Of course, you should be building and testing components as you develop the program. 
If you encounter a problem, there should be only a small amount of new code that is not 
known to be correct. 

A.3.2 I�ve got a big hairy expression and it doesn�t do what I expect. 
Writing complex expressions is fine as long as they are readable, but they can be hard to 
debug. It is often a good idea to break a complex expression into a series of assignments to 
temporary variables. 

For example: 

self.hands[i].addCard(self.hands[self.findNeighbor(i)].popCard(). 


This can be rewritten as: 

neighbo. 
. 
self.findNeighbor(i. 


pickedCar. 
. 
self.hands[neighbor].popCard(. 


self.hands[i].addCard(pickedCard. 


The explicit version is easier to read because the variable names provide additional documentation,
 and it is easier to debug because you can check the types of the intermediate 
variables and display their values. 

Another problem that can occur with big expressions is that the order of evaluation may 

x

not be what you expect. For example, if you are translating the expression 2. 
into Python, 
you might write: 

y=. 
. 
. 
. 
math.p. 


That is not correct because multiplication and division have the same precedence and are 
evaluated from left to right. So this expression computes xp/2. 

A good way to debug expressions is to add parentheses to make the order of evaluation 
explicit: 

. 
. 
. 
. 
(. 
. 
math.pi. 


Whenever you are not sure of the order of evaluation, use parentheses. Not only will the 
program be correct (in the sense of doing what you intended), it will also be more readable 
for other people who haven�t memorized the rules of precedence. 

A.3.3 I�ve got a function or method that doesn�t return what I expect. 
If you have a retur. 
statement with a complex expression, you don�t have a chance to print 
the retur. 
value before returning. Again, you can use a temporary variable. For example, 
instead of: 

retur. 
self.hands[i].removeMatches(. 


you could write: 

coun. 
. 
self.hands[i].removeMatches(. 


retur. 
coun. 


Now you have the opportunity to display the value of coun. 
before returning. 


Appendix A. Debugging 

A.3.4 I�m really, really stuck and I need help. 
First, try getting away from the computer for a few minutes. Computers emit waves that 
affect the brain, causing these symptoms: 

� Frustration and rage. 
� Superstitious beliefs (�the computer hates me�) and magical thinking (�the program 
only works when I wear my hat backward�). 
� Random walk programming (the attempt to program by writing every possible program
 and choosing the one that does the right thing). 
If you find yourself suffering from any of these symptoms, get up and go for a walk. When 
you are calm, think about the program. What is it doing? What are some possible causes 
of that behavior? When was the last time you had a working program, and what did you 
do next? 

Sometimes it just takes time to find a bug. I often find bugs when I am away from the 
computer and let my mind wander. Some of the best places to find bugs are trains, showers, 
and in bed, just before you fall asleep. 

A.3.5 No, I really need help. 
It happens. Even the best programmers occasionally get stuck. Sometimes you work on a 
program so long that you can�t see the error. A fresh pair of eyes is just the thing. 

Before you bring someone else in, make sure you are prepared. Your program should be as 
simple as possible, and you should be working on the smallest input that causes the error. 
You should have prin. 
statements in the appropriate places (and the output they produce 
should be comprehensible). You should understand the problem well enough to describe 
it concisely. 

When you bring someone in to help, be sure to give them the information they need: 

� If there is an error message, what is it and what part of the program does it indicate? 
� What was the last thing you did before this error occurred? What were the last lines 
of code that you wrote, or what is the new test case that fails? 
� What have you tried so far, and what have you learned? 
When you find the bug, take a second to think about what you could have done to find it 
faster. Next time you see something similar, you will be able to find the bug more quickly. 

Remember, the goal is not just to make the program work. The goal is to learn how to make 
the program work. 


Appendix B 

Analysis of Algorithms 

This appendix is an edited excerpt from Think Complexity, by Allen B. Downey, 

also published by O�Reilly Media (2011). When you are done with this book, 

you might want to move on to that one. 

Analysis of algorithms is a branch of computer science that studies the performance of 
algorithms, especially their run time and space requirements. See http://en.wikipedia. 
org/wiki/Analysis_of_algorithms. 

The practical goal of algorithm analysis is to predict the performance of different algorithms
 in order to guide design decisions. 

During the 2008 United States Presidential Campaign, candidate Barack Obama was asked 
to perform an impromptu analysis when he visited Google. Chief executive Eric Schmidt 
jokingly asked him for �the most efficient way to sort a million 32-bit integers.� Obama 
had apparently been tipped off, because he quickly replied, �I think the bubble sort would 
be the wrong way to go.� See http://www.youtube.com/watch?v=k4RRi_ntQc8. 

This is true: bubble sort is conceptually simple but slow for large datasets. The answer
 Schmidt was probably looking for is �radix sort� (http://en.wikipedia.org/wiki. 
Radix_sort)1. 

The goal of algorithm analysis is to make meaningful comparisons between algorithms, 
but there are some problems: 

� The relative performance of the algorithms might depend on characteristics of the 
hardware, so one algorithm might be faster on Machine A, another on Machine B. 
The general solution to this problem is to specify a machine model and analyze the 
number of steps, or operations, an algorithm requires under a given model. 
� Relative performance might depend on the details of the dataset. For example, some 
sorting algorithms run faster if the data are already partially sorted; other algorithms 
1 But if you get a question like this in an interview, I think a better answer is, �The fastest way to sort a million 
integers is to use whatever sort function is provided by the language I�m using. Its performance is good enough 
for the vast majority of applications, but if it turned out that my application was too slow, I would use a profiler 
to see where the time was being spent. If it looked like a faster sort algorithm would have a significant effect on 
performance, then I would look around for a good implementation of radix sort.� 


Appendix B. Analysis of Algorithms 

run slower in this case. A common way to avoid this problem is to analyze the worst 
case scenario. It is sometimes useful to analyze average case performance, but that�s 
usually harder, and it might not be obvious what set of cases to average over. 

� Relative performance also depends on the size of the problem. A sorting algorithm 
that is fast for small lists might be slow for long lists. The usual solution to this 
problem is to express run time (or number of operations) as a function of problem 
size, and to compare the functions asymptotically as the problem size increases. 
The good thing about this kind of comparison that it lends itself to simple classification of 
algorithms. For example, if I know that the run time of Algorithm A tends to be proportional
 to the size of the input, n, and Algorithm B tends to be proportional to n2, then I 
expect A to be faster than B for large values of n. 

This kind of analysis comes with some caveats, but we�ll get to that later. 

B.1 Order of growth 
Suppose you have analyzed two algorithms and expressed their run times in terms of the 
size of the input: Algorithm A takes 100n + 
1 steps to solve a problem with size n; Algorithm
 B takes n2 + 
n + 
1 steps. 

The following table shows the run time of these algorithms for different problem sizes: 

Input Run time of Run time of 
size Algorithm A Algorithm B 
10 1 001 111 
100 10 001 10 101 
1 000 100 001 1 001 001 
10 000 1 000 001 > 
1010 

At n = 
10, Algorithm A looks pretty bad; it takes almost 10 times longer than Algorithm 

B. But for n = 
100 they are about the same, and for larger values A is much better. 
The fundamental reason is that for large values of n, any function that contains an n2 term 
will grow faster than a function whose leading term is n. The leading term is the term with 
the highest exponent. 

For Algorithm A, the leading term has a large coefficient, 100, which is why B does better 
than A for small n. But regardless of the coefficients, there will always be some value of n 
where an2 > 
bn. 

The same argument applies to the non-leading terms. Even if the run time of Algorithm A 
were n + 
1000000, it would still be better than Algorithm B for sufficiently large n. 

In general, we expect an algorithm with a smaller leading term to be a better algorithm for 
large problems, but for smaller problems, there may be a crossover point where another 
algorithm is better. The location of the crossover point depends on the details of the algorithms,
 the inputs, and the hardware, so it is usually ignored for purposes of algorithmic 
analysis. But that doesn�t mean you can forget about it. 

If two algorithms have the same leading order term, it is hard to say which is better; again, 
the answer depends on the details. So for algorithmic analysis, functions with the same 
leading term are considered equivalent, even if they have different coefficients. 


B.1. Order of growth 
An order of growth is a set of functions whose asymptotic growth behavior is considered 
equivalent. For example, 2n, 100n and n + 
1 belong to the same order of growth, which is 
written O(n) 
in Big-Oh notation and often called linear because every function in the set 
grows linearly with n. 

All functions with the leading term n2 belong to O(n2); they are quadratic, which is a fancy 

2

word for functions with the leading term n. 

The following table shows some of the orders of growth that appear most commonly in 
algorithmic analysis, in increasing order of badness. 

Order of 
growth 
Name 
O(1) 
O(logb n) 
O(n) 
O(n logb n) 
O(n2) 
O(n3) 
O(cn) 
constant 
logarithmic (for any b) 
linear 
�en log en� 
quadratic 
cubic 
exponential (for any c) 

For the logarithmic terms, the base of the logarithm doesn�t matter; changing bases is the 
equivalent of multiplying by a constant, which doesn�t change the order of growth. Similarly,
 all exponential functions belong to the same order of growth regardless of the base 
of the exponent. Exponential functions grow very quickly, so exponential algorithms are 
only useful for small problems. 

Exercise B.1. Read the Wikipedia page on Big-Oh notation at http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Big. 
O. 
notatio. 
and answer the following questions: 

1. What is the order of growth of n3 + 
n2? What about 1000000n3 + 
n2? What about n3 + 
1000000n
2? 

2. What is the order of growth of (n2 + 
n) 
� 
(n + 
1)? Before you start multiplying, remember 
that you only need the leading term. 
3. If f isinO(g), for some unspecified function g, what can we say about a f + 
b? 
4. Iff1 and f2 are inO(g), what can we say about f1 + 
f2? 
5. Iff1 is inO(g) 
and f2 is inO(h), what can we say about f1 + 
f2? 
6. Iff1 is inO(g) 
and f2 is O(h), what can we say about f1 � 
f2? 
Programmers who care about performance often find this kind of analysis hard to swallow.
 They have a point: sometimes the coefficients and the non-leading terms make a 
real difference. Sometimes the details of the hardware, the programming language, and 
the characteristics of the input make a big difference. And for small problems asymptotic 
behavior is irrelevant. 

But if you keep those caveats in mind, algorithmic analysis is a useful tool. At least for 
large problems, the �better� algorithms is usually better, and sometimes it is much better. 
The difference between two algorithms with the same order of growth is usually a constant 
factor, but the difference between a good algorithm and a bad algorithm is unbounded! 


Appendix B. Analysis of Algorithms 

B.2 Analysis of basic Python operations 
Most arithmetic operations are constant time; multiplication usually takes longer than addition
 and subtraction, and division takes even longer, but these run times don�t depend 
on the magnitude of the operands. Very large integers are an exception; in that case the run 
time increases with the number of digits. 

Indexing operations�reading or writing elements in a sequence or dictionary�are also 
constant time, regardless of the size of the data structure. 

A fo. 
loop that traverses a sequence or dictionary is usually linear, as long as all of the 
operations in the body of the loop are constant time. For example, adding up the elements 
of a list is linear: 

tota. 
. 
. 


fo. 
. 
int. 


tota. 
+. 
. 


The built-in function su. 
is also linear because it does the same thing, but it tends to be 
faster because it is a more efficient implementation; in the language of algorithmic analysis, 
it has a smaller leading coefficient. 

If you use the same loop to �add� a list of strings, the run time is quadratic because string 
concatenation is linear. 

The string method joi. 
is usually faster because it is linear in the total length of the strings. 

As a rule of thumb, if the body of a loop is in O(na) 
then the whole loop is in O(na+1). The 
exception is if you can show that the loop exits after a constant number of iterations. If a 
loop runs k times regardless of n, then the loop is in O(na), even for large k. 

Multiplying by k doesn�t change the order of growth, but neither does dividing. So if the 
body of a loop is in O(na) 
and it runs n/k times, the loop is in O(na+1), even for large k. 

Most string and tuple operations are linear, except indexing and len, which are constant 
time. The built-in functions mi. 
and ma. 
are linear. The run-time of a slice operation is 
proportional to the length of the output, but independent of the size of the input. 

All string methods are linear, but if the lengths of the strings are bounded by a constant� 
for example, operations on single characters�they are considered constant time. 

Most list methods are linear, but there are some exceptions: 

� Adding an element to the end of a list is constant time on average; when it runs 
out of room it occasionally gets copied to a bigger location, but the total time for n 
operations is O(n), so we say that the �amortized� time for one operation is O(1). 
� Removing an element from the end of a list is constant time. 
� Sorting is O(n log n). 
Most dictionary operations and methods are constant time, but there are some exceptions: 

� The run time of cop. 
is proportional to the number of elements, but not the size of 
the elements (it copies references, not the elements themselves). 

B.3. Analysis of search algorithms 
� The run time of updat. 
is proportional to the size of the dictionary passed as a parameter,
 not the dictionary being updated. 
� 
keys, value. 
and item. 
are linear because they return new lists; iterkeys, itervalue. 
and iteritem. 
are constant time because they return iterators. But if 
you loop through the iterators, the loop will be linear. Using the �iter� functions 
saves some overhead, but it doesn�t change the order of growth unless the number of 
items you access is bounded. 
The performance of dictionaries is one of the minor miracles of computer science. We will 
see how they work in Section B.4. 

Exercise B.2. Read the Wikipedia page on sorting algorithms at http. 
/. 
en. 
wikipedia. 
org. 
wiki. 
Sorting. 
algorith. 
and answer the following questions: 

1. What is a �comparison sort?� What is the best worst-case order of growth for a comparison 
sort? What is the best worst-case order of growth for any sort algorithm? 
2. What is the order of growth of bubble sort, and why does Barack Obama think it is �the wrong 
way to go?� 
3. What is the order of growth of radix sort? What preconditions do we need to use it? 
4. What is a stable sort and why might it matter in practice? 
5. What is the worst sorting algorithm (that has a name)? 
6. What sort algorithm does the C library use? What sort algorithm does Python use? Are these 
algorithms stable? You might have to Google around to find these answers. 
7. Many of the non-comparison sorts are linear, so why does does Python use an O(n log n) 
comparison sort? 
B.3 Analysis of search algorithms 
A search is an algorithm that takes a collection and a target item and determines whether 
the target is in the collection, often returning the index of the target. 

The simplest search algorithm is a �linear search,� which traverses the items of the collection
 in order, stopping if it finds the target. In the worst case it has to traverse the entire 
collection, so the run time is linear. 

The i. 
operator for sequences uses a linear search; so do string methods like fin. 
and count. 

If the elements of the sequence are in order, you can use a bisection search, which is 
O(log n). Bisection search is similar to the algorithm you probably use to look a word 
up in a dictionary (a real dictionary, not the data structure). Instead of starting at the beginning
 and checking each item in order, you start with the item in the middle and check 
whether the word you are looking for comes before or after. If it comes before, then you 
search the first half of the sequence. Otherwise you search the second half. Either way, you 
cut the number of remaining items in half. 

If the sequence has 1,000,000 items, it will take about 20 steps to find the word or conclude 
that it�s not there. So that�s about 50,000 times faster than a linear search. 


Appendix B. Analysis of Algorithms 

Exercise B.3. Write a function called bisectio. 
that takes a sorted list and a target value and 
returns the index of the value in the list, if it�s there, or Non. 
if it�s not. 

Or you could read the documentation of the bisec. 
module and use that! 

Bisection search can be much faster than linear search, but it requires the sequence to be in 
order, which might require extra work. 

There is another data structure, called a hashtable that is even faster�it can do a search 
in constant time�and it doesn�t require the items to be sorted. Python dictionaries are 
implemented using hashtables, which is why most dictionary operations, including the i. 
operator, are constant time. 

B.4 Hashtables 
To explain how hashtables work and why their performance is so good, I start with a simple 
implementation of a map and gradually improve it until it�s a hashtable. 

I use Python to demonstrate these implementations, but in real life you wouldn�t write 
code like this in Python; you would just use a dictionary! So for the rest of this chapter, you 
have to imagine that dictionaries don�t exist and you want to implement a data structure 
that maps from keys to values. The operations you have to implement are: 

add(k. 
v): Add a new item that maps from key . 
to value v. With a Python dictionary, d, 
this operation is written d[k. 
. 
v. 

get(target): Look up and return the value that corresponds to key target. With a Python 
dictionary, d, this operation is written d[target. 
or d.get(target). 

For now, I assume that each key only appears once. The simplest implementation of this 
interface uses a list of tuples, where each tuple is a key-value pair. 

clas. 
LinearMap(object). 


de. 
__init__(self). 


self.item. 
. 
[. 


de. 
add(self. 
k. 
v). 


self.items.append((k. 
v). 


de. 
get(self. 
k). 


fo. 
key. 
va. 
i. 
self.items. 


i. 
ke. 
=. 
k. 


retur. 
va. 


rais. 
KeyErro. 


ad. 
appends a key-value tuple to the list of items, which takes constant time. 
ge. 
uses a fo. 
loop to search the list: if it finds the target key it returns the corresponding 
value; otherwise it raises a KeyError. So ge. 
is linear. 

An alternative is to keep the list sorted by key. Then ge. 
could use a bisection search, 
which is O(log n). But inserting a new item in the middle of a list is linear, so this might 


B.4. Hashtables 
not be the best option. There are other data structures (see http://en.wikipedia.org. 
wiki/Red. 
black_tree) that can implement ad. 
and ge. 
in log time, but that�s still not as 
good as constant time, so let�s move on. 

One way to improve LinearMa. 
is to break the list of key-value pairs into smaller lists. 
Here�s an implementation called BetterMap, which is a list of 100 LinearMaps. As we�ll 
see in a second, the order of growth for ge. 
is still linear, but BetterMa. 
is a step on the 
path toward hashtables: 

clas. 
BetterMap(object). 


de. 
__init__(self. 
n=100). 


self.map. 
. 
[. 


fo. 
. 
i. 
range(n). 


self.maps.append(LinearMap(). 


de. 
find_map(self. 
k). 


inde. 
. 
hash(k. 
. 
len(self.maps. 


retur. 
self.maps[index. 


de. 
add(self. 
k. 
v). 


. 
. 
self.find_map(k. 


m.add(k. 
v. 


de. 
get(self. 
k). 


. 
. 
self.find_map(k. 


retur. 
m.get(k. 


__init_. 
makes a list of . 
LinearMaps. 

find_ma. 
is used by ad. 
and ge. 
to figure out which map to put the new item in, or which 
map to search. 

find_ma. 
uses the built-in function hash, which takes almost any Python object and returns 
an integer. A limitation of this implementation is that it only works with hashable keys. 
Mutable types like lists and dictionaries are unhashable. 

Hashable objects that are considered equal return the same hash value, but the converse is 
not necessarily true: two different objects can return the same hash value. 

find_ma. 
uses the modulus operator to wrap the hash values into the range from 0 to len(self.maps), so the result is a legal index into the list. Of course, this means that many 
different hash values will wrap onto the same index. But if the hash function spreads things 
out pretty evenly (which is what hash functions are designed to do), then we expect n/100 
items per LinearMap. 

Since the run time of LinearMap.ge. 
is proportional to the number of items, we expect 
BetterMap to be about 100 times faster than LinearMap. The order of growth is still linear, 
but the leading coefficient is smaller. That�s nice, but still not as good as a hashtable. 

Here (finally) is the crucial idea that makes hashtables fast: if you can keep the maximum 
length of the LinearMaps bounded, LinearMap.ge. 
is constant time. All you have to do is 
keep track of the number of items and when the number of items per LinearMap exceeds 
a threshold, resize the hashtable by adding more LinearMaps. 

Here is an implementation of a hashtable: 


Appendix B. Analysis of Algorithms 

clas. 
HashMap(object). 


de. 
__init__(self). 


self.map. 
. 
BetterMap(2. 


self.nu. 
. 
. 


de. 
get(self. 
k). 


retur. 
self.maps.get(k. 


de. 
add(self. 
k. 
v). 


i. 
self.nu. 
=. 
len(self.maps.maps). 


self.resize(. 


self.maps.add(k. 
v. 


self.nu. 
+. 
. 


de. 
resize(self). 


new_map. 
. 
BetterMap(self.nu. 
. 
2. 


fo. 
. 
i. 
self.maps.maps. 


fo. 
k. 
. 
i. 
m.items. 


new_maps.add(k. 
v. 


self.map. 
. 
new_map. 


Each HashMa. 
contains a BetterMap; __init_. 
starts with just 2 LinearMaps and initializes 

num, which keeps track of the number of items. 
ge. 
just dispatches to BetterMap. The real work happens in add, which checks the number 
of items and the size of the BetterMap: if they are equal, the average number of items per 
LinearMap is 1, so it calls resize. 

resiz. 
make a new BetterMap, twice as big as the previous one, and then �rehashes� the 
items from the old map to the new. 

Rehashing is necessary because changing the number of LinearMaps changes the denominator
 of the modulus operator in find_map. That means that some objects that used to 
wrap into the same LinearMap will get split up (which is what we wanted, right?). 

Rehashing is linear, so resiz. 
is linear, which might seem bad, since I promised that ad. 
would be constant time. But remember that we don�t have to resize every time, so ad. 
is 
usually constant time and only occasionally linear. The total amount of work to run ad. 
n 
times is proportional to n, so the average time of each ad. 
is constant time! 

To see how this works, think about starting with an empty HashTable and adding a sequence
 of items. We start with 2 LinearMaps, so the first 2 adds are fast (no resizing required).
 Let�s say that they take one unit of work each. The next add requires a resize, so 
we have to rehash the first two items (let�s call that 2 more units of work) and then add the 
third item (one more unit). Adding the next item costs 1 unit, so the total so far is 6 units 
of work for 4 items. 

The next ad. 
costs 5 units, but the next three are only one unit each, so the total is 14 units 
for the first 8 adds. 


B.4. Hashtables 
209 


Figure B.1: The cost of a hashtable add. 

The next ad. 
costs 9 units, but then we can add 7 more before the next resize, so the total is 
30 units for the first 16 adds. 

After 32 adds, the total cost is 62 units, and I hope you are starting to see a pattern. After n 
adds, where n is a power of two, the total cost is 2n . 
2 units, so the average work per add 
is a little less than 2 units. When n is a power of two, that�s the best case; for other values of 
n the average work is a little higher, but that�s not important. The important thing is that it 
is O(1). 

Figure B.1 shows how this works graphically. Each block represents a unit of work. The 
columns show the total work for each add in order from left to right: the first two add. 
cost 
1 units, the third costs 3 units, etc. 

The extra work of rehashing appears as a sequence of increasingly tall towers with increasing
 space between them. Now if you knock over the towers, amortizing the cost of resizing 
over all adds, you can see graphically that the total cost after n adds is 2n . 
2. 

An important feature of this algorithm is that when we resize the HashTable it grows 
geometrically; that is, we multiply the size by a constant. If you increase the size 
arithmetically�adding a fixed number each time�the average time per ad. 
is linear. 

You can download my implementation of HashMap from http://thinkpython/code. 
Map.py, but remember that there is no reason to use it; if you want a map, just use a Python 
dictionary. 


Appendix B. Analysis of Algorithms 


Appendix C 

Lumpy 

Throughout the book, I have used diagrams to represent the state of running programs. 

In Section 2.2, we used a state diagram to show the names and values of variables. In 
Section 3.10 I introduced a stack diagram, which shows one frame for each function call. 
Each frame shows the parameters and local variables for the function or method. Stack 
diagrams for recursive functions appear in Section 5.9 and Section 6.5. 

Section 10.2 shows what a list looks like in a state diagram, Section 11.4 shows what a 
dictionary looks like, and Section 12.6 shows two ways to represent tuples. 

Section 15.2 introduces object diagrams, which show the state of an object�s attributes, and 
their attributes, and so on. Section 15.3 has object diagrams for Rectangles and their embedded
 Points. Section 16.1 shows the state of a Time object. Section 18.2 has a diagram 
that includes a class object and an instance, each with their own attributes. 

Finally, Section 18.8 introduces class diagrams, which show the classes that make up a 
program and the relationships between them. 

These diagrams are based on the Unified Modeling Language (UML), which is a standardized
 graphical language used by software engineers to communicate about program 
design, especially for object-oriented programs. 

UML is a rich language with many kinds of diagrams that represent many kinds of relationship
 between objects and classes. What I presented in this book is a small subset of the 
language, but it is the subset most commonly used in practice. 

The purpose of this appendix is to review the diagrams presented in the previous chapters, 
and to introduce Lumpy. Lumpy, which stands for �UML in Python,� with some of the 
letters rearranged, is part of Swampy, which you already installed if you worked on the 
case study in Chapter 4 or Chapter 19, or if you did Exercise 15.4, 

Lumpy uses Python�s inspec. 
module to examine the state of a running program and 
generate object diagrams (including stack diagrams) and class diagrams. 

C.1 State diagram 
Here�s an example that uses Lumpy to generate a state diagram. 


Appendix C. Lumpy 

n17message'And now for something complete'pi3.14159265359<module>
Figure C.1: State diagram generated by Lumpy. 

<module>
n2countdownn1countdownn0countdown
Figure C.2: Stack diagram. 

fro. 
swampy.Lump. 
impor. 
Lump. 


lump. 
. 
Lumpy(. 


lumpy.make_reference(. 


messag. 
. 
'An. 
no. 
fo. 
somethin. 
completel. 
different. 


. 
. 
1. 


p. 
. 
3.141592653589793. 


lumpy.object_diagram(. 


The first line imports the Lumpy class from swampy.Lumpy. If you don�t have Swampy 
installed as a package, make sure the Swampy files are in Python�s search path and use 
this impor. 
statement instead: 

fro. 
Lump. 
impor. 
Lump. 


The next lines create a Lump. 
object and make a �reference� point, which means that Lumpy 
records the objects that have been defined so far. 

Next we define new variables and invoke object_diagram, which draws the objects that 
have been defined since the reference point, in this case message, . 
and pi. 

Figure C.1 shows the result. The graphical style is different from what I showed earlier; for 
example, each reference is represented by a circle next to the variable name and a line to 
the value. And long strings are truncated. But the information conveyed by the diagram is 
the same. 

The variable names are in a frame labeled <module>, which indicates that these are module-
level variables, also known as global. 

You can download this example from http://thinkpython.com/code/lumpy_demo1.py. 
Try adding some additional assignments and see what the diagram looks like. 

C.2 Stack diagram 
Here�s an example that uses Lumpy to generate a stack diagram. You can download it from http://thinkpython.com/code/lumpy_demo2.py. 


C.3. Object diagrams 
cheeses0'Cheddar'
1'Edam'
2'Gouda'listnumbers0171123listemptylist<module>
Figure C.3: Object diagram. 

fro. 
swampy.Lump. 
impor. 
Lump. 


de. 
countdown(n). 


i. 
n<. 
0. 


prin. 
'Blastoff!. 


lumpy.object_diagram(. 


else. 


prin. 
. 


countdown(n-1. 


lump. 
. 
Lumpy(. 
lumpy.make_reference(. 
countdown(3. 


Figure C.2 shows the result. Each frame is represented with a box that has the function�s 
name outside and variables inside. Since this function is recursive, there is one frame for 
each level of recursion. 

Remember that a stack diagram shows the state of the program at a particular point in 
its execution. To get the diagram you want, sometimes you have to think about where to 
invoke object_diagram. 

In this case I invoke object_diagra. 
after executing the base case of the recursion; that 
way the stack diagram shows each level of the recursion. You can call object_diagra. 
more than once to get a series of snapshots of the program�s execution. 

C.3 Object diagrams 
This example generates an object diagram showing the lists from Section 10.1. You can 
download it from http://thinkpython.com/code/lumpy_demo3.py. 

fro. 
swampy.Lump. 
impor. 
Lump. 


lump. 
. 
Lumpy(. 
lumpy.make_reference(. 


cheese. 
. 
['Cheddar'. 
'Edam'. 
'Gouda'. 



Appendix C. Lumpy 

inverse10'a'
1'p'
2't'
3'o'list20'r'listdicthist'a'1'p'1'r'2't'1'o'1dict<module>
Figure C.4: Object diagram. 

number. 
. 
[17. 
123. 
empt. 
. 
[. 


lumpy.object_diagram(. 


Figure C.3 shows the result. Lists are represented by a box that shows the indices mapping 
to the elements. This representation is slightly misleading, since indices are not actually 
part of the list, but I think they make the diagram easier to read. The empty list is represented
 by an empty box. 

And here�s an example showing the dictionaries from Section 11.4. You can download it 
from http://thinkpython.com/code/lumpy_demo4.py. 

fro. 
swampy.Lump. 
impor. 
Lump. 


lump. 
. 
Lumpy(. 
lumpy.make_reference(. 


his. 
. 
histogram('parrot'. 
invers. 
. 
invert_dict(hist. 


lumpy.object_diagram(. 
Figure C.4 shows the result. his. 
is a dictionary that maps from characters (single-letter 
strings) to integers; invers. 
maps from integers to lists of strings. 

This example generates an object diagram for Point and Rectangle objects, as in Section
 15.6. You can download it from http://thinkpython.com/code/lumpy_demo5.py. 

impor. 
cop. 
fro. 
swampy.Lump. 
impor. 
Lump. 



C.4. Function and class objects 
boxwidth100.0cornery0.0x0.0Pointheight200.0Rectanglebox2width100.0height200.0cornerRectangle<module>
Figure C.5: Object diagram. 

Point__name__'Point'typeinstantiate__name__'instantiate'functionRectangle__name__'Rectangle'type<module>
objPointconstructorinstantiate
Figure C.6: Object diagram. 

lump. 
. 
Lumpy(. 
lumpy.make_reference(. 


bo. 
. 
Rectangle(. 
box.widt. 
. 
100.. 
box.heigh. 
. 
200.. 
box.corne. 
. 
Point(. 
box.corner.. 
. 
0.. 
box.corner.. 
. 
0.. 


box. 
. 
copy.copy(box. 


lumpy.object_diagram(. 


Figure C.5 shows the result. copy.cop. 
make a shallow copy, so bo. 
and box. 
have their 
own widt. 
and height, but they share the same embedded Point object. This kind of 
sharing is usually fine with immutable objects, but with mutable types, it is highly error-
prone. 

C.4 Function and class objects 
When I use Lumpy to make object diagrams, I usually define the functions and classes 
before I make the reference point. That way, function and class objects don�t appear in the 
diagram. 


Appendix C. Lumpy 

objectRectanglecornerheightwidthPointxy
Figure C.7: Class diagram. 

But if you are passing functions and classes as parameters, you might want them to appear. 
This example shows what that looks like; you can download it from http://thinkpython. 
com/code/lumpy_demo6.py. 

impor. 
cop. 
fro. 
swampy.Lump. 
impor. 
Lump. 


lump. 
. 
Lumpy(. 
lumpy.make_reference(. 


clas. 
Point(object). 
"""Represent. 
. 
poin. 
i. 
2-. 
space."". 


clas. 
Rectangle(object). 
"""Represent. 
. 
rectangle."". 


de. 
instantiate(constructor). 


"""Instantiate. 
. 
ne. 
object."". 


ob. 
. 
constructor(. 


lumpy.object_diagram(. 


retur. 
ob. 


poin. 
. 
instantiate(Point. 


Figure C.6 shows the result. Since we invoke object_diagra. 
inside a function, we get 
a stack diagram with a frame for the module-level variables and for the invocation of instantiate. 

At the module level, Poin. 
and Rectangl. 
refer to class objects (which have type type); instantiat. 
refers to a function object. 

This diagram might clarify two points of common confusion: (1) the difference between the 
class object, Point, and the instance of Point, obj, and (2) the difference between the function
 object created when instantiat. 
is defined, and the frame created with it is called. 

C.5 Class Diagrams 
Although I distinguish between state diagrams, stack diagrams and object diagrams, they 
are mostly the same thing: they show the state of a running program at a point in time. 


C.5. Class Diagrams 
objectDeck__init__
__str__
add_cardmove_cardspop_cardremove_cardshufflesortcardsHand__init__
PokerHandhas_flushsuit_histcardslabelCard__cmp__
__init__
__str__
rank_namessuit_namesranksuit
Figure C.8: Class diagram. 

Class diagrams are different. They show the classes that make up a program and the relationships
 between them. They are timeless in the sense that they describe the program 
as a whole, not any particular point in time. For example, if an instance of Class A generally
 contains a reference to an instance of Class B, we say there is a �HAS-A relationship� 
between those classes. 

Here�s an example that shows a HAS-A relationship. You can download it from http. 
//thinkpython.com/code/lumpy_demo7.py. 

fro. 
swampy.Lump. 
impor. 
Lump. 


lump. 
. 
Lumpy(. 


lumpy.make_reference(. 


bo. 
. 
Rectangle(. 


box.widt. 
. 
100.. 


box.heigh. 
. 
200.. 


box.corne. 
. 
Point(. 


box.corner.. 
. 
0.. 


box.corner.. 
. 
0.. 


lumpy.class_diagram(. 


Figure C.7 shows the result. Each class is represented with a box that contains the name of 
the class, any methods the class provides, any class variables, and any instance variables. 
In this example, Rectangl. 
and Poin. 
have instance variables, but no methods or class 
variables. 

The arrow from Rectangl. 
to Poin. 
shows that Rectangles contain an embedded Point. 
In addition, Rectangl. 
and Poin. 
both inherit from object, which is represented in the 
diagram with a triangle-headed arrow. 


Appendix C. Lumpy 

Here�s a more complex example using my solution to Exercise 18.6. You can download 
the code from http://thinkpython.com/code/lumpy_demo8.py; you will also need http. 
//thinkpython.com/code/PokerHand.py. 

fro. 
swampy.Lump. 
impor. 
Lump. 


fro. 
PokerHan. 
impor. 
. 


lump. 
. 
Lumpy(. 
lumpy.make_reference(. 


dec. 
. 
Deck(. 
han. 
. 
PokerHand(. 
deck.move_cards(hand. 
7. 


lumpy.class_diagram(. 
Figure C.8 shows the result. PokerHan. 
inherits from Hand, which inherits from Deck. Both Dec. 
and PokerHan. 
have Cards. 

This diagram does not show that Han. 
also has cards, because in the program there are no 
instances of Hand. This example demonstrates a limitation of Lumpy; it only knows about 
the attributes and HAS-A relationships of objects that are instantiated. 


